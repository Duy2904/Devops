/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA TMC WebAPI
 * The TripOTA TMC WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActiveTitleLevelRequest } from '../models';
// @ts-ignore
import { ApprovalConfigurationDto } from '../models';
// @ts-ignore
import { AssignBookerCommand } from '../models';
// @ts-ignore
import { CreateApprovalConfigurationRequest } from '../models';
// @ts-ignore
import { CreateCorporationModel } from '../models';
// @ts-ignore
import { CreateTitleLevelsRequest } from '../models';
// @ts-ignore
import { CreateTravelPolicyCommand } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { Filter } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { JobTitleDto } from '../models';
// @ts-ignore
import { MemberApprovalProcessDto } from '../models';
// @ts-ignore
import { MemberTravelPolicyDto } from '../models';
// @ts-ignore
import { PaginationResponseOfApprovalConfigurationDto } from '../models';
// @ts-ignore
import { PaginationResponseOfTitleLevelDto } from '../models';
// @ts-ignore
import { PaginationResponseOfTravelPolicyInfoDto } from '../models';
// @ts-ignore
import { TitleLevelDto } from '../models';
// @ts-ignore
import { TravelPolicyDetailDto } from '../models';
// @ts-ignore
import { TravelPolicyInfoDto } from '../models';
// @ts-ignore
import { UpdateApprovalConfigurationRequest } from '../models';
// @ts-ignore
import { UpdateTitleLevelRequest } from '../models';
// @ts-ignore
import { UpdateTravelPolicyCommand } from '../models';
// @ts-ignore
import { VerifyResult } from '../models';
/**
 * CorporationApi - axios parameter creator
 * @export
 */
export const CorporationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignEmployeesToTravelPolicy: async (id: string, requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('assignEmployeesToTravelPolicy', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('assignEmployeesToTravelPolicy', 'requestBody', requestBody)
            const localVarPath = `/api/v1/corporation/travel-policies/{id}/assign-employees`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign booker to corporation
         * @param {string} id 
         * @param {AssignBookerCommand} assignBookerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corporationAssignBooker: async (id: string, assignBookerCommand: AssignBookerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('corporationAssignBooker', 'id', id)
            // verify required parameter 'assignBookerCommand' is not null or undefined
            assertParamExists('corporationAssignBooker', 'assignBookerCommand', assignBookerCommand)
            const localVarPath = `/api/v1/corporation/{id}/assign-booker`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignBookerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a corporation
         * @param {CreateCorporationModel} createCorporationModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corporationCreate: async (createCorporationModel: CreateCorporationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCorporationModel' is not null or undefined
            assertParamExists('corporationCreate', 'createCorporationModel', createCorporationModel)
            const localVarPath = `/api/v1/corporation/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCorporationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateApprovalConfigurationRequest} createApprovalConfigurationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnApprovalConfiguration: async (createApprovalConfigurationRequest: CreateApprovalConfigurationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createApprovalConfigurationRequest' is not null or undefined
            assertParamExists('createAnApprovalConfiguration', 'createApprovalConfigurationRequest', createApprovalConfigurationRequest)
            const localVarPath = `/api/v1/corporation/approval-configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createApprovalConfigurationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTitleLevelsRequest} createTitleLevelsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleTitleLevels: async (createTitleLevelsRequest: CreateTitleLevelsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTitleLevelsRequest' is not null or undefined
            assertParamExists('createMultipleTitleLevels', 'createTitleLevelsRequest', createTitleLevelsRequest)
            const localVarPath = `/api/v1/corporation/title-level`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTitleLevelsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTravelPolicyCommand} createTravelPolicyCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTravelPolicy: async (createTravelPolicyCommand: CreateTravelPolicyCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTravelPolicyCommand' is not null or undefined
            assertParamExists('createTravelPolicy', 'createTravelPolicyCommand', createTravelPolicyCommand)
            const localVarPath = `/api/v1/corporation/travel-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTravelPolicyCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnApprovalConfiguration: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAnApprovalConfiguration', 'id', id)
            const localVarPath = `/api/v1/corporation/approval-configuration/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTitleLevelById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTitleLevelById', 'id', id)
            const localVarPath = `/api/v1/corporation/title-level/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTravelPolicy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTravelPolicy', 'id', id)
            const localVarPath = `/api/v1/corporation/travel-policies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableDisableATravelPolicy: async (id: string, isActive?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('enableDisableATravelPolicy', 'id', id)
            const localVarPath = `/api/v1/corporation/travel-policies/{id}/toggle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableDisableAnApprovalProcess: async (id: string, isActive?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('enableDisableAnApprovalProcess', 'id', id)
            const localVarPath = `/api/v1/corporation/approval-configuration/{id}/toggle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActiveJobTitles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/corporation/active-job-titles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActiveTitleLevels: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/corporation/active-title-levels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [customFilterKeyword] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTitleLevelsWithPagination: async (customFilterKeyword?: string, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/corporation/title-level-pagination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (customFilterKeyword !== undefined) {
                localVarQueryParameter['CustomFilter.Keyword'] = customFilterKeyword;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (orderBy) {
                localVarQueryParameter['OrderBy'] = orderBy;
            }

            if (advancedSearchFields) {
                localVarQueryParameter['AdvancedSearch.Fields'] = advancedSearchFields;
            }

            if (advancedSearchKeyword !== undefined) {
                localVarQueryParameter['AdvancedSearch.Keyword'] = advancedSearchKeyword;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (advancedFilterLogic !== undefined) {
                localVarQueryParameter['AdvancedFilter.Logic'] = advancedFilterLogic;
            }

            if (advancedFilterFilters) {
                localVarQueryParameter['AdvancedFilter.Filters'] = advancedFilterFilters;
            }

            if (advancedFilterField !== undefined) {
                localVarQueryParameter['AdvancedFilter.Field'] = advancedFilterField;
            }

            if (advancedFilterOperator !== undefined) {
                localVarQueryParameter['AdvancedFilter.Operator'] = advancedFilterOperator;
            }

            if (advancedFilterValue !== undefined) {
                localVarQueryParameter['AdvancedFilter.Value'] = advancedFilterValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a list of employees who can be added to the approval configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableEmployeesThatCanBeAddedToTheApprovalConfiguration: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/corporation/approval-configuration/team-members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableEmployeesThatCanBeAddedToTheTravelPolicy: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/corporation/travel-policies/team-members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailAnApprovalConfiguration: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetailAnApprovalConfiguration', 'id', id)
            const localVarPath = `/api/v1/corporation/approval-configuration/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTravelPolicyDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTravelPolicyDetails', 'id', id)
            const localVarPath = `/api/v1/corporation/travel-policies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTitleLevelById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveTitleLevelById', 'id', id)
            const localVarPath = `/api/v1/corporation/title-level/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTheListOfApprovalConfigurationData: async (pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/corporation/search/approval-configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (orderBy) {
                localVarQueryParameter['OrderBy'] = orderBy;
            }

            if (advancedSearchFields) {
                localVarQueryParameter['AdvancedSearch.Fields'] = advancedSearchFields;
            }

            if (advancedSearchKeyword !== undefined) {
                localVarQueryParameter['AdvancedSearch.Keyword'] = advancedSearchKeyword;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (advancedFilterLogic !== undefined) {
                localVarQueryParameter['AdvancedFilter.Logic'] = advancedFilterLogic;
            }

            if (advancedFilterFilters) {
                localVarQueryParameter['AdvancedFilter.Filters'] = advancedFilterFilters;
            }

            if (advancedFilterField !== undefined) {
                localVarQueryParameter['AdvancedFilter.Field'] = advancedFilterField;
            }

            if (advancedFilterOperator !== undefined) {
                localVarQueryParameter['AdvancedFilter.Operator'] = advancedFilterOperator;
            }

            if (advancedFilterValue !== undefined) {
                localVarQueryParameter['AdvancedFilter.Value'] = advancedFilterValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTravelPoliciesWithPagination: async (pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/corporation/search/travel-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (orderBy) {
                localVarQueryParameter['OrderBy'] = orderBy;
            }

            if (advancedSearchFields) {
                localVarQueryParameter['AdvancedSearch.Fields'] = advancedSearchFields;
            }

            if (advancedSearchKeyword !== undefined) {
                localVarQueryParameter['AdvancedSearch.Keyword'] = advancedSearchKeyword;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (advancedFilterLogic !== undefined) {
                localVarQueryParameter['AdvancedFilter.Logic'] = advancedFilterLogic;
            }

            if (advancedFilterFilters) {
                localVarQueryParameter['AdvancedFilter.Filters'] = advancedFilterFilters;
            }

            if (advancedFilterField !== undefined) {
                localVarQueryParameter['AdvancedFilter.Field'] = advancedFilterField;
            }

            if (advancedFilterOperator !== undefined) {
                localVarQueryParameter['AdvancedFilter.Operator'] = advancedFilterOperator;
            }

            if (advancedFilterValue !== undefined) {
                localVarQueryParameter['AdvancedFilter.Value'] = advancedFilterValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateApprovalConfigurationRequest} updateApprovalConfigurationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnApprovalConfiguration: async (id: string, updateApprovalConfigurationRequest: UpdateApprovalConfigurationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAnApprovalConfiguration', 'id', id)
            // verify required parameter 'updateApprovalConfigurationRequest' is not null or undefined
            assertParamExists('updateAnApprovalConfiguration', 'updateApprovalConfigurationRequest', updateApprovalConfigurationRequest)
            const localVarPath = `/api/v1/corporation/approval-configuration/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateApprovalConfigurationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ActiveTitleLevelRequest} activeTitleLevelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusActiveJobLevel: async (activeTitleLevelRequest: ActiveTitleLevelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'activeTitleLevelRequest' is not null or undefined
            assertParamExists('updateStatusActiveJobLevel', 'activeTitleLevelRequest', activeTitleLevelRequest)
            const localVarPath = `/api/v1/corporation/active-title-level`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(activeTitleLevelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateTitleLevelRequest} updateTitleLevelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTitleLevel: async (updateTitleLevelRequest: UpdateTitleLevelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateTitleLevelRequest' is not null or undefined
            assertParamExists('updateTitleLevel', 'updateTitleLevelRequest', updateTitleLevelRequest)
            const localVarPath = `/api/v1/corporation/title-level`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTitleLevelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTravelPolicyCommand} updateTravelPolicyCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTravelPolicy: async (id: string, updateTravelPolicyCommand: UpdateTravelPolicyCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTravelPolicy', 'id', id)
            // verify required parameter 'updateTravelPolicyCommand' is not null or undefined
            assertParamExists('updateTravelPolicy', 'updateTravelPolicyCommand', updateTravelPolicyCommand)
            const localVarPath = `/api/v1/corporation/travel-policies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTravelPolicyCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAnApprovalConfigurationIsReadyForDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('verifyAnApprovalConfigurationIsReadyForDelete', 'id', id)
            const localVarPath = `/api/v1/corporation/approval-configuration/{id}/verify-deleting`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CorporationApi - functional programming interface
 * @export
 */
export const CorporationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CorporationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignEmployeesToTravelPolicy(id: string, requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelPolicyInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignEmployeesToTravelPolicy(id, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Assign booker to corporation
         * @param {string} id 
         * @param {AssignBookerCommand} assignBookerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async corporationAssignBooker(id: string, assignBookerCommand: AssignBookerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.corporationAssignBooker(id, assignBookerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a corporation
         * @param {CreateCorporationModel} createCorporationModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async corporationCreate(createCorporationModel: CreateCorporationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCorporationModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.corporationCreate(createCorporationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateApprovalConfigurationRequest} createApprovalConfigurationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnApprovalConfiguration(createApprovalConfigurationRequest: CreateApprovalConfigurationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApprovalConfigurationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAnApprovalConfiguration(createApprovalConfigurationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateTitleLevelsRequest} createTitleLevelsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMultipleTitleLevels(createTitleLevelsRequest: CreateTitleLevelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMultipleTitleLevels(createTitleLevelsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateTravelPolicyCommand} createTravelPolicyCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTravelPolicy(createTravelPolicyCommand: CreateTravelPolicyCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelPolicyDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTravelPolicy(createTravelPolicyCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAnApprovalConfiguration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAnApprovalConfiguration(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTitleLevelById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTitleLevelById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTravelPolicy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTravelPolicy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enableDisableATravelPolicy(id: string, isActive?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enableDisableATravelPolicy(id, isActive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enableDisableAnApprovalProcess(id: string, isActive?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enableDisableAnApprovalProcess(id, isActive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllActiveJobTitles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobTitleDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllActiveJobTitles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllActiveTitleLevels(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TitleLevelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllActiveTitleLevels(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [customFilterKeyword] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTitleLevelsWithPagination(customFilterKeyword?: string, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTitleLevelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTitleLevelsWithPagination(customFilterKeyword, pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a list of employees who can be added to the approval configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableEmployeesThatCanBeAddedToTheApprovalConfiguration(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MemberApprovalProcessDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableEmployeesThatCanBeAddedToTheApprovalConfiguration(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableEmployeesThatCanBeAddedToTheTravelPolicy(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MemberTravelPolicyDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableEmployeesThatCanBeAddedToTheTravelPolicy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailAnApprovalConfiguration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApprovalConfigurationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailAnApprovalConfiguration(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTravelPolicyDetails(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelPolicyDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTravelPolicyDetails(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveTitleLevelById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TitleLevelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveTitleLevelById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchTheListOfApprovalConfigurationData(pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfApprovalConfigurationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchTheListOfApprovalConfigurationData(pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchTravelPoliciesWithPagination(pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTravelPolicyInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchTravelPoliciesWithPagination(pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateApprovalConfigurationRequest} updateApprovalConfigurationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAnApprovalConfiguration(id: string, updateApprovalConfigurationRequest: UpdateApprovalConfigurationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApprovalConfigurationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAnApprovalConfiguration(id, updateApprovalConfigurationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ActiveTitleLevelRequest} activeTitleLevelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatusActiveJobLevel(activeTitleLevelRequest: ActiveTitleLevelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatusActiveJobLevel(activeTitleLevelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateTitleLevelRequest} updateTitleLevelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTitleLevel(updateTitleLevelRequest: UpdateTitleLevelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTitleLevel(updateTitleLevelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTravelPolicyCommand} updateTravelPolicyCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTravelPolicy(id: string, updateTravelPolicyCommand: UpdateTravelPolicyCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTravelPolicy(id, updateTravelPolicyCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyAnApprovalConfigurationIsReadyForDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyAnApprovalConfigurationIsReadyForDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CorporationApi - factory interface
 * @export
 */
export const CorporationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CorporationApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignEmployeesToTravelPolicy(id: string, requestBody: Array<string>, options?: any): AxiosPromise<TravelPolicyInfoDto> {
            return localVarFp.assignEmployeesToTravelPolicy(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign booker to corporation
         * @param {string} id 
         * @param {AssignBookerCommand} assignBookerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corporationAssignBooker(id: string, assignBookerCommand: AssignBookerCommand, options?: any): AxiosPromise<boolean> {
            return localVarFp.corporationAssignBooker(id, assignBookerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a corporation
         * @param {CreateCorporationModel} createCorporationModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corporationCreate(createCorporationModel: CreateCorporationModel, options?: any): AxiosPromise<CreateCorporationModel> {
            return localVarFp.corporationCreate(createCorporationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateApprovalConfigurationRequest} createApprovalConfigurationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnApprovalConfiguration(createApprovalConfigurationRequest: CreateApprovalConfigurationRequest, options?: any): AxiosPromise<ApprovalConfigurationDto> {
            return localVarFp.createAnApprovalConfiguration(createApprovalConfigurationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTitleLevelsRequest} createTitleLevelsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleTitleLevels(createTitleLevelsRequest: CreateTitleLevelsRequest, options?: any): AxiosPromise<File> {
            return localVarFp.createMultipleTitleLevels(createTitleLevelsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTravelPolicyCommand} createTravelPolicyCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTravelPolicy(createTravelPolicyCommand: CreateTravelPolicyCommand, options?: any): AxiosPromise<TravelPolicyDetailDto> {
            return localVarFp.createTravelPolicy(createTravelPolicyCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnApprovalConfiguration(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAnApprovalConfiguration(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTitleLevelById(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTitleLevelById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTravelPolicy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTravelPolicy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableDisableATravelPolicy(id: string, isActive?: boolean, options?: any): AxiosPromise<File> {
            return localVarFp.enableDisableATravelPolicy(id, isActive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableDisableAnApprovalProcess(id: string, isActive?: boolean, options?: any): AxiosPromise<File> {
            return localVarFp.enableDisableAnApprovalProcess(id, isActive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActiveJobTitles(options?: any): AxiosPromise<Array<JobTitleDto>> {
            return localVarFp.getAllActiveJobTitles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActiveTitleLevels(options?: any): AxiosPromise<Array<TitleLevelDto>> {
            return localVarFp.getAllActiveTitleLevels(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [customFilterKeyword] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTitleLevelsWithPagination(customFilterKeyword?: string, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: any): AxiosPromise<PaginationResponseOfTitleLevelDto> {
            return localVarFp.getAllTitleLevelsWithPagination(customFilterKeyword, pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a list of employees who can be added to the approval configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableEmployeesThatCanBeAddedToTheApprovalConfiguration(options?: any): AxiosPromise<Array<MemberApprovalProcessDto>> {
            return localVarFp.getAvailableEmployeesThatCanBeAddedToTheApprovalConfiguration(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableEmployeesThatCanBeAddedToTheTravelPolicy(options?: any): AxiosPromise<Array<MemberTravelPolicyDto>> {
            return localVarFp.getAvailableEmployeesThatCanBeAddedToTheTravelPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailAnApprovalConfiguration(id: string, options?: any): AxiosPromise<ApprovalConfigurationDto> {
            return localVarFp.getDetailAnApprovalConfiguration(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTravelPolicyDetails(id: string, options?: any): AxiosPromise<TravelPolicyDetailDto> {
            return localVarFp.getTravelPolicyDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTitleLevelById(id: string, options?: any): AxiosPromise<TitleLevelDto> {
            return localVarFp.retrieveTitleLevelById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTheListOfApprovalConfigurationData(pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: any): AxiosPromise<PaginationResponseOfApprovalConfigurationDto> {
            return localVarFp.searchTheListOfApprovalConfigurationData(pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTravelPoliciesWithPagination(pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: any): AxiosPromise<PaginationResponseOfTravelPolicyInfoDto> {
            return localVarFp.searchTravelPoliciesWithPagination(pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateApprovalConfigurationRequest} updateApprovalConfigurationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnApprovalConfiguration(id: string, updateApprovalConfigurationRequest: UpdateApprovalConfigurationRequest, options?: any): AxiosPromise<ApprovalConfigurationDto> {
            return localVarFp.updateAnApprovalConfiguration(id, updateApprovalConfigurationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ActiveTitleLevelRequest} activeTitleLevelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusActiveJobLevel(activeTitleLevelRequest: ActiveTitleLevelRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateStatusActiveJobLevel(activeTitleLevelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateTitleLevelRequest} updateTitleLevelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTitleLevel(updateTitleLevelRequest: UpdateTitleLevelRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateTitleLevel(updateTitleLevelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTravelPolicyCommand} updateTravelPolicyCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTravelPolicy(id: string, updateTravelPolicyCommand: UpdateTravelPolicyCommand, options?: any): AxiosPromise<void> {
            return localVarFp.updateTravelPolicy(id, updateTravelPolicyCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAnApprovalConfigurationIsReadyForDelete(id: string, options?: any): AxiosPromise<VerifyResult> {
            return localVarFp.verifyAnApprovalConfigurationIsReadyForDelete(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CorporationApi - object-oriented interface
 * @export
 * @class CorporationApi
 * @extends {BaseAPI}
 */
export class CorporationApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public assignEmployeesToTravelPolicy(id: string, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).assignEmployeesToTravelPolicy(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign booker to corporation
     * @param {string} id 
     * @param {AssignBookerCommand} assignBookerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public corporationAssignBooker(id: string, assignBookerCommand: AssignBookerCommand, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).corporationAssignBooker(id, assignBookerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a corporation
     * @param {CreateCorporationModel} createCorporationModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public corporationCreate(createCorporationModel: CreateCorporationModel, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).corporationCreate(createCorporationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateApprovalConfigurationRequest} createApprovalConfigurationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public createAnApprovalConfiguration(createApprovalConfigurationRequest: CreateApprovalConfigurationRequest, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).createAnApprovalConfiguration(createApprovalConfigurationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTitleLevelsRequest} createTitleLevelsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public createMultipleTitleLevels(createTitleLevelsRequest: CreateTitleLevelsRequest, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).createMultipleTitleLevels(createTitleLevelsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTravelPolicyCommand} createTravelPolicyCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public createTravelPolicy(createTravelPolicyCommand: CreateTravelPolicyCommand, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).createTravelPolicy(createTravelPolicyCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public deleteAnApprovalConfiguration(id: string, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).deleteAnApprovalConfiguration(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public deleteTitleLevelById(id: string, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).deleteTitleLevelById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public deleteTravelPolicy(id: string, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).deleteTravelPolicy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {boolean} [isActive] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public enableDisableATravelPolicy(id: string, isActive?: boolean, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).enableDisableATravelPolicy(id, isActive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {boolean} [isActive] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public enableDisableAnApprovalProcess(id: string, isActive?: boolean, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).enableDisableAnApprovalProcess(id, isActive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public getAllActiveJobTitles(options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).getAllActiveJobTitles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public getAllActiveTitleLevels(options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).getAllActiveTitleLevels(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [customFilterKeyword] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [orderBy] 
     * @param {Array<string>} [advancedSearchFields] 
     * @param {string} [advancedSearchKeyword] 
     * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
     * @param {string} [advancedFilterLogic] 
     * @param {Array<Filter>} [advancedFilterFilters] 
     * @param {string} [advancedFilterField] 
     * @param {string} [advancedFilterOperator] 
     * @param {any} [advancedFilterValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public getAllTitleLevelsWithPagination(customFilterKeyword?: string, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).getAllTitleLevelsWithPagination(customFilterKeyword, pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a list of employees who can be added to the approval configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public getAvailableEmployeesThatCanBeAddedToTheApprovalConfiguration(options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).getAvailableEmployeesThatCanBeAddedToTheApprovalConfiguration(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public getAvailableEmployeesThatCanBeAddedToTheTravelPolicy(options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).getAvailableEmployeesThatCanBeAddedToTheTravelPolicy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public getDetailAnApprovalConfiguration(id: string, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).getDetailAnApprovalConfiguration(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public getTravelPolicyDetails(id: string, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).getTravelPolicyDetails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public retrieveTitleLevelById(id: string, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).retrieveTitleLevelById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [orderBy] 
     * @param {Array<string>} [advancedSearchFields] 
     * @param {string} [advancedSearchKeyword] 
     * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
     * @param {string} [advancedFilterLogic] 
     * @param {Array<Filter>} [advancedFilterFilters] 
     * @param {string} [advancedFilterField] 
     * @param {string} [advancedFilterOperator] 
     * @param {any} [advancedFilterValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public searchTheListOfApprovalConfigurationData(pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).searchTheListOfApprovalConfigurationData(pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [orderBy] 
     * @param {Array<string>} [advancedSearchFields] 
     * @param {string} [advancedSearchKeyword] 
     * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
     * @param {string} [advancedFilterLogic] 
     * @param {Array<Filter>} [advancedFilterFilters] 
     * @param {string} [advancedFilterField] 
     * @param {string} [advancedFilterOperator] 
     * @param {any} [advancedFilterValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public searchTravelPoliciesWithPagination(pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).searchTravelPoliciesWithPagination(pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateApprovalConfigurationRequest} updateApprovalConfigurationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public updateAnApprovalConfiguration(id: string, updateApprovalConfigurationRequest: UpdateApprovalConfigurationRequest, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).updateAnApprovalConfiguration(id, updateApprovalConfigurationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ActiveTitleLevelRequest} activeTitleLevelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public updateStatusActiveJobLevel(activeTitleLevelRequest: ActiveTitleLevelRequest, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).updateStatusActiveJobLevel(activeTitleLevelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateTitleLevelRequest} updateTitleLevelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public updateTitleLevel(updateTitleLevelRequest: UpdateTitleLevelRequest, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).updateTitleLevel(updateTitleLevelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateTravelPolicyCommand} updateTravelPolicyCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public updateTravelPolicy(id: string, updateTravelPolicyCommand: UpdateTravelPolicyCommand, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).updateTravelPolicy(id, updateTravelPolicyCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorporationApi
     */
    public verifyAnApprovalConfigurationIsReadyForDelete(id: string, options?: AxiosRequestConfig) {
        return CorporationApiFp(this.configuration).verifyAnApprovalConfigurationIsReadyForDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
}
