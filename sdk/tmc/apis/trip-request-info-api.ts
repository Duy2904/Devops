/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA TMC WebAPI
 * The TripOTA TMC WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { Filter } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { MarkHotelBookingOrdersAsReadRequest } from '../models';
// @ts-ignore
import { PaginationResponseOfTripHotelBookingOrderDto } from '../models';
// @ts-ignore
import { SaveAsDraftRequest } from '../models';
// @ts-ignore
import { TravelerBudgetPolicyDto } from '../models';
// @ts-ignore
import { TripApprovalConfigurationDto } from '../models';
// @ts-ignore
import { TripHotelBookingInfoDto } from '../models';
// @ts-ignore
import { UpdateTripSearchInformationCommand } from '../models';
/**
 * TripRequestInfoApi - axios parameter creator
 * @export
 */
export const TripRequestInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [customFiltersKeyword] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {string} [sortItemFieldName] 
         * @param {boolean} [sortItemIsAsc] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelBookingOrdersForBookerWithPagination: async (customFiltersKeyword?: string, customFiltersStartDate?: Date, customFiltersEndDate?: Date, sortItemFieldName?: string, sortItemIsAsc?: boolean, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/triprequestinfo/booker/booking-hotels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (customFiltersKeyword !== undefined) {
                localVarQueryParameter['CustomFilters.Keyword'] = customFiltersKeyword;
            }

            if (customFiltersStartDate !== undefined) {
                localVarQueryParameter['CustomFilters.StartDate'] = (customFiltersStartDate as any instanceof Date) ?
                    (customFiltersStartDate as any).toISOString() :
                    customFiltersStartDate;
            }

            if (customFiltersEndDate !== undefined) {
                localVarQueryParameter['CustomFilters.EndDate'] = (customFiltersEndDate as any instanceof Date) ?
                    (customFiltersEndDate as any).toISOString() :
                    customFiltersEndDate;
            }

            if (sortItemFieldName !== undefined) {
                localVarQueryParameter['SortItem.FieldName'] = sortItemFieldName;
            }

            if (sortItemIsAsc !== undefined) {
                localVarQueryParameter['SortItem.IsAsc'] = sortItemIsAsc;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (orderBy) {
                localVarQueryParameter['OrderBy'] = orderBy;
            }

            if (advancedSearchFields) {
                localVarQueryParameter['AdvancedSearch.Fields'] = advancedSearchFields;
            }

            if (advancedSearchKeyword !== undefined) {
                localVarQueryParameter['AdvancedSearch.Keyword'] = advancedSearchKeyword;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (advancedFilterLogic !== undefined) {
                localVarQueryParameter['AdvancedFilter.Logic'] = advancedFilterLogic;
            }

            if (advancedFilterFilters) {
                localVarQueryParameter['AdvancedFilter.Filters'] = advancedFilterFilters;
            }

            if (advancedFilterField !== undefined) {
                localVarQueryParameter['AdvancedFilter.Field'] = advancedFilterField;
            }

            if (advancedFilterOperator !== undefined) {
                localVarQueryParameter['AdvancedFilter.Operator'] = advancedFilterOperator;
            }

            if (advancedFilterValue !== undefined) {
                localVarQueryParameter['AdvancedFilter.Value'] = advancedFilterValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripHotelBookingDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTripHotelBookingDetails', 'id', id)
            const localVarPath = `/api/triprequestinfo/booker/{id}/booking-hotels/details`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tripId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesTheApprovalProcessConfigurationForASpecifiedTrip: async (tripId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripId' is not null or undefined
            assertParamExists('retrievesTheApprovalProcessConfigurationForASpecifiedTrip', 'tripId', tripId)
            const localVarPath = `/api/triprequestinfo/{tripId}/approval-process`
                .replace(`{${"tripId"}}`, encodeURIComponent(String(tripId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tripId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesTheTravelerPolicyForASpecifiedTrip: async (tripId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripId' is not null or undefined
            assertParamExists('retrievesTheTravelerPolicyForASpecifiedTrip', 'tripId', tripId)
            const localVarPath = `/api/triprequestinfo/{tripId}/travel-policy`
                .replace(`{${"tripId"}}`, encodeURIComponent(String(tripId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SaveAsDraftRequest} saveAsDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAsDraft: async (saveAsDraftRequest: SaveAsDraftRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saveAsDraftRequest' is not null or undefined
            assertParamExists('saveAsDraft', 'saveAsDraftRequest', saveAsDraftRequest)
            const localVarPath = `/api/triprequestinfo/save-as-draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveAsDraftRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a specified hotel booking order as read for the booker.
         * @summary Mark hotel booking order as read.
         * @param {MarkHotelBookingOrdersAsReadRequest} markHotelBookingOrdersAsReadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripRequestInfoMarkBookingOrderAsRead: async (markHotelBookingOrdersAsReadRequest: MarkHotelBookingOrdersAsReadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'markHotelBookingOrdersAsReadRequest' is not null or undefined
            assertParamExists('tripRequestInfoMarkBookingOrderAsRead', 'markHotelBookingOrdersAsReadRequest', markHotelBookingOrdersAsReadRequest)
            const localVarPath = `/api/triprequestinfo/booker/booking-hotels-mark-as-read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(markHotelBookingOrdersAsReadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update reservation code for hotel
         * @param {string} id 
         * @param {string} [tripId] 
         * @param {string} [tripHotelId] 
         * @param {string} [hotelId] 
         * @param {string} [hotelName] 
         * @param {string} [hotelAddress] 
         * @param {string} [roomTypeId] 
         * @param {string} [roomTypeName] 
         * @param {number} [starRating] 
         * @param {number} [newRoomPrice] 
         * @param {number} [newTax] 
         * @param {number} [newServiceFee] 
         * @param {string} [reservationCode] 
         * @param {Date} [reservationDate] 
         * @param {string} [tourCode] 
         * @param {string} [note] 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripRequestInfoUpdateReservationCodeForHotel: async (id: string, tripId?: string, tripHotelId?: string, hotelId?: string, hotelName?: string, hotelAddress?: string, roomTypeId?: string, roomTypeName?: string, starRating?: number, newRoomPrice?: number, newTax?: number, newServiceFee?: number, reservationCode?: string, reservationDate?: Date, tourCode?: string, note?: string, files?: Array<File>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tripRequestInfoUpdateReservationCodeForHotel', 'id', id)
            const localVarPath = `/api/triprequestinfo/booker/{id}/booking-hotels/confirm`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


            if (tripId !== undefined) { 
                localVarFormParams.append('TripId', tripId as any);
            }
    
            if (tripHotelId !== undefined) { 
                localVarFormParams.append('TripHotelId', tripHotelId as any);
            }
    
            if (hotelId !== undefined) { 
                localVarFormParams.append('HotelId', hotelId as any);
            }
    
            if (hotelName !== undefined) { 
                localVarFormParams.append('HotelName', hotelName as any);
            }
    
            if (hotelAddress !== undefined) { 
                localVarFormParams.append('HotelAddress', hotelAddress as any);
            }
    
            if (roomTypeId !== undefined) { 
                localVarFormParams.append('RoomTypeId', roomTypeId as any);
            }
    
            if (roomTypeName !== undefined) { 
                localVarFormParams.append('RoomTypeName', roomTypeName as any);
            }
    
            if (starRating !== undefined) { 
                localVarFormParams.append('StarRating', starRating as any);
            }
    
            if (newRoomPrice !== undefined) { 
                localVarFormParams.append('NewRoomPrice', newRoomPrice as any);
            }
    
            if (newTax !== undefined) { 
                localVarFormParams.append('NewTax', newTax as any);
            }
    
            if (newServiceFee !== undefined) { 
                localVarFormParams.append('NewServiceFee', newServiceFee as any);
            }
    
            if (reservationCode !== undefined) { 
                localVarFormParams.append('ReservationCode', reservationCode as any);
            }
    
            if (reservationDate !== undefined) { 
                localVarFormParams.append('ReservationDate', reservationDate as any);
            }
    
            if (tourCode !== undefined) { 
                localVarFormParams.append('TourCode', tourCode as any);
            }
    
            if (note !== undefined) { 
                localVarFormParams.append('Note', note as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('Files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateTripSearchInformationCommand} updateTripSearchInformationCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTripSearchInformationAsynchronously: async (updateTripSearchInformationCommand: UpdateTripSearchInformationCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateTripSearchInformationCommand' is not null or undefined
            assertParamExists('updateTripSearchInformationAsynchronously', 'updateTripSearchInformationCommand', updateTripSearchInformationCommand)
            const localVarPath = `/api/triprequestinfo/trip-search-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTripSearchInformationCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TripRequestInfoApi - functional programming interface
 * @export
 */
export const TripRequestInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TripRequestInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [customFiltersKeyword] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {string} [sortItemFieldName] 
         * @param {boolean} [sortItemIsAsc] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHotelBookingOrdersForBookerWithPagination(customFiltersKeyword?: string, customFiltersStartDate?: Date, customFiltersEndDate?: Date, sortItemFieldName?: string, sortItemIsAsc?: boolean, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTripHotelBookingOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHotelBookingOrdersForBookerWithPagination(customFiltersKeyword, customFiltersStartDate, customFiltersEndDate, sortItemFieldName, sortItemIsAsc, pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTripHotelBookingDetails(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripHotelBookingInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTripHotelBookingDetails(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tripId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrievesTheApprovalProcessConfigurationForASpecifiedTrip(tripId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripApprovalConfigurationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrievesTheApprovalProcessConfigurationForASpecifiedTrip(tripId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tripId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrievesTheTravelerPolicyForASpecifiedTrip(tripId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelerBudgetPolicyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrievesTheTravelerPolicyForASpecifiedTrip(tripId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SaveAsDraftRequest} saveAsDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAsDraft(saveAsDraftRequest: SaveAsDraftRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAsDraft(saveAsDraftRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a specified hotel booking order as read for the booker.
         * @summary Mark hotel booking order as read.
         * @param {MarkHotelBookingOrdersAsReadRequest} markHotelBookingOrdersAsReadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tripRequestInfoMarkBookingOrderAsRead(markHotelBookingOrdersAsReadRequest: MarkHotelBookingOrdersAsReadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tripRequestInfoMarkBookingOrderAsRead(markHotelBookingOrdersAsReadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update reservation code for hotel
         * @param {string} id 
         * @param {string} [tripId] 
         * @param {string} [tripHotelId] 
         * @param {string} [hotelId] 
         * @param {string} [hotelName] 
         * @param {string} [hotelAddress] 
         * @param {string} [roomTypeId] 
         * @param {string} [roomTypeName] 
         * @param {number} [starRating] 
         * @param {number} [newRoomPrice] 
         * @param {number} [newTax] 
         * @param {number} [newServiceFee] 
         * @param {string} [reservationCode] 
         * @param {Date} [reservationDate] 
         * @param {string} [tourCode] 
         * @param {string} [note] 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tripRequestInfoUpdateReservationCodeForHotel(id: string, tripId?: string, tripHotelId?: string, hotelId?: string, hotelName?: string, hotelAddress?: string, roomTypeId?: string, roomTypeName?: string, starRating?: number, newRoomPrice?: number, newTax?: number, newServiceFee?: number, reservationCode?: string, reservationDate?: Date, tourCode?: string, note?: string, files?: Array<File>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tripRequestInfoUpdateReservationCodeForHotel(id, tripId, tripHotelId, hotelId, hotelName, hotelAddress, roomTypeId, roomTypeName, starRating, newRoomPrice, newTax, newServiceFee, reservationCode, reservationDate, tourCode, note, files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateTripSearchInformationCommand} updateTripSearchInformationCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTripSearchInformationAsynchronously(updateTripSearchInformationCommand: UpdateTripSearchInformationCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTripSearchInformationAsynchronously(updateTripSearchInformationCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TripRequestInfoApi - factory interface
 * @export
 */
export const TripRequestInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TripRequestInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [customFiltersKeyword] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {string} [sortItemFieldName] 
         * @param {boolean} [sortItemIsAsc] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelBookingOrdersForBookerWithPagination(customFiltersKeyword?: string, customFiltersStartDate?: Date, customFiltersEndDate?: Date, sortItemFieldName?: string, sortItemIsAsc?: boolean, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: any): AxiosPromise<PaginationResponseOfTripHotelBookingOrderDto> {
            return localVarFp.getHotelBookingOrdersForBookerWithPagination(customFiltersKeyword, customFiltersStartDate, customFiltersEndDate, sortItemFieldName, sortItemIsAsc, pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripHotelBookingDetails(id: string, options?: any): AxiosPromise<TripHotelBookingInfoDto> {
            return localVarFp.getTripHotelBookingDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tripId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesTheApprovalProcessConfigurationForASpecifiedTrip(tripId: string, options?: any): AxiosPromise<TripApprovalConfigurationDto> {
            return localVarFp.retrievesTheApprovalProcessConfigurationForASpecifiedTrip(tripId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tripId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesTheTravelerPolicyForASpecifiedTrip(tripId: string, options?: any): AxiosPromise<TravelerBudgetPolicyDto> {
            return localVarFp.retrievesTheTravelerPolicyForASpecifiedTrip(tripId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SaveAsDraftRequest} saveAsDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAsDraft(saveAsDraftRequest: SaveAsDraftRequest, options?: any): AxiosPromise<File> {
            return localVarFp.saveAsDraft(saveAsDraftRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a specified hotel booking order as read for the booker.
         * @summary Mark hotel booking order as read.
         * @param {MarkHotelBookingOrdersAsReadRequest} markHotelBookingOrdersAsReadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripRequestInfoMarkBookingOrderAsRead(markHotelBookingOrdersAsReadRequest: MarkHotelBookingOrdersAsReadRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.tripRequestInfoMarkBookingOrderAsRead(markHotelBookingOrdersAsReadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update reservation code for hotel
         * @param {string} id 
         * @param {string} [tripId] 
         * @param {string} [tripHotelId] 
         * @param {string} [hotelId] 
         * @param {string} [hotelName] 
         * @param {string} [hotelAddress] 
         * @param {string} [roomTypeId] 
         * @param {string} [roomTypeName] 
         * @param {number} [starRating] 
         * @param {number} [newRoomPrice] 
         * @param {number} [newTax] 
         * @param {number} [newServiceFee] 
         * @param {string} [reservationCode] 
         * @param {Date} [reservationDate] 
         * @param {string} [tourCode] 
         * @param {string} [note] 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripRequestInfoUpdateReservationCodeForHotel(id: string, tripId?: string, tripHotelId?: string, hotelId?: string, hotelName?: string, hotelAddress?: string, roomTypeId?: string, roomTypeName?: string, starRating?: number, newRoomPrice?: number, newTax?: number, newServiceFee?: number, reservationCode?: string, reservationDate?: Date, tourCode?: string, note?: string, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.tripRequestInfoUpdateReservationCodeForHotel(id, tripId, tripHotelId, hotelId, hotelName, hotelAddress, roomTypeId, roomTypeName, starRating, newRoomPrice, newTax, newServiceFee, reservationCode, reservationDate, tourCode, note, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateTripSearchInformationCommand} updateTripSearchInformationCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTripSearchInformationAsynchronously(updateTripSearchInformationCommand: UpdateTripSearchInformationCommand, options?: any): AxiosPromise<object> {
            return localVarFp.updateTripSearchInformationAsynchronously(updateTripSearchInformationCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TripRequestInfoApi - object-oriented interface
 * @export
 * @class TripRequestInfoApi
 * @extends {BaseAPI}
 */
export class TripRequestInfoApi extends BaseAPI {
    /**
     * 
     * @param {string} [customFiltersKeyword] 
     * @param {Date} [customFiltersStartDate] 
     * @param {Date} [customFiltersEndDate] 
     * @param {string} [sortItemFieldName] 
     * @param {boolean} [sortItemIsAsc] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [orderBy] 
     * @param {Array<string>} [advancedSearchFields] 
     * @param {string} [advancedSearchKeyword] 
     * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
     * @param {string} [advancedFilterLogic] 
     * @param {Array<Filter>} [advancedFilterFilters] 
     * @param {string} [advancedFilterField] 
     * @param {string} [advancedFilterOperator] 
     * @param {any} [advancedFilterValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripRequestInfoApi
     */
    public getHotelBookingOrdersForBookerWithPagination(customFiltersKeyword?: string, customFiltersStartDate?: Date, customFiltersEndDate?: Date, sortItemFieldName?: string, sortItemIsAsc?: boolean, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig) {
        return TripRequestInfoApiFp(this.configuration).getHotelBookingOrdersForBookerWithPagination(customFiltersKeyword, customFiltersStartDate, customFiltersEndDate, sortItemFieldName, sortItemIsAsc, pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripRequestInfoApi
     */
    public getTripHotelBookingDetails(id: string, options?: AxiosRequestConfig) {
        return TripRequestInfoApiFp(this.configuration).getTripHotelBookingDetails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tripId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripRequestInfoApi
     */
    public retrievesTheApprovalProcessConfigurationForASpecifiedTrip(tripId: string, options?: AxiosRequestConfig) {
        return TripRequestInfoApiFp(this.configuration).retrievesTheApprovalProcessConfigurationForASpecifiedTrip(tripId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tripId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripRequestInfoApi
     */
    public retrievesTheTravelerPolicyForASpecifiedTrip(tripId: string, options?: AxiosRequestConfig) {
        return TripRequestInfoApiFp(this.configuration).retrievesTheTravelerPolicyForASpecifiedTrip(tripId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SaveAsDraftRequest} saveAsDraftRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripRequestInfoApi
     */
    public saveAsDraft(saveAsDraftRequest: SaveAsDraftRequest, options?: AxiosRequestConfig) {
        return TripRequestInfoApiFp(this.configuration).saveAsDraft(saveAsDraftRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a specified hotel booking order as read for the booker.
     * @summary Mark hotel booking order as read.
     * @param {MarkHotelBookingOrdersAsReadRequest} markHotelBookingOrdersAsReadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripRequestInfoApi
     */
    public tripRequestInfoMarkBookingOrderAsRead(markHotelBookingOrdersAsReadRequest: MarkHotelBookingOrdersAsReadRequest, options?: AxiosRequestConfig) {
        return TripRequestInfoApiFp(this.configuration).tripRequestInfoMarkBookingOrderAsRead(markHotelBookingOrdersAsReadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update reservation code for hotel
     * @param {string} id 
     * @param {string} [tripId] 
     * @param {string} [tripHotelId] 
     * @param {string} [hotelId] 
     * @param {string} [hotelName] 
     * @param {string} [hotelAddress] 
     * @param {string} [roomTypeId] 
     * @param {string} [roomTypeName] 
     * @param {number} [starRating] 
     * @param {number} [newRoomPrice] 
     * @param {number} [newTax] 
     * @param {number} [newServiceFee] 
     * @param {string} [reservationCode] 
     * @param {Date} [reservationDate] 
     * @param {string} [tourCode] 
     * @param {string} [note] 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripRequestInfoApi
     */
    public tripRequestInfoUpdateReservationCodeForHotel(id: string, tripId?: string, tripHotelId?: string, hotelId?: string, hotelName?: string, hotelAddress?: string, roomTypeId?: string, roomTypeName?: string, starRating?: number, newRoomPrice?: number, newTax?: number, newServiceFee?: number, reservationCode?: string, reservationDate?: Date, tourCode?: string, note?: string, files?: Array<File>, options?: AxiosRequestConfig) {
        return TripRequestInfoApiFp(this.configuration).tripRequestInfoUpdateReservationCodeForHotel(id, tripId, tripHotelId, hotelId, hotelName, hotelAddress, roomTypeId, roomTypeName, starRating, newRoomPrice, newTax, newServiceFee, reservationCode, reservationDate, tourCode, note, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateTripSearchInformationCommand} updateTripSearchInformationCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripRequestInfoApi
     */
    public updateTripSearchInformationAsynchronously(updateTripSearchInformationCommand: UpdateTripSearchInformationCommand, options?: AxiosRequestConfig) {
        return TripRequestInfoApiFp(this.configuration).updateTripSearchInformationAsynchronously(updateTripSearchInformationCommand, options).then((request) => request(this.axios, this.basePath));
    }
}
