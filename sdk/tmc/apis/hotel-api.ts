/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA TMC WebAPI
 * The TripOTA TMC WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccommodationDto } from '../models';
// @ts-ignore
import { GetHotelDetailRequest } from '../models';
// @ts-ignore
import { SearchHotelsRequest } from '../models';
// @ts-ignore
import { SearchHotelsResponse } from '../models';
// @ts-ignore
import { SuggestedDestinationDto } from '../models';
/**
 * HotelApi - axios parameter creator
 * @export
 */
export const HotelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GetHotelDetailRequest} getHotelDetailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesDetailedInformationAboutAHotelById: async (getHotelDetailRequest: GetHotelDetailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getHotelDetailRequest' is not null or undefined
            assertParamExists('retrievesDetailedInformationAboutAHotelById', 'getHotelDetailRequest', getHotelDetailRequest)
            const localVarPath = `/api/hotel/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getHotelDetailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesRecentlySuggestedDestinationsFromUserSearches: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/hotel/recently-suggested-destination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesSuggestedDestinationByIdAsynchronously: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrievesSuggestedDestinationByIdAsynchronously', 'id', id)
            const localVarPath = `/api/hotel/suggested-destinations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesSuggestedDestinationsBasedOnUserPreferencesAsynchronously: async (keyword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/hotel/suggested-destinations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SuggestedDestinationDto} suggestedDestinationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savesRecentlySuggestedDestinationsFromUserSearches: async (suggestedDestinationDto: SuggestedDestinationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'suggestedDestinationDto' is not null or undefined
            assertParamExists('savesRecentlySuggestedDestinationsFromUserSearches', 'suggestedDestinationDto', suggestedDestinationDto)
            const localVarPath = `/api/hotel/recently-suggested-destination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(suggestedDestinationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchHotelsRequest} searchHotelsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchHotels: async (searchHotelsRequest: SearchHotelsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchHotelsRequest' is not null or undefined
            assertParamExists('searchHotels', 'searchHotelsRequest', searchHotelsRequest)
            const localVarPath = `/api/hotel/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchHotelsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HotelApi - functional programming interface
 * @export
 */
export const HotelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HotelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GetHotelDetailRequest} getHotelDetailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrievesDetailedInformationAboutAHotelById(getHotelDetailRequest: GetHotelDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccommodationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrievesDetailedInformationAboutAHotelById(getHotelDetailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrievesRecentlySuggestedDestinationsFromUserSearches(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SuggestedDestinationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrievesRecentlySuggestedDestinationsFromUserSearches(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrievesSuggestedDestinationByIdAsynchronously(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestedDestinationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrievesSuggestedDestinationByIdAsynchronously(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrievesSuggestedDestinationsBasedOnUserPreferencesAsynchronously(keyword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SuggestedDestinationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrievesSuggestedDestinationsBasedOnUserPreferencesAsynchronously(keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SuggestedDestinationDto} suggestedDestinationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async savesRecentlySuggestedDestinationsFromUserSearches(suggestedDestinationDto: SuggestedDestinationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SuggestedDestinationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.savesRecentlySuggestedDestinationsFromUserSearches(suggestedDestinationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SearchHotelsRequest} searchHotelsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchHotels(searchHotelsRequest: SearchHotelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchHotelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchHotels(searchHotelsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HotelApi - factory interface
 * @export
 */
export const HotelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HotelApiFp(configuration)
    return {
        /**
         * 
         * @param {GetHotelDetailRequest} getHotelDetailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesDetailedInformationAboutAHotelById(getHotelDetailRequest: GetHotelDetailRequest, options?: any): AxiosPromise<AccommodationDto> {
            return localVarFp.retrievesDetailedInformationAboutAHotelById(getHotelDetailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesRecentlySuggestedDestinationsFromUserSearches(options?: any): AxiosPromise<Array<SuggestedDestinationDto>> {
            return localVarFp.retrievesRecentlySuggestedDestinationsFromUserSearches(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesSuggestedDestinationByIdAsynchronously(id: string, options?: any): AxiosPromise<SuggestedDestinationDto> {
            return localVarFp.retrievesSuggestedDestinationByIdAsynchronously(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesSuggestedDestinationsBasedOnUserPreferencesAsynchronously(keyword?: string, options?: any): AxiosPromise<Array<SuggestedDestinationDto>> {
            return localVarFp.retrievesSuggestedDestinationsBasedOnUserPreferencesAsynchronously(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SuggestedDestinationDto} suggestedDestinationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savesRecentlySuggestedDestinationsFromUserSearches(suggestedDestinationDto: SuggestedDestinationDto, options?: any): AxiosPromise<Array<SuggestedDestinationDto>> {
            return localVarFp.savesRecentlySuggestedDestinationsFromUserSearches(suggestedDestinationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchHotelsRequest} searchHotelsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchHotels(searchHotelsRequest: SearchHotelsRequest, options?: any): AxiosPromise<SearchHotelsResponse> {
            return localVarFp.searchHotels(searchHotelsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HotelApi - object-oriented interface
 * @export
 * @class HotelApi
 * @extends {BaseAPI}
 */
export class HotelApi extends BaseAPI {
    /**
     * 
     * @param {GetHotelDetailRequest} getHotelDetailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public retrievesDetailedInformationAboutAHotelById(getHotelDetailRequest: GetHotelDetailRequest, options?: AxiosRequestConfig) {
        return HotelApiFp(this.configuration).retrievesDetailedInformationAboutAHotelById(getHotelDetailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public retrievesRecentlySuggestedDestinationsFromUserSearches(options?: AxiosRequestConfig) {
        return HotelApiFp(this.configuration).retrievesRecentlySuggestedDestinationsFromUserSearches(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public retrievesSuggestedDestinationByIdAsynchronously(id: string, options?: AxiosRequestConfig) {
        return HotelApiFp(this.configuration).retrievesSuggestedDestinationByIdAsynchronously(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public retrievesSuggestedDestinationsBasedOnUserPreferencesAsynchronously(keyword?: string, options?: AxiosRequestConfig) {
        return HotelApiFp(this.configuration).retrievesSuggestedDestinationsBasedOnUserPreferencesAsynchronously(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SuggestedDestinationDto} suggestedDestinationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public savesRecentlySuggestedDestinationsFromUserSearches(suggestedDestinationDto: SuggestedDestinationDto, options?: AxiosRequestConfig) {
        return HotelApiFp(this.configuration).savesRecentlySuggestedDestinationsFromUserSearches(suggestedDestinationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchHotelsRequest} searchHotelsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public searchHotels(searchHotelsRequest: SearchHotelsRequest, options?: AxiosRequestConfig) {
        return HotelApiFp(this.configuration).searchHotels(searchHotelsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
