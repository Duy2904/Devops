/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA TMC WebAPI
 * The TripOTA TMC WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateEmployeeRequestCommand } from '../models';
// @ts-ignore
import { EmployeeDto } from '../models';
// @ts-ignore
import { EnrichUserClaimRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfEmployeeDto } from '../models';
// @ts-ignore
import { ProfileDto } from '../models';
// @ts-ignore
import { SearchEmployeePaginationRequest } from '../models';
// @ts-ignore
import { ToggleEmployeeStatusCommand } from '../models';
// @ts-ignore
import { UpdateEmployeeRequestCommand } from '../models';
// @ts-ignore
import { UpdateProfileCommand } from '../models';
// @ts-ignore
import { UserClaimsDto } from '../models';
/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create employee by manager.
         * @param {CreateEmployeeRequestCommand} createEmployeeRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeCreateEmployee: async (createEmployeeRequestCommand: CreateEmployeeRequestCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEmployeeRequestCommand' is not null or undefined
            assertParamExists('employeeCreateEmployee', 'createEmployeeRequestCommand', createEmployeeRequestCommand)
            const localVarPath = `/api/v1/employee/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEmployeeRequestCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete employee by id.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeDeleteEmployee: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('employeeDeleteEmployee', 'id', id)
            const localVarPath = `/api/v1/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update employee by manager.
         * @param {string} id 
         * @param {UpdateEmployeeRequestCommand} updateEmployeeRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeUpdateEmployee: async (id: string, updateEmployeeRequestCommand: UpdateEmployeeRequestCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('employeeUpdateEmployee', 'id', id)
            // verify required parameter 'updateEmployeeRequestCommand' is not null or undefined
            assertParamExists('employeeUpdateEmployee', 'updateEmployeeRequestCommand', updateEmployeeRequestCommand)
            const localVarPath = `/api/v1/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmployeeRequestCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update employee status.
         * @param {string} id 
         * @param {ToggleEmployeeStatusCommand} toggleEmployeeStatusCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeUpdateLocalAccountStatus: async (id: string, toggleEmployeeStatusCommand: ToggleEmployeeStatusCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('employeeUpdateLocalAccountStatus', 'id', id)
            // verify required parameter 'toggleEmployeeStatusCommand' is not null or undefined
            assertParamExists('employeeUpdateLocalAccountStatus', 'toggleEmployeeStatusCommand', toggleEmployeeStatusCommand)
            const localVarPath = `/api/v1/employee/{id}/toggle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toggleEmployeeStatusCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmployeesByGroup: async (keyword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/employee/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeDetail: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmployeeDetail', 'id', id)
            const localVarPath = `/api/v1/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchEmployeePaginationRequest} searchEmployeePaginationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTheEmployeePagedList: async (searchEmployeePaginationRequest: SearchEmployeePaginationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchEmployeePaginationRequest' is not null or undefined
            assertParamExists('getTheEmployeePagedList', 'searchEmployeePaginationRequest', searchEmployeePaginationRequest)
            const localVarPath = `/api/v1/employee/search-pagination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchEmployeePaginationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EnrichUserClaimRequest} enrichUserClaimRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClaimsForTokenEnrichment: async (enrichUserClaimRequest: EnrichUserClaimRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enrichUserClaimRequest' is not null or undefined
            assertParamExists('getUserClaimsForTokenEnrichment', 'enrichUserClaimRequest', enrichUserClaimRequest)
            const localVarPath = `/api/v1/employee/enrich-claims`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enrichUserClaimRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployeeProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/employee/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInvitationMail: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sendInvitationMail', 'id', id)
            const localVarPath = `/api/v1/employee/{id}/send-invite`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfileCommand} updateProfileCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeProfile: async (updateProfileCommand: UpdateProfileCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProfileCommand' is not null or undefined
            assertParamExists('updateEmployeeProfile', 'updateProfileCommand', updateProfileCommand)
            const localVarPath = `/api/v1/employee/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadProfilesAvatar: async (id: string, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadProfilesAvatar', 'id', id)
            const localVarPath = `/api/v1/employee/{id}/avatar`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('File', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create employee by manager.
         * @param {CreateEmployeeRequestCommand} createEmployeeRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeCreateEmployee(createEmployeeRequestCommand: CreateEmployeeRequestCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeCreateEmployee(createEmployeeRequestCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete employee by id.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeDeleteEmployee(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeDeleteEmployee(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update employee by manager.
         * @param {string} id 
         * @param {UpdateEmployeeRequestCommand} updateEmployeeRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeUpdateEmployee(id: string, updateEmployeeRequestCommand: UpdateEmployeeRequestCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeUpdateEmployee(id, updateEmployeeRequestCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update employee status.
         * @param {string} id 
         * @param {ToggleEmployeeStatusCommand} toggleEmployeeStatusCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeUpdateLocalAccountStatus(id: string, toggleEmployeeStatusCommand: ToggleEmployeeStatusCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeUpdateLocalAccountStatus(id, toggleEmployeeStatusCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEmployeesByGroup(keyword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEmployeesByGroup(keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeDetail(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeDetail(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SearchEmployeePaginationRequest} searchEmployeePaginationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTheEmployeePagedList(searchEmployeePaginationRequest: SearchEmployeePaginationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfEmployeeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTheEmployeePagedList(searchEmployeePaginationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EnrichUserClaimRequest} enrichUserClaimRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserClaimsForTokenEnrichment(enrichUserClaimRequest: EnrichUserClaimRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserClaimsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserClaimsForTokenEnrichment(enrichUserClaimRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveEmployeeProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveEmployeeProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendInvitationMail(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendInvitationMail(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateProfileCommand} updateProfileCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeProfile(updateProfileCommand: UpdateProfileCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeProfile(updateProfileCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadProfilesAvatar(id: string, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadProfilesAvatar(id, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeApiFp(configuration)
    return {
        /**
         * 
         * @summary Create employee by manager.
         * @param {CreateEmployeeRequestCommand} createEmployeeRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeCreateEmployee(createEmployeeRequestCommand: CreateEmployeeRequestCommand, options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.employeeCreateEmployee(createEmployeeRequestCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete employee by id.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeDeleteEmployee(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.employeeDeleteEmployee(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update employee by manager.
         * @param {string} id 
         * @param {UpdateEmployeeRequestCommand} updateEmployeeRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeUpdateEmployee(id: string, updateEmployeeRequestCommand: UpdateEmployeeRequestCommand, options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.employeeUpdateEmployee(id, updateEmployeeRequestCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update employee status.
         * @param {string} id 
         * @param {ToggleEmployeeStatusCommand} toggleEmployeeStatusCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeUpdateLocalAccountStatus(id: string, toggleEmployeeStatusCommand: ToggleEmployeeStatusCommand, options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.employeeUpdateLocalAccountStatus(id, toggleEmployeeStatusCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmployeesByGroup(keyword?: string, options?: any): AxiosPromise<Array<EmployeeDto>> {
            return localVarFp.getAllEmployeesByGroup(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeDetail(id: string, options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.getEmployeeDetail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchEmployeePaginationRequest} searchEmployeePaginationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTheEmployeePagedList(searchEmployeePaginationRequest: SearchEmployeePaginationRequest, options?: any): AxiosPromise<PaginationResponseOfEmployeeDto> {
            return localVarFp.getTheEmployeePagedList(searchEmployeePaginationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EnrichUserClaimRequest} enrichUserClaimRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClaimsForTokenEnrichment(enrichUserClaimRequest: EnrichUserClaimRequest, options?: any): AxiosPromise<UserClaimsDto> {
            return localVarFp.getUserClaimsForTokenEnrichment(enrichUserClaimRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEmployeeProfile(options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.retrieveEmployeeProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInvitationMail(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.sendInvitationMail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProfileCommand} updateProfileCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeProfile(updateProfileCommand: UpdateProfileCommand, options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.updateEmployeeProfile(updateProfileCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadProfilesAvatar(id: string, file?: File, options?: any): AxiosPromise<boolean> {
            return localVarFp.uploadProfilesAvatar(id, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
    /**
     * 
     * @summary Create employee by manager.
     * @param {CreateEmployeeRequestCommand} createEmployeeRequestCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeCreateEmployee(createEmployeeRequestCommand: CreateEmployeeRequestCommand, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeCreateEmployee(createEmployeeRequestCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete employee by id.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeDeleteEmployee(id: string, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeDeleteEmployee(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update employee by manager.
     * @param {string} id 
     * @param {UpdateEmployeeRequestCommand} updateEmployeeRequestCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeUpdateEmployee(id: string, updateEmployeeRequestCommand: UpdateEmployeeRequestCommand, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeUpdateEmployee(id, updateEmployeeRequestCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update employee status.
     * @param {string} id 
     * @param {ToggleEmployeeStatusCommand} toggleEmployeeStatusCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeUpdateLocalAccountStatus(id: string, toggleEmployeeStatusCommand: ToggleEmployeeStatusCommand, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeUpdateLocalAccountStatus(id, toggleEmployeeStatusCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public getAllEmployeesByGroup(keyword?: string, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getAllEmployeesByGroup(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public getEmployeeDetail(id: string, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getEmployeeDetail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchEmployeePaginationRequest} searchEmployeePaginationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public getTheEmployeePagedList(searchEmployeePaginationRequest: SearchEmployeePaginationRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getTheEmployeePagedList(searchEmployeePaginationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EnrichUserClaimRequest} enrichUserClaimRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public getUserClaimsForTokenEnrichment(enrichUserClaimRequest: EnrichUserClaimRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getUserClaimsForTokenEnrichment(enrichUserClaimRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public retrieveEmployeeProfile(options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).retrieveEmployeeProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public sendInvitationMail(id: string, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).sendInvitationMail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProfileCommand} updateProfileCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public updateEmployeeProfile(updateProfileCommand: UpdateProfileCommand, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).updateEmployeeProfile(updateProfileCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public uploadProfilesAvatar(id: string, file?: File, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).uploadProfilesAvatar(id, file, options).then((request) => request(this.axios, this.basePath));
    }
}
