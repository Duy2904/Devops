/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA TMC WebAPI
 * The TripOTA TMC WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AirportDto } from '../models';
// @ts-ignore
import { CountryDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { GetAirportsByCodesRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
/**
 * AirportApi - axios parameter creator
 * @export
 */
export const AirportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get airports by country code
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        airportGetAirportsByCountryCode: async (countryCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('airportGetAirportsByCountryCode', 'countryCode', countryCode)
            const localVarPath = `/api/airport/country/{countryCode}`
                .replace(`{${"countryCode"}}`, encodeURIComponent(String(countryCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get airports by region name
         * @param {string} regionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        airportGetAirportsByRegionId: async (regionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regionName' is not null or undefined
            assertParamExists('airportGetAirportsByRegionId', 'regionName', regionName)
            const localVarPath = `/api/airport/region/{regionName}`
                .replace(`{${"regionName"}}`, encodeURIComponent(String(regionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of countries.
         * @summary Get countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        airportGetCountries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/airport/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lookup airports by codes
         * @param {GetAirportsByCodesRequest} getAirportsByCodesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        airportLookup: async (getAirportsByCodesRequest: GetAirportsByCodesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getAirportsByCodesRequest' is not null or undefined
            assertParamExists('airportLookup', 'getAirportsByCodesRequest', getAirportsByCodesRequest)
            const localVarPath = `/api/airport/lookup-by-codes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAirportsByCodesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search airport with name, code, city code, city name
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        airportSearch: async (keyword: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('airportSearch', 'keyword', keyword)
            const localVarPath = `/api/airport/{keyword}`
                .replace(`{${"keyword"}}`, encodeURIComponent(String(keyword)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentSearchAirlineCodeWithVisibleIsTrue2: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/airport/recent-destination-search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveHistorySearchAirline2: async (value?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/airport/recent-destination-search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AirportApi - functional programming interface
 * @export
 */
export const AirportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AirportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get airports by country code
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async airportGetAirportsByCountryCode(countryCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AirportDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.airportGetAirportsByCountryCode(countryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get airports by region name
         * @param {string} regionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async airportGetAirportsByRegionId(regionName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AirportDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.airportGetAirportsByRegionId(regionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of countries.
         * @summary Get countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async airportGetCountries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CountryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.airportGetCountries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lookup airports by codes
         * @param {GetAirportsByCodesRequest} getAirportsByCodesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async airportLookup(getAirportsByCodesRequest: GetAirportsByCodesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AirportDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.airportLookup(getAirportsByCodesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search airport with name, code, city code, city name
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async airportSearch(keyword: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AirportDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.airportSearch(keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recentSearchAirlineCodeWithVisibleIsTrue2(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AirportDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recentSearchAirlineCodeWithVisibleIsTrue2(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveHistorySearchAirline2(value?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AirportDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveHistorySearchAirline2(value, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AirportApi - factory interface
 * @export
 */
export const AirportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AirportApiFp(configuration)
    return {
        /**
         * 
         * @summary Get airports by country code
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        airportGetAirportsByCountryCode(countryCode: string, options?: any): AxiosPromise<Array<AirportDto>> {
            return localVarFp.airportGetAirportsByCountryCode(countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get airports by region name
         * @param {string} regionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        airportGetAirportsByRegionId(regionName: string, options?: any): AxiosPromise<Array<AirportDto>> {
            return localVarFp.airportGetAirportsByRegionId(regionName, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of countries.
         * @summary Get countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        airportGetCountries(options?: any): AxiosPromise<Array<CountryDto>> {
            return localVarFp.airportGetCountries(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lookup airports by codes
         * @param {GetAirportsByCodesRequest} getAirportsByCodesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        airportLookup(getAirportsByCodesRequest: GetAirportsByCodesRequest, options?: any): AxiosPromise<Array<AirportDto>> {
            return localVarFp.airportLookup(getAirportsByCodesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search airport with name, code, city code, city name
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        airportSearch(keyword: string, options?: any): AxiosPromise<Array<AirportDto>> {
            return localVarFp.airportSearch(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentSearchAirlineCodeWithVisibleIsTrue2(options?: any): AxiosPromise<Array<AirportDto>> {
            return localVarFp.recentSearchAirlineCodeWithVisibleIsTrue2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveHistorySearchAirline2(value?: string, options?: any): AxiosPromise<Array<AirportDto>> {
            return localVarFp.saveHistorySearchAirline2(value, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AirportApi - object-oriented interface
 * @export
 * @class AirportApi
 * @extends {BaseAPI}
 */
export class AirportApi extends BaseAPI {
    /**
     * 
     * @summary Get airports by country code
     * @param {string} countryCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportApi
     */
    public airportGetAirportsByCountryCode(countryCode: string, options?: AxiosRequestConfig) {
        return AirportApiFp(this.configuration).airportGetAirportsByCountryCode(countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get airports by region name
     * @param {string} regionName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportApi
     */
    public airportGetAirportsByRegionId(regionName: string, options?: AxiosRequestConfig) {
        return AirportApiFp(this.configuration).airportGetAirportsByRegionId(regionName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of countries.
     * @summary Get countries.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportApi
     */
    public airportGetCountries(options?: AxiosRequestConfig) {
        return AirportApiFp(this.configuration).airportGetCountries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lookup airports by codes
     * @param {GetAirportsByCodesRequest} getAirportsByCodesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportApi
     */
    public airportLookup(getAirportsByCodesRequest: GetAirportsByCodesRequest, options?: AxiosRequestConfig) {
        return AirportApiFp(this.configuration).airportLookup(getAirportsByCodesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search airport with name, code, city code, city name
     * @param {string} keyword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportApi
     */
    public airportSearch(keyword: string, options?: AxiosRequestConfig) {
        return AirportApiFp(this.configuration).airportSearch(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportApi
     */
    public recentSearchAirlineCodeWithVisibleIsTrue2(options?: AxiosRequestConfig) {
        return AirportApiFp(this.configuration).recentSearchAirlineCodeWithVisibleIsTrue2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportApi
     */
    public saveHistorySearchAirline2(value?: string, options?: AxiosRequestConfig) {
        return AirportApiFp(this.configuration).saveHistorySearchAirline2(value, options).then((request) => request(this.axios, this.basePath));
    }
}
