/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA TMC WebAPI
 * The TripOTA TMC WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { GetUserNotificationsRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfNotificationMessageDto } from '../models';
// @ts-ignore
import { SetNotificationsAsReadRequest } from '../models';
/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get trip notifications for user.
         * @param {GetUserNotificationsRequest} getUserNotificationsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationGetNotifications: async (getUserNotificationsRequest: GetUserNotificationsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getUserNotificationsRequest' is not null or undefined
            assertParamExists('notificationGetNotifications', 'getUserNotificationsRequest', getUserNotificationsRequest)
            const localVarPath = `/api/v1/notification/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getUserNotificationsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set trip notifications as read.
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationSetAllNotificationsAsRead: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('notificationSetAllNotificationsAsRead', 'body', body)
            const localVarPath = `/api/v1/notification/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set trip notifications as read.
         * @param {SetNotificationsAsReadRequest} setNotificationsAsReadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationSetNotificationsAsRead: async (setNotificationsAsReadRequest: SetNotificationsAsReadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setNotificationsAsReadRequest' is not null or undefined
            assertParamExists('notificationSetNotificationsAsRead', 'setNotificationsAsReadRequest', setNotificationsAsReadRequest)
            const localVarPath = `/api/v1/notification/notifications/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setNotificationsAsReadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get trip notifications for user.
         * @param {GetUserNotificationsRequest} getUserNotificationsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationGetNotifications(getUserNotificationsRequest: GetUserNotificationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfNotificationMessageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationGetNotifications(getUserNotificationsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set trip notifications as read.
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationSetAllNotificationsAsRead(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationSetAllNotificationsAsRead(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set trip notifications as read.
         * @param {SetNotificationsAsReadRequest} setNotificationsAsReadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationSetNotificationsAsRead(setNotificationsAsReadRequest: SetNotificationsAsReadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationSetNotificationsAsRead(setNotificationsAsReadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 
         * @summary Get trip notifications for user.
         * @param {GetUserNotificationsRequest} getUserNotificationsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationGetNotifications(getUserNotificationsRequest: GetUserNotificationsRequest, options?: any): AxiosPromise<PaginationResponseOfNotificationMessageDto> {
            return localVarFp.notificationGetNotifications(getUserNotificationsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set trip notifications as read.
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationSetAllNotificationsAsRead(body: object, options?: any): AxiosPromise<File> {
            return localVarFp.notificationSetAllNotificationsAsRead(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set trip notifications as read.
         * @param {SetNotificationsAsReadRequest} setNotificationsAsReadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationSetNotificationsAsRead(setNotificationsAsReadRequest: SetNotificationsAsReadRequest, options?: any): AxiosPromise<File> {
            return localVarFp.notificationSetNotificationsAsRead(setNotificationsAsReadRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * 
     * @summary Get trip notifications for user.
     * @param {GetUserNotificationsRequest} getUserNotificationsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notificationGetNotifications(getUserNotificationsRequest: GetUserNotificationsRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationGetNotifications(getUserNotificationsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set trip notifications as read.
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notificationSetAllNotificationsAsRead(body: object, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationSetAllNotificationsAsRead(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set trip notifications as read.
     * @param {SetNotificationsAsReadRequest} setNotificationsAsReadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notificationSetNotificationsAsRead(setNotificationsAsReadRequest: SetNotificationsAsReadRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationSetNotificationsAsRead(setNotificationsAsReadRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
