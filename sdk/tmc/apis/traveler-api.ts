/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA TMC WebAPI
 * The TripOTA TMC WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddTripFlightByTravelerCommand } from '../models';
// @ts-ignore
import { AddTripHotelByTravelerCommand } from '../models';
// @ts-ignore
import { CancelTripHotelByTravelerCommand } from '../models';
// @ts-ignore
import { CancelTripRequestCommand } from '../models';
// @ts-ignore
import { DeleteTripServiceCommand } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { Filter } from '../models';
// @ts-ignore
import { GetTripDestinationStatisticRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { InitTripInfoByTravelerCommand } from '../models';
// @ts-ignore
import { PaginationResponseOfTripSummaryInfoDto } from '../models';
// @ts-ignore
import { SendTripApprovalCommand } from '../models';
// @ts-ignore
import { TravelPolicyDetailDto } from '../models';
// @ts-ignore
import { TravelerBudgetPolicyDto } from '../models';
// @ts-ignore
import { TripDestinationStatsDto } from '../models';
// @ts-ignore
import { TripInfoDto } from '../models';
// @ts-ignore
import { TripInfoStatsDto } from '../models';
// @ts-ignore
import { UpdateTripInfoByTravelerCommand } from '../models';
// @ts-ignore
import { VerifyResult } from '../models';
// @ts-ignore
import { VerifyTripFlightWithPolicyRequest } from '../models';
// @ts-ignore
import { VerifyTripHotelWithPolicyRequest } from '../models';
/**
 * TravelerApi - axios parameter creator
 * @export
 */
export const TravelerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} tripId 
         * @param {DeleteTripServiceCommand} deleteTripServiceCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceInTrip: async (tripId: string, deleteTripServiceCommand: DeleteTripServiceCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripId' is not null or undefined
            assertParamExists('deleteServiceInTrip', 'tripId', tripId)
            // verify required parameter 'deleteTripServiceCommand' is not null or undefined
            assertParamExists('deleteServiceInTrip', 'deleteTripServiceCommand', deleteTripServiceCommand)
            const localVarPath = `/api/v1/traveler/{tripId}/service`
                .replace(`{${"tripId"}}`, encodeURIComponent(String(tripId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTripServiceCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetTripDestinationStatisticRequest} getTripDestinationStatisticRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripStatisticByDestinations: async (getTripDestinationStatisticRequest: GetTripDestinationStatisticRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getTripDestinationStatisticRequest' is not null or undefined
            assertParamExists('getTripStatisticByDestinations', 'getTripDestinationStatisticRequest', getTripDestinationStatisticRequest)
            const localVarPath = `/api/v1/traveler/get-destinations-stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getTripDestinationStatisticRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add trip flight by traveler.
         * @param {string} id 
         * @param {AddTripFlightByTravelerCommand} addTripFlightByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerAddTripFlight: async (id: string, addTripFlightByTravelerCommand: AddTripFlightByTravelerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travelerAddTripFlight', 'id', id)
            // verify required parameter 'addTripFlightByTravelerCommand' is not null or undefined
            assertParamExists('travelerAddTripFlight', 'addTripFlightByTravelerCommand', addTripFlightByTravelerCommand)
            const localVarPath = `/api/v1/traveler/trip-request/{id}/add-flight`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTripFlightByTravelerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add trip hotel by traveler.
         * @param {string} id 
         * @param {AddTripHotelByTravelerCommand} addTripHotelByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerAddTripHotel: async (id: string, addTripHotelByTravelerCommand: AddTripHotelByTravelerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travelerAddTripHotel', 'id', id)
            // verify required parameter 'addTripHotelByTravelerCommand' is not null or undefined
            assertParamExists('travelerAddTripHotel', 'addTripHotelByTravelerCommand', addTripHotelByTravelerCommand)
            const localVarPath = `/api/v1/traveler/trip-request/{id}/add-hotel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTripHotelByTravelerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel trip hotel by traveler.
         * @param {string} id 
         * @param {CancelTripHotelByTravelerCommand} cancelTripHotelByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerCancelTripHotel: async (id: string, cancelTripHotelByTravelerCommand: CancelTripHotelByTravelerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travelerCancelTripHotel', 'id', id)
            // verify required parameter 'cancelTripHotelByTravelerCommand' is not null or undefined
            assertParamExists('travelerCancelTripHotel', 'cancelTripHotelByTravelerCommand', cancelTripHotelByTravelerCommand)
            const localVarPath = `/api/v1/traveler/trip-request/{id}/cancel-hotel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelTripHotelByTravelerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Traveler cancel a trip request.
         * @param {string} id 
         * @param {CancelTripRequestCommand} cancelTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerCancelTripRequest: async (id: string, cancelTripRequestCommand: CancelTripRequestCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travelerCancelTripRequest', 'id', id)
            // verify required parameter 'cancelTripRequestCommand' is not null or undefined
            assertParamExists('travelerCancelTripRequest', 'cancelTripRequestCommand', cancelTripRequestCommand)
            const localVarPath = `/api/v1/traveler/trip-request/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelTripRequestCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issue flight ticket then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerConfirmFlightPayment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travelerConfirmFlightPayment', 'id', id)
            const localVarPath = `/api/v1/traveler/trip-request/{id}/issue-ticket`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issue reservation number then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerConfirmHotelPayment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travelerConfirmHotelPayment', 'id', id)
            const localVarPath = `/api/v1/traveler/trip-request/{id}/issue-reservation-number`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete multiple trip requests.
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerDeleteMultipleTrips: async (requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('travelerDeleteMultipleTrips', 'requestBody', requestBody)
            const localVarPath = `/api/v1/traveler/trip-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a trip request.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerDeleteTripRequest: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travelerDeleteTripRequest', 'id', id)
            const localVarPath = `/api/v1/traveler/trip-request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the budget policy for travelers.
         * @summary Get budget policy for travelers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerGetBudgetPolicy: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/traveler/budget-policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my travel policy for trip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerGetMyTravelPolicy: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/traveler/my-travel-policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a trip info by traveler with id.
         * @param {string} tripRequestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerGetTripRequest: async (tripRequestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripRequestId' is not null or undefined
            assertParamExists('travelerGetTripRequest', 'tripRequestId', tripRequestId)
            const localVarPath = `/api/v1/traveler/trip-request/{tripRequestId}`
                .replace(`{${"tripRequestId"}}`, encodeURIComponent(String(tripRequestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a trip info by traveler with code.
         * @param {string} tripCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerGetTripRequest2: async (tripCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripCode' is not null or undefined
            assertParamExists('travelerGetTripRequest2', 'tripCode', tripCode)
            const localVarPath = `/api/v1/traveler/trip-request/{tripCode}`
                .replace(`{${"tripCode"}}`, encodeURIComponent(String(tripCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get trip statistics for traveler.
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerGetTripStats: async (startDate?: Date, endDate?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/traveler/get-trip-stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Init trip request by traveler.
         * @param {InitTripInfoByTravelerCommand} initTripInfoByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerInitTrip: async (initTripInfoByTravelerCommand: InitTripInfoByTravelerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'initTripInfoByTravelerCommand' is not null or undefined
            assertParamExists('travelerInitTrip', 'initTripInfoByTravelerCommand', initTripInfoByTravelerCommand)
            const localVarPath = `/api/v1/traveler/trip-request/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(initTripInfoByTravelerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list trip request by traveler with traveler.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [customFiltersKeyword] 
         * @param {Array<number>} [customFiltersStatus] 
         * @param {boolean} [customFiltersIsOverBudget] 
         * @param {boolean} [customFiltersIsAnyHotel] 
         * @param {boolean} [customFiltersIsAnyFlight] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {number} [customFiltersMinCost] 
         * @param {number} [customFiltersMaxCost] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerListTripRequest: async (pageNumber?: number, pageSize?: number, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersIsOverBudget?: boolean, customFiltersIsAnyHotel?: boolean, customFiltersIsAnyFlight?: boolean, customFiltersStartDate?: Date, customFiltersEndDate?: Date, customFiltersMinCost?: number, customFiltersMaxCost?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/traveler/trip-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (customFiltersKeyword !== undefined) {
                localVarQueryParameter['CustomFilters.Keyword'] = customFiltersKeyword;
            }

            if (customFiltersStatus) {
                localVarQueryParameter['CustomFilters.Status'] = customFiltersStatus;
            }

            if (customFiltersIsOverBudget !== undefined) {
                localVarQueryParameter['CustomFilters.IsOverBudget'] = customFiltersIsOverBudget;
            }

            if (customFiltersIsAnyHotel !== undefined) {
                localVarQueryParameter['CustomFilters.IsAnyHotel'] = customFiltersIsAnyHotel;
            }

            if (customFiltersIsAnyFlight !== undefined) {
                localVarQueryParameter['CustomFilters.IsAnyFlight'] = customFiltersIsAnyFlight;
            }

            if (customFiltersStartDate !== undefined) {
                localVarQueryParameter['CustomFilters.StartDate'] = (customFiltersStartDate as any instanceof Date) ?
                    (customFiltersStartDate as any).toISOString() :
                    customFiltersStartDate;
            }

            if (customFiltersEndDate !== undefined) {
                localVarQueryParameter['CustomFilters.EndDate'] = (customFiltersEndDate as any instanceof Date) ?
                    (customFiltersEndDate as any).toISOString() :
                    customFiltersEndDate;
            }

            if (customFiltersMinCost !== undefined) {
                localVarQueryParameter['CustomFilters.MinCost'] = customFiltersMinCost;
            }

            if (customFiltersMaxCost !== undefined) {
                localVarQueryParameter['CustomFilters.MaxCost'] = customFiltersMaxCost;
            }

            if (orderBy) {
                localVarQueryParameter['OrderBy'] = orderBy;
            }

            if (advancedSearchFields) {
                localVarQueryParameter['AdvancedSearch.Fields'] = advancedSearchFields;
            }

            if (advancedSearchKeyword !== undefined) {
                localVarQueryParameter['AdvancedSearch.Keyword'] = advancedSearchKeyword;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (advancedFilterLogic !== undefined) {
                localVarQueryParameter['AdvancedFilter.Logic'] = advancedFilterLogic;
            }

            if (advancedFilterFilters) {
                localVarQueryParameter['AdvancedFilter.Filters'] = advancedFilterFilters;
            }

            if (advancedFilterField !== undefined) {
                localVarQueryParameter['AdvancedFilter.Field'] = advancedFilterField;
            }

            if (advancedFilterOperator !== undefined) {
                localVarQueryParameter['AdvancedFilter.Operator'] = advancedFilterOperator;
            }

            if (advancedFilterValue !== undefined) {
                localVarQueryParameter['AdvancedFilter.Value'] = advancedFilterValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send approval trip request to manager.
         * @param {SendTripApprovalCommand} sendTripApprovalCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerSendApproval: async (sendTripApprovalCommand: SendTripApprovalCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendTripApprovalCommand' is not null or undefined
            assertParamExists('travelerSendApproval', 'sendTripApprovalCommand', sendTripApprovalCommand)
            const localVarPath = `/api/v1/traveler/trip-request/send-approval`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendTripApprovalCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send trip details to traveler via email
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerSendTripDetailViaEmail: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travelerSendTripDetailViaEmail', 'id', id)
            const localVarPath = `/api/v1/traveler/send-trip-email/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a trip request by traveler.
         * @param {string} id 
         * @param {UpdateTripInfoByTravelerCommand} updateTripInfoByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerUpdate: async (id: string, updateTripInfoByTravelerCommand: UpdateTripInfoByTravelerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travelerUpdate', 'id', id)
            // verify required parameter 'updateTripInfoByTravelerCommand' is not null or undefined
            assertParamExists('travelerUpdate', 'updateTripInfoByTravelerCommand', updateTripInfoByTravelerCommand)
            const localVarPath = `/api/v1/traveler/trip-request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTripInfoByTravelerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify selected flight fare info before adding to trip
         * @param {VerifyTripFlightWithPolicyRequest} verifyTripFlightWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerVerifyFlightBookingWithPolicy: async (verifyTripFlightWithPolicyRequest: VerifyTripFlightWithPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyTripFlightWithPolicyRequest' is not null or undefined
            assertParamExists('travelerVerifyFlightBookingWithPolicy', 'verifyTripFlightWithPolicyRequest', verifyTripFlightWithPolicyRequest)
            const localVarPath = `/api/v1/traveler/trip-request/verify-flight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyTripFlightWithPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify selected hotel room info before adding to trip
         * @param {VerifyTripHotelWithPolicyRequest} verifyTripHotelWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerVerifyHotelBookingWithPolicy: async (verifyTripHotelWithPolicyRequest: VerifyTripHotelWithPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyTripHotelWithPolicyRequest' is not null or undefined
            assertParamExists('travelerVerifyHotelBookingWithPolicy', 'verifyTripHotelWithPolicyRequest', verifyTripHotelWithPolicyRequest)
            const localVarPath = `/api/v1/traveler/trip-request/verify-hotel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyTripHotelWithPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TravelerApi - functional programming interface
 * @export
 */
export const TravelerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TravelerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} tripId 
         * @param {DeleteTripServiceCommand} deleteTripServiceCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteServiceInTrip(tripId: string, deleteTripServiceCommand: DeleteTripServiceCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteServiceInTrip(tripId, deleteTripServiceCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetTripDestinationStatisticRequest} getTripDestinationStatisticRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTripStatisticByDestinations(getTripDestinationStatisticRequest: GetTripDestinationStatisticRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TripDestinationStatsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTripStatisticByDestinations(getTripDestinationStatisticRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add trip flight by traveler.
         * @param {string} id 
         * @param {AddTripFlightByTravelerCommand} addTripFlightByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerAddTripFlight(id: string, addTripFlightByTravelerCommand: AddTripFlightByTravelerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerAddTripFlight(id, addTripFlightByTravelerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add trip hotel by traveler.
         * @param {string} id 
         * @param {AddTripHotelByTravelerCommand} addTripHotelByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerAddTripHotel(id: string, addTripHotelByTravelerCommand: AddTripHotelByTravelerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerAddTripHotel(id, addTripHotelByTravelerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel trip hotel by traveler.
         * @param {string} id 
         * @param {CancelTripHotelByTravelerCommand} cancelTripHotelByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerCancelTripHotel(id: string, cancelTripHotelByTravelerCommand: CancelTripHotelByTravelerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerCancelTripHotel(id, cancelTripHotelByTravelerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Traveler cancel a trip request.
         * @param {string} id 
         * @param {CancelTripRequestCommand} cancelTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerCancelTripRequest(id: string, cancelTripRequestCommand: CancelTripRequestCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerCancelTripRequest(id, cancelTripRequestCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issue flight ticket then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerConfirmFlightPayment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerConfirmFlightPayment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issue reservation number then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerConfirmHotelPayment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerConfirmHotelPayment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete multiple trip requests.
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerDeleteMultipleTrips(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerDeleteMultipleTrips(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a trip request.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerDeleteTripRequest(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerDeleteTripRequest(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the budget policy for travelers.
         * @summary Get budget policy for travelers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerGetBudgetPolicy(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelerBudgetPolicyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerGetBudgetPolicy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get my travel policy for trip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerGetMyTravelPolicy(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelPolicyDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerGetMyTravelPolicy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a trip info by traveler with id.
         * @param {string} tripRequestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerGetTripRequest(tripRequestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerGetTripRequest(tripRequestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a trip info by traveler with code.
         * @param {string} tripCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerGetTripRequest2(tripCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerGetTripRequest2(tripCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get trip statistics for traveler.
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerGetTripStats(startDate?: Date, endDate?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TripInfoStatsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerGetTripStats(startDate, endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Init trip request by traveler.
         * @param {InitTripInfoByTravelerCommand} initTripInfoByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerInitTrip(initTripInfoByTravelerCommand: InitTripInfoByTravelerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerInitTrip(initTripInfoByTravelerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list trip request by traveler with traveler.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [customFiltersKeyword] 
         * @param {Array<number>} [customFiltersStatus] 
         * @param {boolean} [customFiltersIsOverBudget] 
         * @param {boolean} [customFiltersIsAnyHotel] 
         * @param {boolean} [customFiltersIsAnyFlight] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {number} [customFiltersMinCost] 
         * @param {number} [customFiltersMaxCost] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerListTripRequest(pageNumber?: number, pageSize?: number, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersIsOverBudget?: boolean, customFiltersIsAnyHotel?: boolean, customFiltersIsAnyFlight?: boolean, customFiltersStartDate?: Date, customFiltersEndDate?: Date, customFiltersMinCost?: number, customFiltersMaxCost?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTripSummaryInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerListTripRequest(pageNumber, pageSize, customFiltersKeyword, customFiltersStatus, customFiltersIsOverBudget, customFiltersIsAnyHotel, customFiltersIsAnyFlight, customFiltersStartDate, customFiltersEndDate, customFiltersMinCost, customFiltersMaxCost, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send approval trip request to manager.
         * @param {SendTripApprovalCommand} sendTripApprovalCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerSendApproval(sendTripApprovalCommand: SendTripApprovalCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerSendApproval(sendTripApprovalCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send trip details to traveler via email
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerSendTripDetailViaEmail(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerSendTripDetailViaEmail(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a trip request by traveler.
         * @param {string} id 
         * @param {UpdateTripInfoByTravelerCommand} updateTripInfoByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerUpdate(id: string, updateTripInfoByTravelerCommand: UpdateTripInfoByTravelerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerUpdate(id, updateTripInfoByTravelerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verify selected flight fare info before adding to trip
         * @param {VerifyTripFlightWithPolicyRequest} verifyTripFlightWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest: VerifyTripFlightWithPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verify selected hotel room info before adding to trip
         * @param {VerifyTripHotelWithPolicyRequest} verifyTripHotelWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest: VerifyTripHotelWithPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TravelerApi - factory interface
 * @export
 */
export const TravelerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TravelerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} tripId 
         * @param {DeleteTripServiceCommand} deleteTripServiceCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceInTrip(tripId: string, deleteTripServiceCommand: DeleteTripServiceCommand, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteServiceInTrip(tripId, deleteTripServiceCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetTripDestinationStatisticRequest} getTripDestinationStatisticRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripStatisticByDestinations(getTripDestinationStatisticRequest: GetTripDestinationStatisticRequest, options?: any): AxiosPromise<Array<TripDestinationStatsDto>> {
            return localVarFp.getTripStatisticByDestinations(getTripDestinationStatisticRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add trip flight by traveler.
         * @param {string} id 
         * @param {AddTripFlightByTravelerCommand} addTripFlightByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerAddTripFlight(id: string, addTripFlightByTravelerCommand: AddTripFlightByTravelerCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travelerAddTripFlight(id, addTripFlightByTravelerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add trip hotel by traveler.
         * @param {string} id 
         * @param {AddTripHotelByTravelerCommand} addTripHotelByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerAddTripHotel(id: string, addTripHotelByTravelerCommand: AddTripHotelByTravelerCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travelerAddTripHotel(id, addTripHotelByTravelerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel trip hotel by traveler.
         * @param {string} id 
         * @param {CancelTripHotelByTravelerCommand} cancelTripHotelByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerCancelTripHotel(id: string, cancelTripHotelByTravelerCommand: CancelTripHotelByTravelerCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travelerCancelTripHotel(id, cancelTripHotelByTravelerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Traveler cancel a trip request.
         * @param {string} id 
         * @param {CancelTripRequestCommand} cancelTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerCancelTripRequest(id: string, cancelTripRequestCommand: CancelTripRequestCommand, options?: any): AxiosPromise<File> {
            return localVarFp.travelerCancelTripRequest(id, cancelTripRequestCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issue flight ticket then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerConfirmFlightPayment(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.travelerConfirmFlightPayment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issue reservation number then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerConfirmHotelPayment(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.travelerConfirmHotelPayment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete multiple trip requests.
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerDeleteMultipleTrips(requestBody: Array<string>, options?: any): AxiosPromise<boolean> {
            return localVarFp.travelerDeleteMultipleTrips(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a trip request.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerDeleteTripRequest(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.travelerDeleteTripRequest(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the budget policy for travelers.
         * @summary Get budget policy for travelers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerGetBudgetPolicy(options?: any): AxiosPromise<TravelerBudgetPolicyDto> {
            return localVarFp.travelerGetBudgetPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my travel policy for trip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerGetMyTravelPolicy(options?: any): AxiosPromise<TravelPolicyDetailDto> {
            return localVarFp.travelerGetMyTravelPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a trip info by traveler with id.
         * @param {string} tripRequestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerGetTripRequest(tripRequestId: string, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travelerGetTripRequest(tripRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a trip info by traveler with code.
         * @param {string} tripCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerGetTripRequest2(tripCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.travelerGetTripRequest2(tripCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get trip statistics for traveler.
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerGetTripStats(startDate?: Date, endDate?: Date, options?: any): AxiosPromise<Array<TripInfoStatsDto>> {
            return localVarFp.travelerGetTripStats(startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Init trip request by traveler.
         * @param {InitTripInfoByTravelerCommand} initTripInfoByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerInitTrip(initTripInfoByTravelerCommand: InitTripInfoByTravelerCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travelerInitTrip(initTripInfoByTravelerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list trip request by traveler with traveler.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [customFiltersKeyword] 
         * @param {Array<number>} [customFiltersStatus] 
         * @param {boolean} [customFiltersIsOverBudget] 
         * @param {boolean} [customFiltersIsAnyHotel] 
         * @param {boolean} [customFiltersIsAnyFlight] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {number} [customFiltersMinCost] 
         * @param {number} [customFiltersMaxCost] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerListTripRequest(pageNumber?: number, pageSize?: number, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersIsOverBudget?: boolean, customFiltersIsAnyHotel?: boolean, customFiltersIsAnyFlight?: boolean, customFiltersStartDate?: Date, customFiltersEndDate?: Date, customFiltersMinCost?: number, customFiltersMaxCost?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: any): AxiosPromise<PaginationResponseOfTripSummaryInfoDto> {
            return localVarFp.travelerListTripRequest(pageNumber, pageSize, customFiltersKeyword, customFiltersStatus, customFiltersIsOverBudget, customFiltersIsAnyHotel, customFiltersIsAnyFlight, customFiltersStartDate, customFiltersEndDate, customFiltersMinCost, customFiltersMaxCost, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send approval trip request to manager.
         * @param {SendTripApprovalCommand} sendTripApprovalCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerSendApproval(sendTripApprovalCommand: SendTripApprovalCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travelerSendApproval(sendTripApprovalCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send trip details to traveler via email
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerSendTripDetailViaEmail(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.travelerSendTripDetailViaEmail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a trip request by traveler.
         * @param {string} id 
         * @param {UpdateTripInfoByTravelerCommand} updateTripInfoByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerUpdate(id: string, updateTripInfoByTravelerCommand: UpdateTripInfoByTravelerCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travelerUpdate(id, updateTripInfoByTravelerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify selected flight fare info before adding to trip
         * @param {VerifyTripFlightWithPolicyRequest} verifyTripFlightWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest: VerifyTripFlightWithPolicyRequest, options?: any): AxiosPromise<VerifyResult> {
            return localVarFp.travelerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify selected hotel room info before adding to trip
         * @param {VerifyTripHotelWithPolicyRequest} verifyTripHotelWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest: VerifyTripHotelWithPolicyRequest, options?: any): AxiosPromise<VerifyResult> {
            return localVarFp.travelerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TravelerApi - object-oriented interface
 * @export
 * @class TravelerApi
 * @extends {BaseAPI}
 */
export class TravelerApi extends BaseAPI {
    /**
     * 
     * @param {string} tripId 
     * @param {DeleteTripServiceCommand} deleteTripServiceCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public deleteServiceInTrip(tripId: string, deleteTripServiceCommand: DeleteTripServiceCommand, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).deleteServiceInTrip(tripId, deleteTripServiceCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetTripDestinationStatisticRequest} getTripDestinationStatisticRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public getTripStatisticByDestinations(getTripDestinationStatisticRequest: GetTripDestinationStatisticRequest, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).getTripStatisticByDestinations(getTripDestinationStatisticRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add trip flight by traveler.
     * @param {string} id 
     * @param {AddTripFlightByTravelerCommand} addTripFlightByTravelerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerAddTripFlight(id: string, addTripFlightByTravelerCommand: AddTripFlightByTravelerCommand, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerAddTripFlight(id, addTripFlightByTravelerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add trip hotel by traveler.
     * @param {string} id 
     * @param {AddTripHotelByTravelerCommand} addTripHotelByTravelerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerAddTripHotel(id: string, addTripHotelByTravelerCommand: AddTripHotelByTravelerCommand, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerAddTripHotel(id, addTripHotelByTravelerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel trip hotel by traveler.
     * @param {string} id 
     * @param {CancelTripHotelByTravelerCommand} cancelTripHotelByTravelerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerCancelTripHotel(id: string, cancelTripHotelByTravelerCommand: CancelTripHotelByTravelerCommand, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerCancelTripHotel(id, cancelTripHotelByTravelerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Traveler cancel a trip request.
     * @param {string} id 
     * @param {CancelTripRequestCommand} cancelTripRequestCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerCancelTripRequest(id: string, cancelTripRequestCommand: CancelTripRequestCommand, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerCancelTripRequest(id, cancelTripRequestCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issue flight ticket then update trip status to schedule
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerConfirmFlightPayment(id: string, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerConfirmFlightPayment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issue reservation number then update trip status to schedule
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerConfirmHotelPayment(id: string, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerConfirmHotelPayment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete multiple trip requests.
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerDeleteMultipleTrips(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerDeleteMultipleTrips(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a trip request.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerDeleteTripRequest(id: string, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerDeleteTripRequest(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the budget policy for travelers.
     * @summary Get budget policy for travelers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerGetBudgetPolicy(options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerGetBudgetPolicy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my travel policy for trip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerGetMyTravelPolicy(options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerGetMyTravelPolicy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a trip info by traveler with id.
     * @param {string} tripRequestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerGetTripRequest(tripRequestId: string, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerGetTripRequest(tripRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a trip info by traveler with code.
     * @param {string} tripCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerGetTripRequest2(tripCode: string, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerGetTripRequest2(tripCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get trip statistics for traveler.
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerGetTripStats(startDate?: Date, endDate?: Date, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerGetTripStats(startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Init trip request by traveler.
     * @param {InitTripInfoByTravelerCommand} initTripInfoByTravelerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerInitTrip(initTripInfoByTravelerCommand: InitTripInfoByTravelerCommand, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerInitTrip(initTripInfoByTravelerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list trip request by traveler with traveler.
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [customFiltersKeyword] 
     * @param {Array<number>} [customFiltersStatus] 
     * @param {boolean} [customFiltersIsOverBudget] 
     * @param {boolean} [customFiltersIsAnyHotel] 
     * @param {boolean} [customFiltersIsAnyFlight] 
     * @param {Date} [customFiltersStartDate] 
     * @param {Date} [customFiltersEndDate] 
     * @param {number} [customFiltersMinCost] 
     * @param {number} [customFiltersMaxCost] 
     * @param {Array<string>} [orderBy] 
     * @param {Array<string>} [advancedSearchFields] 
     * @param {string} [advancedSearchKeyword] 
     * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
     * @param {string} [advancedFilterLogic] 
     * @param {Array<Filter>} [advancedFilterFilters] 
     * @param {string} [advancedFilterField] 
     * @param {string} [advancedFilterOperator] 
     * @param {any} [advancedFilterValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerListTripRequest(pageNumber?: number, pageSize?: number, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersIsOverBudget?: boolean, customFiltersIsAnyHotel?: boolean, customFiltersIsAnyFlight?: boolean, customFiltersStartDate?: Date, customFiltersEndDate?: Date, customFiltersMinCost?: number, customFiltersMaxCost?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerListTripRequest(pageNumber, pageSize, customFiltersKeyword, customFiltersStatus, customFiltersIsOverBudget, customFiltersIsAnyHotel, customFiltersIsAnyFlight, customFiltersStartDate, customFiltersEndDate, customFiltersMinCost, customFiltersMaxCost, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send approval trip request to manager.
     * @param {SendTripApprovalCommand} sendTripApprovalCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerSendApproval(sendTripApprovalCommand: SendTripApprovalCommand, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerSendApproval(sendTripApprovalCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send trip details to traveler via email
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerSendTripDetailViaEmail(id: string, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerSendTripDetailViaEmail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a trip request by traveler.
     * @param {string} id 
     * @param {UpdateTripInfoByTravelerCommand} updateTripInfoByTravelerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerUpdate(id: string, updateTripInfoByTravelerCommand: UpdateTripInfoByTravelerCommand, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerUpdate(id, updateTripInfoByTravelerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify selected flight fare info before adding to trip
     * @param {VerifyTripFlightWithPolicyRequest} verifyTripFlightWithPolicyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest: VerifyTripFlightWithPolicyRequest, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify selected hotel room info before adding to trip
     * @param {VerifyTripHotelWithPolicyRequest} verifyTripHotelWithPolicyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelerApi
     */
    public travelerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest: VerifyTripHotelWithPolicyRequest, options?: AxiosRequestConfig) {
        return TravelerApiFp(this.configuration).travelerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
