/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA TMC WebAPI
 * The TripOTA TMC WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddTripFlightByTravelerCommand } from '../models';
// @ts-ignore
import { AddTripHotelByTravelerCommand } from '../models';
// @ts-ignore
import { CancelTripRequestCommand } from '../models';
// @ts-ignore
import { CreateTripInfoByTravellerCommand } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { Filter } from '../models';
// @ts-ignore
import { GetTripDestinationStatisticRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { InitTripInfoByTravellerCommand } from '../models';
// @ts-ignore
import { PaginationResponseOfTripSummaryInfoDto } from '../models';
// @ts-ignore
import { SendRequestAdjustmentCommand } from '../models';
// @ts-ignore
import { SendTripApprovalCommand } from '../models';
// @ts-ignore
import { SendTripRecheckPriceCommand } from '../models';
// @ts-ignore
import { SendTripRequestConfirmCommand } from '../models';
// @ts-ignore
import { TravelPolicyDetailDto } from '../models';
// @ts-ignore
import { TravelerBudgetPolicyDto } from '../models';
// @ts-ignore
import { TripDestinationStatsDto } from '../models';
// @ts-ignore
import { TripInfoDto } from '../models';
// @ts-ignore
import { TripInfoStatsDto } from '../models';
// @ts-ignore
import { UpdateTripInfoByTravelerCommand } from '../models';
// @ts-ignore
import { VerifyResult } from '../models';
// @ts-ignore
import { VerifyTripFlightWithPolicyRequest } from '../models';
// @ts-ignore
import { VerifyTripHotelWithPolicyRequest } from '../models';
/**
 * TravellerApi - axios parameter creator
 * @export
 */
export const TravellerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GetTripDestinationStatisticRequest} getTripDestinationStatisticRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripStatisticByDestinations: async (getTripDestinationStatisticRequest: GetTripDestinationStatisticRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getTripDestinationStatisticRequest' is not null or undefined
            assertParamExists('getTripStatisticByDestinations', 'getTripDestinationStatisticRequest', getTripDestinationStatisticRequest)
            const localVarPath = `/api/v1/traveller/get-destinations-stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getTripDestinationStatisticRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add trip flight by traveler.
         * @param {string} id 
         * @param {AddTripFlightByTravelerCommand} addTripFlightByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerAddTripFlight: async (id: string, addTripFlightByTravelerCommand: AddTripFlightByTravelerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travellerAddTripFlight', 'id', id)
            // verify required parameter 'addTripFlightByTravelerCommand' is not null or undefined
            assertParamExists('travellerAddTripFlight', 'addTripFlightByTravelerCommand', addTripFlightByTravelerCommand)
            const localVarPath = `/api/v1/traveller/trip-request/{id}/add-flight`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTripFlightByTravelerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add trip hotel by traveler.
         * @param {string} id 
         * @param {AddTripHotelByTravelerCommand} addTripHotelByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerAddTripHotel: async (id: string, addTripHotelByTravelerCommand: AddTripHotelByTravelerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travellerAddTripHotel', 'id', id)
            // verify required parameter 'addTripHotelByTravelerCommand' is not null or undefined
            assertParamExists('travellerAddTripHotel', 'addTripHotelByTravelerCommand', addTripHotelByTravelerCommand)
            const localVarPath = `/api/v1/traveller/trip-request/{id}/add-hotel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTripHotelByTravelerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Traveler cancel a trip request.
         * @param {string} id 
         * @param {CancelTripRequestCommand} cancelTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerCancelTripRequest: async (id: string, cancelTripRequestCommand: CancelTripRequestCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travellerCancelTripRequest', 'id', id)
            // verify required parameter 'cancelTripRequestCommand' is not null or undefined
            assertParamExists('travellerCancelTripRequest', 'cancelTripRequestCommand', cancelTripRequestCommand)
            const localVarPath = `/api/v1/traveller/trip-request/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelTripRequestCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issue flight ticket then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerConfirmFlightPayment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travellerConfirmFlightPayment', 'id', id)
            const localVarPath = `/api/v1/traveller/trip-request/{id}/issue-ticket`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issue reservation number then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerConfirmHotelPayment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travellerConfirmHotelPayment', 'id', id)
            const localVarPath = `/api/v1/traveller/trip-request/{id}/issue-reservation-number`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create trip request by traveler.
         * @param {CreateTripInfoByTravellerCommand} createTripInfoByTravellerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerCreate: async (createTripInfoByTravellerCommand: CreateTripInfoByTravellerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTripInfoByTravellerCommand' is not null or undefined
            assertParamExists('travellerCreate', 'createTripInfoByTravellerCommand', createTripInfoByTravellerCommand)
            const localVarPath = `/api/v1/traveller/trip-request/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTripInfoByTravellerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a trip request.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerDeleteTripRequest: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travellerDeleteTripRequest', 'id', id)
            const localVarPath = `/api/v1/traveller/trip-request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the budget policy for travelers.
         * @summary Get budget policy for travelers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerGetBudgetPolicy: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/traveller/budget-policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my travel policy for trip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerGetMyTravelPolicy: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/traveller/my-travel-policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a trip info by traveler with id.
         * @param {string} tripRequestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerGetTripRequest: async (tripRequestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripRequestId' is not null or undefined
            assertParamExists('travellerGetTripRequest', 'tripRequestId', tripRequestId)
            const localVarPath = `/api/v1/traveller/trip-request/{tripRequestId}`
                .replace(`{${"tripRequestId"}}`, encodeURIComponent(String(tripRequestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a trip info by traveler with code.
         * @param {string} tripCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerGetTripRequest2: async (tripCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripCode' is not null or undefined
            assertParamExists('travellerGetTripRequest2', 'tripCode', tripCode)
            const localVarPath = `/api/v1/traveller/trip-request/{tripCode}`
                .replace(`{${"tripCode"}}`, encodeURIComponent(String(tripCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get trip statistics for traveler.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerGetTripStats: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/traveller/get-trip-stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Init trip request by traveler.
         * @param {InitTripInfoByTravellerCommand} initTripInfoByTravellerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerInitTrip: async (initTripInfoByTravellerCommand: InitTripInfoByTravellerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'initTripInfoByTravellerCommand' is not null or undefined
            assertParamExists('travellerInitTrip', 'initTripInfoByTravellerCommand', initTripInfoByTravellerCommand)
            const localVarPath = `/api/v1/traveller/trip-request/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(initTripInfoByTravellerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list trip request by traveler with traveler.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [customFiltersKeyword] 
         * @param {Array<number>} [customFiltersStatus] 
         * @param {boolean} [customFiltersIsOverBudget] 
         * @param {boolean} [customFiltersIsAnyHotel] 
         * @param {boolean} [customFiltersIsAnyFlight] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {number} [customFiltersMinCost] 
         * @param {number} [customFiltersMaxCost] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerListTripRequest: async (pageNumber?: number, pageSize?: number, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersIsOverBudget?: boolean, customFiltersIsAnyHotel?: boolean, customFiltersIsAnyFlight?: boolean, customFiltersStartDate?: Date, customFiltersEndDate?: Date, customFiltersMinCost?: number, customFiltersMaxCost?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/traveller/trip-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (customFiltersKeyword !== undefined) {
                localVarQueryParameter['CustomFilters.Keyword'] = customFiltersKeyword;
            }

            if (customFiltersStatus) {
                localVarQueryParameter['CustomFilters.Status'] = customFiltersStatus;
            }

            if (customFiltersIsOverBudget !== undefined) {
                localVarQueryParameter['CustomFilters.IsOverBudget'] = customFiltersIsOverBudget;
            }

            if (customFiltersIsAnyHotel !== undefined) {
                localVarQueryParameter['CustomFilters.IsAnyHotel'] = customFiltersIsAnyHotel;
            }

            if (customFiltersIsAnyFlight !== undefined) {
                localVarQueryParameter['CustomFilters.IsAnyFlight'] = customFiltersIsAnyFlight;
            }

            if (customFiltersStartDate !== undefined) {
                localVarQueryParameter['CustomFilters.StartDate'] = (customFiltersStartDate as any instanceof Date) ?
                    (customFiltersStartDate as any).toISOString() :
                    customFiltersStartDate;
            }

            if (customFiltersEndDate !== undefined) {
                localVarQueryParameter['CustomFilters.EndDate'] = (customFiltersEndDate as any instanceof Date) ?
                    (customFiltersEndDate as any).toISOString() :
                    customFiltersEndDate;
            }

            if (customFiltersMinCost !== undefined) {
                localVarQueryParameter['CustomFilters.MinCost'] = customFiltersMinCost;
            }

            if (customFiltersMaxCost !== undefined) {
                localVarQueryParameter['CustomFilters.MaxCost'] = customFiltersMaxCost;
            }

            if (orderBy) {
                localVarQueryParameter['OrderBy'] = orderBy;
            }

            if (advancedSearchFields) {
                localVarQueryParameter['AdvancedSearch.Fields'] = advancedSearchFields;
            }

            if (advancedSearchKeyword !== undefined) {
                localVarQueryParameter['AdvancedSearch.Keyword'] = advancedSearchKeyword;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (advancedFilterLogic !== undefined) {
                localVarQueryParameter['AdvancedFilter.Logic'] = advancedFilterLogic;
            }

            if (advancedFilterFilters) {
                localVarQueryParameter['AdvancedFilter.Filters'] = advancedFilterFilters;
            }

            if (advancedFilterField !== undefined) {
                localVarQueryParameter['AdvancedFilter.Field'] = advancedFilterField;
            }

            if (advancedFilterOperator !== undefined) {
                localVarQueryParameter['AdvancedFilter.Operator'] = advancedFilterOperator;
            }

            if (advancedFilterValue !== undefined) {
                localVarQueryParameter['AdvancedFilter.Value'] = advancedFilterValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send approval trip request to manager.
         * @param {SendTripApprovalCommand} sendTripApprovalCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerSendApproval: async (sendTripApprovalCommand: SendTripApprovalCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendTripApprovalCommand' is not null or undefined
            assertParamExists('travellerSendApproval', 'sendTripApprovalCommand', sendTripApprovalCommand)
            const localVarPath = `/api/v1/traveller/trip-request/send-approval`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendTripApprovalCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send trip details to traveler via email
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerSendTripDetailViaEmail: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travellerSendTripDetailViaEmail', 'id', id)
            const localVarPath = `/api/v1/traveller/send-trip-email/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send trip adjustment request to booker.
         * @param {string} id 
         * @param {SendRequestAdjustmentCommand} sendRequestAdjustmentCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerSendTripRequestAdjustment: async (id: string, sendRequestAdjustmentCommand: SendRequestAdjustmentCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travellerSendTripRequestAdjustment', 'id', id)
            // verify required parameter 'sendRequestAdjustmentCommand' is not null or undefined
            assertParamExists('travellerSendTripRequestAdjustment', 'sendRequestAdjustmentCommand', sendRequestAdjustmentCommand)
            const localVarPath = `/api/v1/traveller/{id}/request-adjust`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendRequestAdjustmentCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send trip confirm to booker.
         * @param {string} id 
         * @param {SendTripRequestConfirmCommand} sendTripRequestConfirmCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerSendTripRequestConfirm: async (id: string, sendTripRequestConfirmCommand: SendTripRequestConfirmCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travellerSendTripRequestConfirm', 'id', id)
            // verify required parameter 'sendTripRequestConfirmCommand' is not null or undefined
            assertParamExists('travellerSendTripRequestConfirm', 'sendTripRequestConfirmCommand', sendTripRequestConfirmCommand)
            const localVarPath = `/api/v1/traveller/{id}/confirm`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendTripRequestConfirmCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send trip re-check request to booker.
         * @param {string} id 
         * @param {SendTripRecheckPriceCommand} sendTripRecheckPriceCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerSendTripRequestRecheckPrice: async (id: string, sendTripRecheckPriceCommand: SendTripRecheckPriceCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travellerSendTripRequestRecheckPrice', 'id', id)
            // verify required parameter 'sendTripRecheckPriceCommand' is not null or undefined
            assertParamExists('travellerSendTripRequestRecheckPrice', 'sendTripRecheckPriceCommand', sendTripRecheckPriceCommand)
            const localVarPath = `/api/v1/traveller/{id}/recheck-price`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendTripRecheckPriceCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a trip request by traveler.
         * @param {string} id 
         * @param {UpdateTripInfoByTravelerCommand} updateTripInfoByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerUpdate: async (id: string, updateTripInfoByTravelerCommand: UpdateTripInfoByTravelerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('travellerUpdate', 'id', id)
            // verify required parameter 'updateTripInfoByTravelerCommand' is not null or undefined
            assertParamExists('travellerUpdate', 'updateTripInfoByTravelerCommand', updateTripInfoByTravelerCommand)
            const localVarPath = `/api/v1/traveller/trip-request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTripInfoByTravelerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify selected flight fare info before adding to trip
         * @param {VerifyTripFlightWithPolicyRequest} verifyTripFlightWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerVerifyFlightBookingWithPolicy: async (verifyTripFlightWithPolicyRequest: VerifyTripFlightWithPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyTripFlightWithPolicyRequest' is not null or undefined
            assertParamExists('travellerVerifyFlightBookingWithPolicy', 'verifyTripFlightWithPolicyRequest', verifyTripFlightWithPolicyRequest)
            const localVarPath = `/api/v1/traveller/trip-request/verify-flight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyTripFlightWithPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify selected hotel room info before adding to trip
         * @param {VerifyTripHotelWithPolicyRequest} verifyTripHotelWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerVerifyHotelBookingWithPolicy: async (verifyTripHotelWithPolicyRequest: VerifyTripHotelWithPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyTripHotelWithPolicyRequest' is not null or undefined
            assertParamExists('travellerVerifyHotelBookingWithPolicy', 'verifyTripHotelWithPolicyRequest', verifyTripHotelWithPolicyRequest)
            const localVarPath = `/api/v1/traveller/trip-request/verify-hotel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyTripHotelWithPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TravellerApi - functional programming interface
 * @export
 */
export const TravellerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TravellerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GetTripDestinationStatisticRequest} getTripDestinationStatisticRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTripStatisticByDestinations(getTripDestinationStatisticRequest: GetTripDestinationStatisticRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TripDestinationStatsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTripStatisticByDestinations(getTripDestinationStatisticRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add trip flight by traveler.
         * @param {string} id 
         * @param {AddTripFlightByTravelerCommand} addTripFlightByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerAddTripFlight(id: string, addTripFlightByTravelerCommand: AddTripFlightByTravelerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerAddTripFlight(id, addTripFlightByTravelerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add trip hotel by traveler.
         * @param {string} id 
         * @param {AddTripHotelByTravelerCommand} addTripHotelByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerAddTripHotel(id: string, addTripHotelByTravelerCommand: AddTripHotelByTravelerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerAddTripHotel(id, addTripHotelByTravelerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Traveler cancel a trip request.
         * @param {string} id 
         * @param {CancelTripRequestCommand} cancelTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerCancelTripRequest(id: string, cancelTripRequestCommand: CancelTripRequestCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerCancelTripRequest(id, cancelTripRequestCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issue flight ticket then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerConfirmFlightPayment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerConfirmFlightPayment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issue reservation number then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerConfirmHotelPayment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerConfirmHotelPayment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create trip request by traveler.
         * @param {CreateTripInfoByTravellerCommand} createTripInfoByTravellerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerCreate(createTripInfoByTravellerCommand: CreateTripInfoByTravellerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerCreate(createTripInfoByTravellerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a trip request.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerDeleteTripRequest(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerDeleteTripRequest(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the budget policy for travelers.
         * @summary Get budget policy for travelers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerGetBudgetPolicy(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelerBudgetPolicyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerGetBudgetPolicy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get my travel policy for trip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerGetMyTravelPolicy(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelPolicyDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerGetMyTravelPolicy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a trip info by traveler with id.
         * @param {string} tripRequestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerGetTripRequest(tripRequestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerGetTripRequest(tripRequestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a trip info by traveler with code.
         * @param {string} tripCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerGetTripRequest2(tripCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerGetTripRequest2(tripCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get trip statistics for traveler.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerGetTripStats(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TripInfoStatsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerGetTripStats(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Init trip request by traveler.
         * @param {InitTripInfoByTravellerCommand} initTripInfoByTravellerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerInitTrip(initTripInfoByTravellerCommand: InitTripInfoByTravellerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerInitTrip(initTripInfoByTravellerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list trip request by traveler with traveler.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [customFiltersKeyword] 
         * @param {Array<number>} [customFiltersStatus] 
         * @param {boolean} [customFiltersIsOverBudget] 
         * @param {boolean} [customFiltersIsAnyHotel] 
         * @param {boolean} [customFiltersIsAnyFlight] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {number} [customFiltersMinCost] 
         * @param {number} [customFiltersMaxCost] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerListTripRequest(pageNumber?: number, pageSize?: number, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersIsOverBudget?: boolean, customFiltersIsAnyHotel?: boolean, customFiltersIsAnyFlight?: boolean, customFiltersStartDate?: Date, customFiltersEndDate?: Date, customFiltersMinCost?: number, customFiltersMaxCost?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTripSummaryInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerListTripRequest(pageNumber, pageSize, customFiltersKeyword, customFiltersStatus, customFiltersIsOverBudget, customFiltersIsAnyHotel, customFiltersIsAnyFlight, customFiltersStartDate, customFiltersEndDate, customFiltersMinCost, customFiltersMaxCost, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send approval trip request to manager.
         * @param {SendTripApprovalCommand} sendTripApprovalCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerSendApproval(sendTripApprovalCommand: SendTripApprovalCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerSendApproval(sendTripApprovalCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send trip details to traveler via email
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerSendTripDetailViaEmail(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerSendTripDetailViaEmail(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send trip adjustment request to booker.
         * @param {string} id 
         * @param {SendRequestAdjustmentCommand} sendRequestAdjustmentCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerSendTripRequestAdjustment(id: string, sendRequestAdjustmentCommand: SendRequestAdjustmentCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerSendTripRequestAdjustment(id, sendRequestAdjustmentCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send trip confirm to booker.
         * @param {string} id 
         * @param {SendTripRequestConfirmCommand} sendTripRequestConfirmCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerSendTripRequestConfirm(id: string, sendTripRequestConfirmCommand: SendTripRequestConfirmCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerSendTripRequestConfirm(id, sendTripRequestConfirmCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send trip re-check request to booker.
         * @param {string} id 
         * @param {SendTripRecheckPriceCommand} sendTripRecheckPriceCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerSendTripRequestRecheckPrice(id: string, sendTripRecheckPriceCommand: SendTripRecheckPriceCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerSendTripRequestRecheckPrice(id, sendTripRecheckPriceCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a trip request by traveler.
         * @param {string} id 
         * @param {UpdateTripInfoByTravelerCommand} updateTripInfoByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerUpdate(id: string, updateTripInfoByTravelerCommand: UpdateTripInfoByTravelerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerUpdate(id, updateTripInfoByTravelerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verify selected flight fare info before adding to trip
         * @param {VerifyTripFlightWithPolicyRequest} verifyTripFlightWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest: VerifyTripFlightWithPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verify selected hotel room info before adding to trip
         * @param {VerifyTripHotelWithPolicyRequest} verifyTripHotelWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travellerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest: VerifyTripHotelWithPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travellerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TravellerApi - factory interface
 * @export
 */
export const TravellerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TravellerApiFp(configuration)
    return {
        /**
         * 
         * @param {GetTripDestinationStatisticRequest} getTripDestinationStatisticRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripStatisticByDestinations(getTripDestinationStatisticRequest: GetTripDestinationStatisticRequest, options?: any): AxiosPromise<Array<TripDestinationStatsDto>> {
            return localVarFp.getTripStatisticByDestinations(getTripDestinationStatisticRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add trip flight by traveler.
         * @param {string} id 
         * @param {AddTripFlightByTravelerCommand} addTripFlightByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerAddTripFlight(id: string, addTripFlightByTravelerCommand: AddTripFlightByTravelerCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travellerAddTripFlight(id, addTripFlightByTravelerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add trip hotel by traveler.
         * @param {string} id 
         * @param {AddTripHotelByTravelerCommand} addTripHotelByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerAddTripHotel(id: string, addTripHotelByTravelerCommand: AddTripHotelByTravelerCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travellerAddTripHotel(id, addTripHotelByTravelerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Traveler cancel a trip request.
         * @param {string} id 
         * @param {CancelTripRequestCommand} cancelTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerCancelTripRequest(id: string, cancelTripRequestCommand: CancelTripRequestCommand, options?: any): AxiosPromise<File> {
            return localVarFp.travellerCancelTripRequest(id, cancelTripRequestCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issue flight ticket then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerConfirmFlightPayment(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.travellerConfirmFlightPayment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issue reservation number then update trip status to schedule
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerConfirmHotelPayment(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.travellerConfirmHotelPayment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create trip request by traveler.
         * @param {CreateTripInfoByTravellerCommand} createTripInfoByTravellerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerCreate(createTripInfoByTravellerCommand: CreateTripInfoByTravellerCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travellerCreate(createTripInfoByTravellerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a trip request.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerDeleteTripRequest(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.travellerDeleteTripRequest(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the budget policy for travelers.
         * @summary Get budget policy for travelers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerGetBudgetPolicy(options?: any): AxiosPromise<TravelerBudgetPolicyDto> {
            return localVarFp.travellerGetBudgetPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my travel policy for trip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerGetMyTravelPolicy(options?: any): AxiosPromise<TravelPolicyDetailDto> {
            return localVarFp.travellerGetMyTravelPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a trip info by traveler with id.
         * @param {string} tripRequestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerGetTripRequest(tripRequestId: string, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travellerGetTripRequest(tripRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a trip info by traveler with code.
         * @param {string} tripCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerGetTripRequest2(tripCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.travellerGetTripRequest2(tripCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get trip statistics for traveler.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerGetTripStats(options?: any): AxiosPromise<Array<TripInfoStatsDto>> {
            return localVarFp.travellerGetTripStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Init trip request by traveler.
         * @param {InitTripInfoByTravellerCommand} initTripInfoByTravellerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerInitTrip(initTripInfoByTravellerCommand: InitTripInfoByTravellerCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travellerInitTrip(initTripInfoByTravellerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list trip request by traveler with traveler.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [customFiltersKeyword] 
         * @param {Array<number>} [customFiltersStatus] 
         * @param {boolean} [customFiltersIsOverBudget] 
         * @param {boolean} [customFiltersIsAnyHotel] 
         * @param {boolean} [customFiltersIsAnyFlight] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {number} [customFiltersMinCost] 
         * @param {number} [customFiltersMaxCost] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerListTripRequest(pageNumber?: number, pageSize?: number, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersIsOverBudget?: boolean, customFiltersIsAnyHotel?: boolean, customFiltersIsAnyFlight?: boolean, customFiltersStartDate?: Date, customFiltersEndDate?: Date, customFiltersMinCost?: number, customFiltersMaxCost?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: any): AxiosPromise<PaginationResponseOfTripSummaryInfoDto> {
            return localVarFp.travellerListTripRequest(pageNumber, pageSize, customFiltersKeyword, customFiltersStatus, customFiltersIsOverBudget, customFiltersIsAnyHotel, customFiltersIsAnyFlight, customFiltersStartDate, customFiltersEndDate, customFiltersMinCost, customFiltersMaxCost, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send approval trip request to manager.
         * @param {SendTripApprovalCommand} sendTripApprovalCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerSendApproval(sendTripApprovalCommand: SendTripApprovalCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travellerSendApproval(sendTripApprovalCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send trip details to traveler via email
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerSendTripDetailViaEmail(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.travellerSendTripDetailViaEmail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send trip adjustment request to booker.
         * @param {string} id 
         * @param {SendRequestAdjustmentCommand} sendRequestAdjustmentCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerSendTripRequestAdjustment(id: string, sendRequestAdjustmentCommand: SendRequestAdjustmentCommand, options?: any): AxiosPromise<File> {
            return localVarFp.travellerSendTripRequestAdjustment(id, sendRequestAdjustmentCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send trip confirm to booker.
         * @param {string} id 
         * @param {SendTripRequestConfirmCommand} sendTripRequestConfirmCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerSendTripRequestConfirm(id: string, sendTripRequestConfirmCommand: SendTripRequestConfirmCommand, options?: any): AxiosPromise<File> {
            return localVarFp.travellerSendTripRequestConfirm(id, sendTripRequestConfirmCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send trip re-check request to booker.
         * @param {string} id 
         * @param {SendTripRecheckPriceCommand} sendTripRecheckPriceCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerSendTripRequestRecheckPrice(id: string, sendTripRecheckPriceCommand: SendTripRecheckPriceCommand, options?: any): AxiosPromise<File> {
            return localVarFp.travellerSendTripRequestRecheckPrice(id, sendTripRecheckPriceCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a trip request by traveler.
         * @param {string} id 
         * @param {UpdateTripInfoByTravelerCommand} updateTripInfoByTravelerCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerUpdate(id: string, updateTripInfoByTravelerCommand: UpdateTripInfoByTravelerCommand, options?: any): AxiosPromise<TripInfoDto> {
            return localVarFp.travellerUpdate(id, updateTripInfoByTravelerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify selected flight fare info before adding to trip
         * @param {VerifyTripFlightWithPolicyRequest} verifyTripFlightWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest: VerifyTripFlightWithPolicyRequest, options?: any): AxiosPromise<VerifyResult> {
            return localVarFp.travellerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify selected hotel room info before adding to trip
         * @param {VerifyTripHotelWithPolicyRequest} verifyTripHotelWithPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travellerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest: VerifyTripHotelWithPolicyRequest, options?: any): AxiosPromise<VerifyResult> {
            return localVarFp.travellerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TravellerApi - object-oriented interface
 * @export
 * @class TravellerApi
 * @extends {BaseAPI}
 */
export class TravellerApi extends BaseAPI {
    /**
     * 
     * @param {GetTripDestinationStatisticRequest} getTripDestinationStatisticRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public getTripStatisticByDestinations(getTripDestinationStatisticRequest: GetTripDestinationStatisticRequest, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).getTripStatisticByDestinations(getTripDestinationStatisticRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add trip flight by traveler.
     * @param {string} id 
     * @param {AddTripFlightByTravelerCommand} addTripFlightByTravelerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerAddTripFlight(id: string, addTripFlightByTravelerCommand: AddTripFlightByTravelerCommand, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerAddTripFlight(id, addTripFlightByTravelerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add trip hotel by traveler.
     * @param {string} id 
     * @param {AddTripHotelByTravelerCommand} addTripHotelByTravelerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerAddTripHotel(id: string, addTripHotelByTravelerCommand: AddTripHotelByTravelerCommand, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerAddTripHotel(id, addTripHotelByTravelerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Traveler cancel a trip request.
     * @param {string} id 
     * @param {CancelTripRequestCommand} cancelTripRequestCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerCancelTripRequest(id: string, cancelTripRequestCommand: CancelTripRequestCommand, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerCancelTripRequest(id, cancelTripRequestCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issue flight ticket then update trip status to schedule
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerConfirmFlightPayment(id: string, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerConfirmFlightPayment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issue reservation number then update trip status to schedule
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerConfirmHotelPayment(id: string, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerConfirmHotelPayment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create trip request by traveler.
     * @param {CreateTripInfoByTravellerCommand} createTripInfoByTravellerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerCreate(createTripInfoByTravellerCommand: CreateTripInfoByTravellerCommand, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerCreate(createTripInfoByTravellerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a trip request.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerDeleteTripRequest(id: string, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerDeleteTripRequest(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the budget policy for travelers.
     * @summary Get budget policy for travelers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerGetBudgetPolicy(options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerGetBudgetPolicy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my travel policy for trip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerGetMyTravelPolicy(options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerGetMyTravelPolicy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a trip info by traveler with id.
     * @param {string} tripRequestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerGetTripRequest(tripRequestId: string, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerGetTripRequest(tripRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a trip info by traveler with code.
     * @param {string} tripCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerGetTripRequest2(tripCode: string, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerGetTripRequest2(tripCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get trip statistics for traveler.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerGetTripStats(options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerGetTripStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Init trip request by traveler.
     * @param {InitTripInfoByTravellerCommand} initTripInfoByTravellerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerInitTrip(initTripInfoByTravellerCommand: InitTripInfoByTravellerCommand, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerInitTrip(initTripInfoByTravellerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list trip request by traveler with traveler.
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [customFiltersKeyword] 
     * @param {Array<number>} [customFiltersStatus] 
     * @param {boolean} [customFiltersIsOverBudget] 
     * @param {boolean} [customFiltersIsAnyHotel] 
     * @param {boolean} [customFiltersIsAnyFlight] 
     * @param {Date} [customFiltersStartDate] 
     * @param {Date} [customFiltersEndDate] 
     * @param {number} [customFiltersMinCost] 
     * @param {number} [customFiltersMaxCost] 
     * @param {Array<string>} [orderBy] 
     * @param {Array<string>} [advancedSearchFields] 
     * @param {string} [advancedSearchKeyword] 
     * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
     * @param {string} [advancedFilterLogic] 
     * @param {Array<Filter>} [advancedFilterFilters] 
     * @param {string} [advancedFilterField] 
     * @param {string} [advancedFilterOperator] 
     * @param {any} [advancedFilterValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerListTripRequest(pageNumber?: number, pageSize?: number, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersIsOverBudget?: boolean, customFiltersIsAnyHotel?: boolean, customFiltersIsAnyFlight?: boolean, customFiltersStartDate?: Date, customFiltersEndDate?: Date, customFiltersMinCost?: number, customFiltersMaxCost?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerListTripRequest(pageNumber, pageSize, customFiltersKeyword, customFiltersStatus, customFiltersIsOverBudget, customFiltersIsAnyHotel, customFiltersIsAnyFlight, customFiltersStartDate, customFiltersEndDate, customFiltersMinCost, customFiltersMaxCost, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send approval trip request to manager.
     * @param {SendTripApprovalCommand} sendTripApprovalCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerSendApproval(sendTripApprovalCommand: SendTripApprovalCommand, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerSendApproval(sendTripApprovalCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send trip details to traveler via email
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerSendTripDetailViaEmail(id: string, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerSendTripDetailViaEmail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send trip adjustment request to booker.
     * @param {string} id 
     * @param {SendRequestAdjustmentCommand} sendRequestAdjustmentCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerSendTripRequestAdjustment(id: string, sendRequestAdjustmentCommand: SendRequestAdjustmentCommand, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerSendTripRequestAdjustment(id, sendRequestAdjustmentCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send trip confirm to booker.
     * @param {string} id 
     * @param {SendTripRequestConfirmCommand} sendTripRequestConfirmCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerSendTripRequestConfirm(id: string, sendTripRequestConfirmCommand: SendTripRequestConfirmCommand, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerSendTripRequestConfirm(id, sendTripRequestConfirmCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send trip re-check request to booker.
     * @param {string} id 
     * @param {SendTripRecheckPriceCommand} sendTripRecheckPriceCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerSendTripRequestRecheckPrice(id: string, sendTripRecheckPriceCommand: SendTripRecheckPriceCommand, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerSendTripRequestRecheckPrice(id, sendTripRecheckPriceCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a trip request by traveler.
     * @param {string} id 
     * @param {UpdateTripInfoByTravelerCommand} updateTripInfoByTravelerCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerUpdate(id: string, updateTripInfoByTravelerCommand: UpdateTripInfoByTravelerCommand, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerUpdate(id, updateTripInfoByTravelerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify selected flight fare info before adding to trip
     * @param {VerifyTripFlightWithPolicyRequest} verifyTripFlightWithPolicyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest: VerifyTripFlightWithPolicyRequest, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerVerifyFlightBookingWithPolicy(verifyTripFlightWithPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify selected hotel room info before adding to trip
     * @param {VerifyTripHotelWithPolicyRequest} verifyTripHotelWithPolicyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravellerApi
     */
    public travellerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest: VerifyTripHotelWithPolicyRequest, options?: AxiosRequestConfig) {
        return TravellerApiFp(this.configuration).travellerVerifyHotelBookingWithPolicy(verifyTripHotelWithPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
