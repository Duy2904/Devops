/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA TMC WebAPI
 * The TripOTA TMC WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BaggageResultDto } from '../models';
// @ts-ignore
import { BookFlightRequestDto } from '../models';
// @ts-ignore
import { BookFlightResultDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { FareRuleResultDto } from '../models';
// @ts-ignore
import { FlightSeatMapRequest } from '../models';
// @ts-ignore
import { FlightSeatMapResultDto } from '../models';
// @ts-ignore
import { FlightServicesRequest } from '../models';
// @ts-ignore
import { FlightServicesResultDto } from '../models';
// @ts-ignore
import { GetBaggageRequest } from '../models';
// @ts-ignore
import { GetFareRulesRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { RetrieveBookingRequest } from '../models';
// @ts-ignore
import { RetrieveBookingResultDto } from '../models';
// @ts-ignore
import { SearchFlightMinPriceRequest } from '../models';
// @ts-ignore
import { SearchFlightMonthRequest } from '../models';
// @ts-ignore
import { SearchFlightRequest } from '../models';
// @ts-ignore
import { SearchFlightResultDto } from '../models';
// @ts-ignore
import { SearchFlightsMinPriceResultDto } from '../models';
// @ts-ignore
import { SearchFlightsMonthResultDto } from '../models';
// @ts-ignore
import { VerifyFlightRequest } from '../models';
// @ts-ignore
import { VerifyFlightResultDto } from '../models';
/**
 * FlightsApi - axios parameter creator
 * @export
 */
export const FlightsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BookFlightRequestDto} bookFlightRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookFlight: async (bookFlightRequestDto: BookFlightRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookFlightRequestDto' is not null or undefined
            assertParamExists('bookFlight', 'bookFlightRequestDto', bookFlightRequestDto)
            const localVarPath = `/api/v1/flights/book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookFlightRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetBaggageRequest} getBaggageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightBaggage: async (getBaggageRequest: GetBaggageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getBaggageRequest' is not null or undefined
            assertParamExists('getFlightBaggage', 'getBaggageRequest', getBaggageRequest)
            const localVarPath = `/api/v1/flights/baggage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBaggageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetFareRulesRequest} getFareRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightFareRules: async (getFareRulesRequest: GetFareRulesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getFareRulesRequest' is not null or undefined
            assertParamExists('getFlightFareRules', 'getFareRulesRequest', getFareRulesRequest)
            const localVarPath = `/api/v1/flights/fare-rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getFareRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FlightServicesRequest} flightServicesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightServices: async (flightServicesRequest: FlightServicesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flightServicesRequest' is not null or undefined
            assertParamExists('getFlightServices', 'flightServicesRequest', flightServicesRequest)
            const localVarPath = `/api/v1/flights/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(flightServicesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FlightSeatMapRequest} flightSeatMapRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightsSeatMap: async (flightSeatMapRequest: FlightSeatMapRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flightSeatMapRequest' is not null or undefined
            assertParamExists('getFlightsSeatMap', 'flightSeatMapRequest', flightSeatMapRequest)
            const localVarPath = `/api/v1/flights/seat-map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(flightSeatMapRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RetrieveBookingRequest} retrieveBookingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBookingDetails: async (retrieveBookingRequest: RetrieveBookingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'retrieveBookingRequest' is not null or undefined
            assertParamExists('retrieveBookingDetails', 'retrieveBookingRequest', retrieveBookingRequest)
            const localVarPath = `/api/v1/flights/retrieve-booking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(retrieveBookingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchFlightRequest} searchFlightRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFlightInNormal: async (searchFlightRequest: SearchFlightRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchFlightRequest' is not null or undefined
            assertParamExists('searchFlightInNormal', 'searchFlightRequest', searchFlightRequest)
            const localVarPath = `/api/v1/flights/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchFlightRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchFlightMinPriceRequest} searchFlightMinPriceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFlightsWithMinimalPriceByDate: async (searchFlightMinPriceRequest: SearchFlightMinPriceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchFlightMinPriceRequest' is not null or undefined
            assertParamExists('searchFlightsWithMinimalPriceByDate', 'searchFlightMinPriceRequest', searchFlightMinPriceRequest)
            const localVarPath = `/api/v1/flights/search/min-price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchFlightMinPriceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchFlightMonthRequest} searchFlightMonthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFlightsWithMinimalPriceByMonth: async (searchFlightMonthRequest: SearchFlightMonthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchFlightMonthRequest' is not null or undefined
            assertParamExists('searchFlightsWithMinimalPriceByMonth', 'searchFlightMonthRequest', searchFlightMonthRequest)
            const localVarPath = `/api/v1/flights/search/min-price-month`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchFlightMonthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyFlightRequest} verifyFlightRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyFlight: async (verifyFlightRequest: VerifyFlightRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyFlightRequest' is not null or undefined
            assertParamExists('verifyFlight', 'verifyFlightRequest', verifyFlightRequest)
            const localVarPath = `/api/v1/flights/verify-flight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyFlightRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlightsApi - functional programming interface
 * @export
 */
export const FlightsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FlightsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BookFlightRequestDto} bookFlightRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookFlight(bookFlightRequestDto: BookFlightRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookFlightResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookFlight(bookFlightRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetBaggageRequest} getBaggageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlightBaggage(getBaggageRequest: GetBaggageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaggageResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFlightBaggage(getBaggageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetFareRulesRequest} getFareRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlightFareRules(getFareRulesRequest: GetFareRulesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FareRuleResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFlightFareRules(getFareRulesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FlightServicesRequest} flightServicesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlightServices(flightServicesRequest: FlightServicesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlightServicesResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFlightServices(flightServicesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FlightSeatMapRequest} flightSeatMapRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlightsSeatMap(flightSeatMapRequest: FlightSeatMapRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlightSeatMapResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFlightsSeatMap(flightSeatMapRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RetrieveBookingRequest} retrieveBookingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveBookingDetails(retrieveBookingRequest: RetrieveBookingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveBookingResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveBookingDetails(retrieveBookingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SearchFlightRequest} searchFlightRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFlightInNormal(searchFlightRequest: SearchFlightRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFlightResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFlightInNormal(searchFlightRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SearchFlightMinPriceRequest} searchFlightMinPriceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFlightsWithMinimalPriceByDate(searchFlightMinPriceRequest: SearchFlightMinPriceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFlightsMinPriceResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFlightsWithMinimalPriceByDate(searchFlightMinPriceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SearchFlightMonthRequest} searchFlightMonthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFlightsWithMinimalPriceByMonth(searchFlightMonthRequest: SearchFlightMonthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFlightsMonthResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFlightsWithMinimalPriceByMonth(searchFlightMonthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VerifyFlightRequest} verifyFlightRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyFlight(verifyFlightRequest: VerifyFlightRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyFlightResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyFlight(verifyFlightRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FlightsApi - factory interface
 * @export
 */
export const FlightsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FlightsApiFp(configuration)
    return {
        /**
         * 
         * @param {BookFlightRequestDto} bookFlightRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookFlight(bookFlightRequestDto: BookFlightRequestDto, options?: any): AxiosPromise<BookFlightResultDto> {
            return localVarFp.bookFlight(bookFlightRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetBaggageRequest} getBaggageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightBaggage(getBaggageRequest: GetBaggageRequest, options?: any): AxiosPromise<BaggageResultDto> {
            return localVarFp.getFlightBaggage(getBaggageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetFareRulesRequest} getFareRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightFareRules(getFareRulesRequest: GetFareRulesRequest, options?: any): AxiosPromise<FareRuleResultDto> {
            return localVarFp.getFlightFareRules(getFareRulesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FlightServicesRequest} flightServicesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightServices(flightServicesRequest: FlightServicesRequest, options?: any): AxiosPromise<FlightServicesResultDto> {
            return localVarFp.getFlightServices(flightServicesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FlightSeatMapRequest} flightSeatMapRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightsSeatMap(flightSeatMapRequest: FlightSeatMapRequest, options?: any): AxiosPromise<FlightSeatMapResultDto> {
            return localVarFp.getFlightsSeatMap(flightSeatMapRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RetrieveBookingRequest} retrieveBookingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBookingDetails(retrieveBookingRequest: RetrieveBookingRequest, options?: any): AxiosPromise<RetrieveBookingResultDto> {
            return localVarFp.retrieveBookingDetails(retrieveBookingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchFlightRequest} searchFlightRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFlightInNormal(searchFlightRequest: SearchFlightRequest, options?: any): AxiosPromise<SearchFlightResultDto> {
            return localVarFp.searchFlightInNormal(searchFlightRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchFlightMinPriceRequest} searchFlightMinPriceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFlightsWithMinimalPriceByDate(searchFlightMinPriceRequest: SearchFlightMinPriceRequest, options?: any): AxiosPromise<SearchFlightsMinPriceResultDto> {
            return localVarFp.searchFlightsWithMinimalPriceByDate(searchFlightMinPriceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchFlightMonthRequest} searchFlightMonthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFlightsWithMinimalPriceByMonth(searchFlightMonthRequest: SearchFlightMonthRequest, options?: any): AxiosPromise<SearchFlightsMonthResultDto> {
            return localVarFp.searchFlightsWithMinimalPriceByMonth(searchFlightMonthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyFlightRequest} verifyFlightRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyFlight(verifyFlightRequest: VerifyFlightRequest, options?: any): AxiosPromise<VerifyFlightResultDto> {
            return localVarFp.verifyFlight(verifyFlightRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FlightsApi - object-oriented interface
 * @export
 * @class FlightsApi
 * @extends {BaseAPI}
 */
export class FlightsApi extends BaseAPI {
    /**
     * 
     * @param {BookFlightRequestDto} bookFlightRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public bookFlight(bookFlightRequestDto: BookFlightRequestDto, options?: AxiosRequestConfig) {
        return FlightsApiFp(this.configuration).bookFlight(bookFlightRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetBaggageRequest} getBaggageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public getFlightBaggage(getBaggageRequest: GetBaggageRequest, options?: AxiosRequestConfig) {
        return FlightsApiFp(this.configuration).getFlightBaggage(getBaggageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetFareRulesRequest} getFareRulesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public getFlightFareRules(getFareRulesRequest: GetFareRulesRequest, options?: AxiosRequestConfig) {
        return FlightsApiFp(this.configuration).getFlightFareRules(getFareRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FlightServicesRequest} flightServicesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public getFlightServices(flightServicesRequest: FlightServicesRequest, options?: AxiosRequestConfig) {
        return FlightsApiFp(this.configuration).getFlightServices(flightServicesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FlightSeatMapRequest} flightSeatMapRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public getFlightsSeatMap(flightSeatMapRequest: FlightSeatMapRequest, options?: AxiosRequestConfig) {
        return FlightsApiFp(this.configuration).getFlightsSeatMap(flightSeatMapRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RetrieveBookingRequest} retrieveBookingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public retrieveBookingDetails(retrieveBookingRequest: RetrieveBookingRequest, options?: AxiosRequestConfig) {
        return FlightsApiFp(this.configuration).retrieveBookingDetails(retrieveBookingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchFlightRequest} searchFlightRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public searchFlightInNormal(searchFlightRequest: SearchFlightRequest, options?: AxiosRequestConfig) {
        return FlightsApiFp(this.configuration).searchFlightInNormal(searchFlightRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchFlightMinPriceRequest} searchFlightMinPriceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public searchFlightsWithMinimalPriceByDate(searchFlightMinPriceRequest: SearchFlightMinPriceRequest, options?: AxiosRequestConfig) {
        return FlightsApiFp(this.configuration).searchFlightsWithMinimalPriceByDate(searchFlightMinPriceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchFlightMonthRequest} searchFlightMonthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public searchFlightsWithMinimalPriceByMonth(searchFlightMonthRequest: SearchFlightMonthRequest, options?: AxiosRequestConfig) {
        return FlightsApiFp(this.configuration).searchFlightsWithMinimalPriceByMonth(searchFlightMonthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerifyFlightRequest} verifyFlightRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public verifyFlight(verifyFlightRequest: VerifyFlightRequest, options?: AxiosRequestConfig) {
        return FlightsApiFp(this.configuration).verifyFlight(verifyFlightRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
