/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA TMC WebAPI
 * The TripOTA TMC WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AirlineDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { SearchAirlineRequest } from '../models';
/**
 * AirlineApi - axios parameter creator
 * @export
 */
export const AirlineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListAllAirlineWithVisibleIsTrue: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/airline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentSearchAirlineCodeWithVisibleIsTrue: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/airline/recent-search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveHistorySearchAirline: async (value?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/airline/recent-search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchAirlineRequest} searchAirlineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAirlineWithNameCodeWithVisibleIsTrue: async (searchAirlineRequest: SearchAirlineRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchAirlineRequest' is not null or undefined
            assertParamExists('searchAirlineWithNameCodeWithVisibleIsTrue', 'searchAirlineRequest', searchAirlineRequest)
            const localVarPath = `/api/airline/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchAirlineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AirlineApi - functional programming interface
 * @export
 */
export const AirlineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AirlineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListAllAirlineWithVisibleIsTrue(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AirlineDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListAllAirlineWithVisibleIsTrue(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recentSearchAirlineCodeWithVisibleIsTrue(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AirlineDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recentSearchAirlineCodeWithVisibleIsTrue(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveHistorySearchAirline(value?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AirlineDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveHistorySearchAirline(value, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SearchAirlineRequest} searchAirlineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAirlineWithNameCodeWithVisibleIsTrue(searchAirlineRequest: SearchAirlineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AirlineDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAirlineWithNameCodeWithVisibleIsTrue(searchAirlineRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AirlineApi - factory interface
 * @export
 */
export const AirlineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AirlineApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListAllAirlineWithVisibleIsTrue(options?: any): AxiosPromise<Array<AirlineDto>> {
            return localVarFp.getListAllAirlineWithVisibleIsTrue(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentSearchAirlineCodeWithVisibleIsTrue(options?: any): AxiosPromise<Array<AirlineDto>> {
            return localVarFp.recentSearchAirlineCodeWithVisibleIsTrue(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveHistorySearchAirline(value?: string, options?: any): AxiosPromise<Array<AirlineDto>> {
            return localVarFp.saveHistorySearchAirline(value, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchAirlineRequest} searchAirlineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAirlineWithNameCodeWithVisibleIsTrue(searchAirlineRequest: SearchAirlineRequest, options?: any): AxiosPromise<Array<AirlineDto>> {
            return localVarFp.searchAirlineWithNameCodeWithVisibleIsTrue(searchAirlineRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AirlineApi - object-oriented interface
 * @export
 * @class AirlineApi
 * @extends {BaseAPI}
 */
export class AirlineApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirlineApi
     */
    public getListAllAirlineWithVisibleIsTrue(options?: AxiosRequestConfig) {
        return AirlineApiFp(this.configuration).getListAllAirlineWithVisibleIsTrue(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirlineApi
     */
    public recentSearchAirlineCodeWithVisibleIsTrue(options?: AxiosRequestConfig) {
        return AirlineApiFp(this.configuration).recentSearchAirlineCodeWithVisibleIsTrue(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirlineApi
     */
    public saveHistorySearchAirline(value?: string, options?: AxiosRequestConfig) {
        return AirlineApiFp(this.configuration).saveHistorySearchAirline(value, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchAirlineRequest} searchAirlineRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirlineApi
     */
    public searchAirlineWithNameCodeWithVisibleIsTrue(searchAirlineRequest: SearchAirlineRequest, options?: AxiosRequestConfig) {
        return AirlineApiFp(this.configuration).searchAirlineWithNameCodeWithVisibleIsTrue(searchAirlineRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
