/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA TMC WebAPI
 * The TripOTA TMC WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApproveTripRequestCommand } from '../models';
// @ts-ignore
import { DownloadImportTemplateRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { Filter } from '../models';
// @ts-ignore
import { GenerateTripStatisticReportCommand } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfTripSummaryInfoDto } from '../models';
// @ts-ignore
import { RejectTripRequestCommand } from '../models';
// @ts-ignore
import { SendEmailReportCommand } from '../models';
// @ts-ignore
import { TripInfoStatsDto } from '../models';
// @ts-ignore
import { TripReportGroupFieldDto } from '../models';
// @ts-ignore
import { TripStatisticDto } from '../models';
// @ts-ignore
import { UpdateCustomizeFieldsCommand } from '../models';
/**
 * ManagerApi - axios parameter creator
 * @export
 */
export const ManagerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripStatisticForManager: async (startDate?: Date, endDate?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/get-trip-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Manager approve a trip request.
         * @param {string} id 
         * @param {ApproveTripRequestCommand} approveTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerApproveTripPlan: async (id: string, approveTripRequestCommand: ApproveTripRequestCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('managerApproveTripPlan', 'id', id)
            // verify required parameter 'approveTripRequestCommand' is not null or undefined
            assertParamExists('managerApproveTripPlan', 'approveTripRequestCommand', approveTripRequestCommand)
            const localVarPath = `/api/v1/manager/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approveTripRequestCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download a import template file.
         * @param {DownloadImportTemplateRequest} downloadImportTemplateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerDownloadImportTemplate: async (downloadImportTemplateRequest: DownloadImportTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadImportTemplateRequest' is not null or undefined
            assertParamExists('managerDownloadImportTemplate', 'downloadImportTemplateRequest', downloadImportTemplateRequest)
            const localVarPath = `/api/v1/manager/download-import-template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(downloadImportTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export a report.
         * @param {GenerateTripStatisticReportCommand} generateTripStatisticReportCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerExport: async (generateTripStatisticReportCommand: GenerateTripStatisticReportCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generateTripStatisticReportCommand' is not null or undefined
            assertParamExists('managerExport', 'generateTripStatisticReportCommand', generateTripStatisticReportCommand)
            const localVarPath = `/api/v1/manager/export-report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generateTripStatisticReportCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get fields for Customize report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerGetCustomizeExportFields: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/customize-report-fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get trip statistics with filters by manager.
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerGetTripStats: async (startDate?: Date, endDate?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/get-trip-stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rebook expired trip flight by manager.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerRebookTrip: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('managerRebookTrip', 'id', id)
            const localVarPath = `/api/v1/manager/{id}/re-book`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Manager reject a trip request.
         * @param {string} id 
         * @param {RejectTripRequestCommand} rejectTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerRejectTripRequest: async (id: string, rejectTripRequestCommand: RejectTripRequestCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('managerRejectTripRequest', 'id', id)
            // verify required parameter 'rejectTripRequestCommand' is not null or undefined
            assertParamExists('managerRejectTripRequest', 'rejectTripRequestCommand', rejectTripRequestCommand)
            const localVarPath = `/api/v1/manager/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rejectTripRequestCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search trip request using available filters by manager.
         * @param {string} [tripInfoId] 
         * @param {string} [travelerId] 
         * @param {string} [customFiltersKeyword] 
         * @param {Array<number>} [customFiltersStatus] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerSearch: async (tripInfoId?: string, travelerId?: string, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersStartDate?: Date, customFiltersEndDate?: Date, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tripInfoId !== undefined) {
                localVarQueryParameter['TripInfoId'] = tripInfoId;
            }

            if (travelerId !== undefined) {
                localVarQueryParameter['TravelerId'] = travelerId;
            }

            if (customFiltersKeyword !== undefined) {
                localVarQueryParameter['CustomFilters.Keyword'] = customFiltersKeyword;
            }

            if (customFiltersStatus) {
                localVarQueryParameter['CustomFilters.Status'] = customFiltersStatus;
            }

            if (customFiltersStartDate !== undefined) {
                localVarQueryParameter['CustomFilters.StartDate'] = (customFiltersStartDate as any instanceof Date) ?
                    (customFiltersStartDate as any).toISOString() :
                    customFiltersStartDate;
            }

            if (customFiltersEndDate !== undefined) {
                localVarQueryParameter['CustomFilters.EndDate'] = (customFiltersEndDate as any instanceof Date) ?
                    (customFiltersEndDate as any).toISOString() :
                    customFiltersEndDate;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (orderBy) {
                localVarQueryParameter['OrderBy'] = orderBy;
            }

            if (advancedSearchFields) {
                localVarQueryParameter['AdvancedSearch.Fields'] = advancedSearchFields;
            }

            if (advancedSearchKeyword !== undefined) {
                localVarQueryParameter['AdvancedSearch.Keyword'] = advancedSearchKeyword;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (advancedFilterLogic !== undefined) {
                localVarQueryParameter['AdvancedFilter.Logic'] = advancedFilterLogic;
            }

            if (advancedFilterFilters) {
                localVarQueryParameter['AdvancedFilter.Filters'] = advancedFilterFilters;
            }

            if (advancedFilterField !== undefined) {
                localVarQueryParameter['AdvancedFilter.Field'] = advancedFilterField;
            }

            if (advancedFilterOperator !== undefined) {
                localVarQueryParameter['AdvancedFilter.Operator'] = advancedFilterOperator;
            }

            if (advancedFilterValue !== undefined) {
                localVarQueryParameter['AdvancedFilter.Value'] = advancedFilterValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send trip report via email
         * @param {SendEmailReportCommand} sendEmailReportCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerSendTripReports: async (sendEmailReportCommand: SendEmailReportCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendEmailReportCommand' is not null or undefined
            assertParamExists('managerSendTripReports', 'sendEmailReportCommand', sendEmailReportCommand)
            const localVarPath = `/api/v1/manager/send-trip-report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailReportCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update fields for Customize report.
         * @param {UpdateCustomizeFieldsCommand} updateCustomizeFieldsCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerUpdateCustomizeExportFields: async (updateCustomizeFieldsCommand: UpdateCustomizeFieldsCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCustomizeFieldsCommand' is not null or undefined
            assertParamExists('managerUpdateCustomizeExportFields', 'updateCustomizeFieldsCommand', updateCustomizeFieldsCommand)
            const localVarPath = `/api/v1/manager/customize-report-fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomizeFieldsCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagerApi - functional programming interface
 * @export
 */
export const ManagerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManagerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTripStatisticForManager(startDate?: Date, endDate?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripStatisticDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTripStatisticForManager(startDate, endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Manager approve a trip request.
         * @param {string} id 
         * @param {ApproveTripRequestCommand} approveTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managerApproveTripPlan(id: string, approveTripRequestCommand: ApproveTripRequestCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managerApproveTripPlan(id, approveTripRequestCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Download a import template file.
         * @param {DownloadImportTemplateRequest} downloadImportTemplateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managerDownloadImportTemplate(downloadImportTemplateRequest: DownloadImportTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managerDownloadImportTemplate(downloadImportTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Export a report.
         * @param {GenerateTripStatisticReportCommand} generateTripStatisticReportCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managerExport(generateTripStatisticReportCommand: GenerateTripStatisticReportCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managerExport(generateTripStatisticReportCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get fields for Customize report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managerGetCustomizeExportFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripReportGroupFieldDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managerGetCustomizeExportFields(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get trip statistics with filters by manager.
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managerGetTripStats(startDate?: Date, endDate?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TripInfoStatsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managerGetTripStats(startDate, endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rebook expired trip flight by manager.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managerRebookTrip(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managerRebookTrip(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Manager reject a trip request.
         * @param {string} id 
         * @param {RejectTripRequestCommand} rejectTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managerRejectTripRequest(id: string, rejectTripRequestCommand: RejectTripRequestCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managerRejectTripRequest(id, rejectTripRequestCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search trip request using available filters by manager.
         * @param {string} [tripInfoId] 
         * @param {string} [travelerId] 
         * @param {string} [customFiltersKeyword] 
         * @param {Array<number>} [customFiltersStatus] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managerSearch(tripInfoId?: string, travelerId?: string, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersStartDate?: Date, customFiltersEndDate?: Date, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTripSummaryInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managerSearch(tripInfoId, travelerId, customFiltersKeyword, customFiltersStatus, customFiltersStartDate, customFiltersEndDate, pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send trip report via email
         * @param {SendEmailReportCommand} sendEmailReportCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managerSendTripReports(sendEmailReportCommand: SendEmailReportCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managerSendTripReports(sendEmailReportCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update fields for Customize report.
         * @param {UpdateCustomizeFieldsCommand} updateCustomizeFieldsCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managerUpdateCustomizeExportFields(updateCustomizeFieldsCommand: UpdateCustomizeFieldsCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managerUpdateCustomizeExportFields(updateCustomizeFieldsCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ManagerApi - factory interface
 * @export
 */
export const ManagerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManagerApiFp(configuration)
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripStatisticForManager(startDate?: Date, endDate?: Date, options?: any): AxiosPromise<TripStatisticDto> {
            return localVarFp.getTripStatisticForManager(startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Manager approve a trip request.
         * @param {string} id 
         * @param {ApproveTripRequestCommand} approveTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerApproveTripPlan(id: string, approveTripRequestCommand: ApproveTripRequestCommand, options?: any): AxiosPromise<string> {
            return localVarFp.managerApproveTripPlan(id, approveTripRequestCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download a import template file.
         * @param {DownloadImportTemplateRequest} downloadImportTemplateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerDownloadImportTemplate(downloadImportTemplateRequest: DownloadImportTemplateRequest, options?: any): AxiosPromise<File> {
            return localVarFp.managerDownloadImportTemplate(downloadImportTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export a report.
         * @param {GenerateTripStatisticReportCommand} generateTripStatisticReportCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerExport(generateTripStatisticReportCommand: GenerateTripStatisticReportCommand, options?: any): AxiosPromise<File> {
            return localVarFp.managerExport(generateTripStatisticReportCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get fields for Customize report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerGetCustomizeExportFields(options?: any): AxiosPromise<TripReportGroupFieldDto> {
            return localVarFp.managerGetCustomizeExportFields(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get trip statistics with filters by manager.
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerGetTripStats(startDate?: Date, endDate?: Date, options?: any): AxiosPromise<Array<TripInfoStatsDto>> {
            return localVarFp.managerGetTripStats(startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rebook expired trip flight by manager.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerRebookTrip(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.managerRebookTrip(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Manager reject a trip request.
         * @param {string} id 
         * @param {RejectTripRequestCommand} rejectTripRequestCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerRejectTripRequest(id: string, rejectTripRequestCommand: RejectTripRequestCommand, options?: any): AxiosPromise<string> {
            return localVarFp.managerRejectTripRequest(id, rejectTripRequestCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search trip request using available filters by manager.
         * @param {string} [tripInfoId] 
         * @param {string} [travelerId] 
         * @param {string} [customFiltersKeyword] 
         * @param {Array<number>} [customFiltersStatus] 
         * @param {Date} [customFiltersStartDate] 
         * @param {Date} [customFiltersEndDate] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [orderBy] 
         * @param {Array<string>} [advancedSearchFields] 
         * @param {string} [advancedSearchKeyword] 
         * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
         * @param {string} [advancedFilterLogic] 
         * @param {Array<Filter>} [advancedFilterFilters] 
         * @param {string} [advancedFilterField] 
         * @param {string} [advancedFilterOperator] 
         * @param {any} [advancedFilterValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerSearch(tripInfoId?: string, travelerId?: string, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersStartDate?: Date, customFiltersEndDate?: Date, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: any): AxiosPromise<PaginationResponseOfTripSummaryInfoDto> {
            return localVarFp.managerSearch(tripInfoId, travelerId, customFiltersKeyword, customFiltersStatus, customFiltersStartDate, customFiltersEndDate, pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send trip report via email
         * @param {SendEmailReportCommand} sendEmailReportCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerSendTripReports(sendEmailReportCommand: SendEmailReportCommand, options?: any): AxiosPromise<File> {
            return localVarFp.managerSendTripReports(sendEmailReportCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update fields for Customize report.
         * @param {UpdateCustomizeFieldsCommand} updateCustomizeFieldsCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managerUpdateCustomizeExportFields(updateCustomizeFieldsCommand: UpdateCustomizeFieldsCommand, options?: any): AxiosPromise<void> {
            return localVarFp.managerUpdateCustomizeExportFields(updateCustomizeFieldsCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManagerApi - object-oriented interface
 * @export
 * @class ManagerApi
 * @extends {BaseAPI}
 */
export class ManagerApi extends BaseAPI {
    /**
     * 
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public getTripStatisticForManager(startDate?: Date, endDate?: Date, options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).getTripStatisticForManager(startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Manager approve a trip request.
     * @param {string} id 
     * @param {ApproveTripRequestCommand} approveTripRequestCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public managerApproveTripPlan(id: string, approveTripRequestCommand: ApproveTripRequestCommand, options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).managerApproveTripPlan(id, approveTripRequestCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download a import template file.
     * @param {DownloadImportTemplateRequest} downloadImportTemplateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public managerDownloadImportTemplate(downloadImportTemplateRequest: DownloadImportTemplateRequest, options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).managerDownloadImportTemplate(downloadImportTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export a report.
     * @param {GenerateTripStatisticReportCommand} generateTripStatisticReportCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public managerExport(generateTripStatisticReportCommand: GenerateTripStatisticReportCommand, options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).managerExport(generateTripStatisticReportCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get fields for Customize report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public managerGetCustomizeExportFields(options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).managerGetCustomizeExportFields(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get trip statistics with filters by manager.
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public managerGetTripStats(startDate?: Date, endDate?: Date, options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).managerGetTripStats(startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rebook expired trip flight by manager.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public managerRebookTrip(id: string, options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).managerRebookTrip(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Manager reject a trip request.
     * @param {string} id 
     * @param {RejectTripRequestCommand} rejectTripRequestCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public managerRejectTripRequest(id: string, rejectTripRequestCommand: RejectTripRequestCommand, options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).managerRejectTripRequest(id, rejectTripRequestCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search trip request using available filters by manager.
     * @param {string} [tripInfoId] 
     * @param {string} [travelerId] 
     * @param {string} [customFiltersKeyword] 
     * @param {Array<number>} [customFiltersStatus] 
     * @param {Date} [customFiltersStartDate] 
     * @param {Date} [customFiltersEndDate] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [orderBy] 
     * @param {Array<string>} [advancedSearchFields] 
     * @param {string} [advancedSearchKeyword] 
     * @param {string} [keyword] Keyword to Search in All the available columns of the Resource.
     * @param {string} [advancedFilterLogic] 
     * @param {Array<Filter>} [advancedFilterFilters] 
     * @param {string} [advancedFilterField] 
     * @param {string} [advancedFilterOperator] 
     * @param {any} [advancedFilterValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public managerSearch(tripInfoId?: string, travelerId?: string, customFiltersKeyword?: string, customFiltersStatus?: Array<number>, customFiltersStartDate?: Date, customFiltersEndDate?: Date, pageNumber?: number, pageSize?: number, orderBy?: Array<string>, advancedSearchFields?: Array<string>, advancedSearchKeyword?: string, keyword?: string, advancedFilterLogic?: string, advancedFilterFilters?: Array<Filter>, advancedFilterField?: string, advancedFilterOperator?: string, advancedFilterValue?: any, options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).managerSearch(tripInfoId, travelerId, customFiltersKeyword, customFiltersStatus, customFiltersStartDate, customFiltersEndDate, pageNumber, pageSize, orderBy, advancedSearchFields, advancedSearchKeyword, keyword, advancedFilterLogic, advancedFilterFilters, advancedFilterField, advancedFilterOperator, advancedFilterValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send trip report via email
     * @param {SendEmailReportCommand} sendEmailReportCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public managerSendTripReports(sendEmailReportCommand: SendEmailReportCommand, options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).managerSendTripReports(sendEmailReportCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update fields for Customize report.
     * @param {UpdateCustomizeFieldsCommand} updateCustomizeFieldsCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public managerUpdateCustomizeExportFields(updateCustomizeFieldsCommand: UpdateCustomizeFieldsCommand, options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).managerUpdateCustomizeExportFields(updateCustomizeFieldsCommand, options).then((request) => request(this.axios, this.basePath));
    }
}
