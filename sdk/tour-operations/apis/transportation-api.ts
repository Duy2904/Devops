/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTransportationRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfTransportationDto } from '../models';
// @ts-ignore
import { SearchTransportationsRequest } from '../models';
// @ts-ignore
import { TransportationDto } from '../models';
// @ts-ignore
import { UpdateTransportationRequest } from '../models';
/**
 * TransportationApi - axios parameter creator
 * @export
 */
export const TransportationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Transportation.
         * @param {string} tenant Description
         * @param {CreateTransportationRequest} createTransportationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transportationCreate: async (tenant: string, createTransportationRequest: CreateTransportationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('transportationCreate', 'tenant', tenant)
            // verify required parameter 'createTransportationRequest' is not null or undefined
            assertParamExists('transportationCreate', 'createTransportationRequest', createTransportationRequest)
            const localVarPath = `/api/v1/transportation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTransportationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Transportation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transportationDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('transportationDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('transportationDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/transportation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Transportation details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transportationGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('transportationGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('transportationGet', 'tenant', tenant)
            const localVarPath = `/api/v1/transportation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Transportation using available filters.
         * @param {string} tenant Description
         * @param {SearchTransportationsRequest} searchTransportationsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transportationSearch: async (tenant: string, searchTransportationsRequest: SearchTransportationsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('transportationSearch', 'tenant', tenant)
            // verify required parameter 'searchTransportationsRequest' is not null or undefined
            assertParamExists('transportationSearch', 'searchTransportationsRequest', searchTransportationsRequest)
            const localVarPath = `/api/v1/transportation/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchTransportationsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Transportation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTransportationRequest} updateTransportationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transportationUpdate: async (id: string, tenant: string, updateTransportationRequest: UpdateTransportationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('transportationUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('transportationUpdate', 'tenant', tenant)
            // verify required parameter 'updateTransportationRequest' is not null or undefined
            assertParamExists('transportationUpdate', 'updateTransportationRequest', updateTransportationRequest)
            const localVarPath = `/api/v1/transportation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTransportationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransportationApi - functional programming interface
 * @export
 */
export const TransportationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransportationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Transportation.
         * @param {string} tenant Description
         * @param {CreateTransportationRequest} createTransportationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transportationCreate(tenant: string, createTransportationRequest: CreateTransportationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transportationCreate(tenant, createTransportationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Transportation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transportationDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transportationDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Transportation details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transportationGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transportationGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Transportation using available filters.
         * @param {string} tenant Description
         * @param {SearchTransportationsRequest} searchTransportationsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transportationSearch(tenant: string, searchTransportationsRequest: SearchTransportationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTransportationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transportationSearch(tenant, searchTransportationsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Transportation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTransportationRequest} updateTransportationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transportationUpdate(id: string, tenant: string, updateTransportationRequest: UpdateTransportationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transportationUpdate(id, tenant, updateTransportationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransportationApi - factory interface
 * @export
 */
export const TransportationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransportationApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Transportation.
         * @param {string} tenant Description
         * @param {CreateTransportationRequest} createTransportationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transportationCreate(tenant: string, createTransportationRequest: CreateTransportationRequest, options?: any): AxiosPromise<string> {
            return localVarFp.transportationCreate(tenant, createTransportationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Transportation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transportationDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.transportationDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Transportation details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transportationGet(id: string, tenant: string, options?: any): AxiosPromise<TransportationDto> {
            return localVarFp.transportationGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Transportation using available filters.
         * @param {string} tenant Description
         * @param {SearchTransportationsRequest} searchTransportationsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transportationSearch(tenant: string, searchTransportationsRequest: SearchTransportationsRequest, options?: any): AxiosPromise<PaginationResponseOfTransportationDto> {
            return localVarFp.transportationSearch(tenant, searchTransportationsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Transportation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTransportationRequest} updateTransportationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transportationUpdate(id: string, tenant: string, updateTransportationRequest: UpdateTransportationRequest, options?: any): AxiosPromise<string> {
            return localVarFp.transportationUpdate(id, tenant, updateTransportationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransportationApi - object-oriented interface
 * @export
 * @class TransportationApi
 * @extends {BaseAPI}
 */
export class TransportationApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Transportation.
     * @param {string} tenant Description
     * @param {CreateTransportationRequest} createTransportationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportationApi
     */
    public transportationCreate(tenant: string, createTransportationRequest: CreateTransportationRequest, options?: AxiosRequestConfig) {
        return TransportationApiFp(this.configuration).transportationCreate(tenant, createTransportationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Transportation.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportationApi
     */
    public transportationDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TransportationApiFp(this.configuration).transportationDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Transportation details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportationApi
     */
    public transportationGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TransportationApiFp(this.configuration).transportationGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Transportation using available filters.
     * @param {string} tenant Description
     * @param {SearchTransportationsRequest} searchTransportationsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportationApi
     */
    public transportationSearch(tenant: string, searchTransportationsRequest: SearchTransportationsRequest, options?: AxiosRequestConfig) {
        return TransportationApiFp(this.configuration).transportationSearch(tenant, searchTransportationsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Transportation.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateTransportationRequest} updateTransportationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportationApi
     */
    public transportationUpdate(id: string, tenant: string, updateTransportationRequest: UpdateTransportationRequest, options?: AxiosRequestConfig) {
        return TransportationApiFp(this.configuration).transportationUpdate(id, tenant, updateTransportationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
