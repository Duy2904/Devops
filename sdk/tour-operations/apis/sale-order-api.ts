/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApproveSaleOrderGuaranteeRequest } from '../models';
// @ts-ignore
import { CancelSaleOrderResponse } from '../models';
// @ts-ignore
import { CancelSaleOrdersRequest } from '../models';
// @ts-ignore
import { ConfirmSaleOrderOverloadRequest } from '../models';
// @ts-ignore
import { ConfirmSaleOrderRequest } from '../models';
// @ts-ignore
import { ConfirmSaleOrderResponse } from '../models';
// @ts-ignore
import { CreateSaleOrderRequest } from '../models';
// @ts-ignore
import { CreateSaleOrderTransferRequest } from '../models';
// @ts-ignore
import { DocumentType } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { EstimateDiscountRequest } from '../models';
// @ts-ignore
import { EstimateDiscountResponse } from '../models';
// @ts-ignore
import { ExportSaleOrderRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { RefundRequest } from '../models';
// @ts-ignore
import { SaleOrderDto } from '../models';
// @ts-ignore
import { SaleOrderHistoryDto } from '../models';
// @ts-ignore
import { SaleOrderViewPaginationDto } from '../models';
// @ts-ignore
import { SaleOrdersOfTourDto } from '../models';
// @ts-ignore
import { SearchReceivableVouchersBySaleOrderIdResponse } from '../models';
// @ts-ignore
import { SearchSaleOrdersViewRequest } from '../models';
// @ts-ignore
import { SendGuaranteeApprovalRequest } from '../models';
// @ts-ignore
import { UpdateSaleOrderRequest } from '../models';
/**
 * SaleOrderApi - axios parameter creator
 * @export
 */
export const SaleOrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approval SaleOrder Guarantee.
         * @param {string} tenant Description
         * @param {ApproveSaleOrderGuaranteeRequest} approveSaleOrderGuaranteeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderApproveSaleOrderGuarantee: async (tenant: string, approveSaleOrderGuaranteeRequest: ApproveSaleOrderGuaranteeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderApproveSaleOrderGuarantee', 'tenant', tenant)
            // verify required parameter 'approveSaleOrderGuaranteeRequest' is not null or undefined
            assertParamExists('saleOrderApproveSaleOrderGuarantee', 'approveSaleOrderGuaranteeRequest', approveSaleOrderGuaranteeRequest)
            const localVarPath = `/api/v1/saleorder/approve-guarantee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approveSaleOrderGuaranteeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel SaleOrders.
         * @param {string} tenant Description
         * @param {CancelSaleOrdersRequest} cancelSaleOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderCancel: async (tenant: string, cancelSaleOrdersRequest: CancelSaleOrdersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderCancel', 'tenant', tenant)
            // verify required parameter 'cancelSaleOrdersRequest' is not null or undefined
            assertParamExists('saleOrderCancel', 'cancelSaleOrdersRequest', cancelSaleOrdersRequest)
            const localVarPath = `/api/v1/saleorder/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelSaleOrdersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel a SaleOrder.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderCancelSingle: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saleOrderCancelSingle', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderCancelSingle', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorder/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm SaleOrder.
         * @param {string} tenant Description
         * @param {ConfirmSaleOrderRequest} confirmSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderConfirm: async (tenant: string, confirmSaleOrderRequest: ConfirmSaleOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderConfirm', 'tenant', tenant)
            // verify required parameter 'confirmSaleOrderRequest' is not null or undefined
            assertParamExists('saleOrderConfirm', 'confirmSaleOrderRequest', confirmSaleOrderRequest)
            const localVarPath = `/api/v1/saleorder/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmSaleOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm SaleOrder Overload.
         * @param {string} tenant Description
         * @param {ConfirmSaleOrderOverloadRequest} confirmSaleOrderOverloadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderConfirmSaleOrderOverload: async (tenant: string, confirmSaleOrderOverloadRequest: ConfirmSaleOrderOverloadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderConfirmSaleOrderOverload', 'tenant', tenant)
            // verify required parameter 'confirmSaleOrderOverloadRequest' is not null or undefined
            assertParamExists('saleOrderConfirmSaleOrderOverload', 'confirmSaleOrderOverloadRequest', confirmSaleOrderOverloadRequest)
            const localVarPath = `/api/v1/saleorder/approve-overload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmSaleOrderOverloadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new SaleOrder.
         * @param {string} tenant Description
         * @param {CreateSaleOrderRequest} createSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderCreate: async (tenant: string, createSaleOrderRequest: CreateSaleOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderCreate', 'tenant', tenant)
            // verify required parameter 'createSaleOrderRequest' is not null or undefined
            assertParamExists('saleOrderCreate', 'createSaleOrderRequest', createSaleOrderRequest)
            const localVarPath = `/api/v1/saleorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSaleOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new SaleOrder Transfer.
         * @param {string} tenant Description
         * @param {CreateSaleOrderTransferRequest} createSaleOrderTransferRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderCreateTransfer: async (tenant: string, createSaleOrderTransferRequest: CreateSaleOrderTransferRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderCreateTransfer', 'tenant', tenant)
            // verify required parameter 'createSaleOrderTransferRequest' is not null or undefined
            assertParamExists('saleOrderCreateTransfer', 'createSaleOrderTransferRequest', createSaleOrderTransferRequest)
            const localVarPath = `/api/v1/saleorder/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSaleOrderTransferRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a SaleOrder.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saleOrderDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorder/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderDownload: async (tenant: string, id?: string, type?: DocumentType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderDownload', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorder/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Estimate Discount For SaleOrder.
         * @param {string} tenant Description
         * @param {EstimateDiscountRequest} estimateDiscountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderEstimateDiscount: async (tenant: string, estimateDiscountRequest: EstimateDiscountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderEstimateDiscount', 'tenant', tenant)
            // verify required parameter 'estimateDiscountRequest' is not null or undefined
            assertParamExists('saleOrderEstimateDiscount', 'estimateDiscountRequest', estimateDiscountRequest)
            const localVarPath = `/api/v1/saleorder/estimate-discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(estimateDiscountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportSaleOrderRequest} exportSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderExport: async (tenant: string, exportSaleOrderRequest: ExportSaleOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderExport', 'tenant', tenant)
            // verify required parameter 'exportSaleOrderRequest' is not null or undefined
            assertParamExists('saleOrderExport', 'exportSaleOrderRequest', exportSaleOrderRequest)
            const localVarPath = `/api/v1/saleorder/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportSaleOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get SaleOrder details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saleOrderGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderGet', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorder/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get booked SaleOrders.
         * @param {string} tenant Description
         * @param {string} [tourScheduleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetBooked: async (tenant: string, tourScheduleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderGetBooked', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorder/booked-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tourScheduleId !== undefined) {
                localVarQueryParameter['tourScheduleId'] = tourScheduleId;
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get History Approval.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetHistoryApproval: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saleOrderGetHistoryApproval', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderGetHistoryApproval', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorder/{id}/history-approval`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get RefundVouchers of sale order.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetRefundVouchers: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saleOrderGetRefundVouchers', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderGetRefundVouchers', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorder/{id}/refund-vouchers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get reserved SaleOrders.
         * @param {string} tenant Description
         * @param {string} [tourScheduleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetReserved: async (tenant: string, tourScheduleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderGetReserved', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorder/reserved-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tourScheduleId !== undefined) {
                localVarQueryParameter['tourScheduleId'] = tourScheduleId;
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate SaleOrder No.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetSaleOrderNo: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderGetSaleOrderNo', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorder/gen-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get SaleOrder details with transfer.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetTransfer: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saleOrderGetTransfer', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderGetTransfer', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorder/{id}/transfer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Migrate GroupId.
         * @param {string} tenant Description
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderMigrateGroupId: async (tenant: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderMigrateGroupId', 'tenant', tenant)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('saleOrderMigrateGroupId', 'body', body)
            const localVarPath = `/api/v1/saleorder/migrate-groupid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search SaleOrder using available filters.
         * @param {string} tenant Description
         * @param {SearchSaleOrdersViewRequest} searchSaleOrdersViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderSearch: async (tenant: string, searchSaleOrdersViewRequest: SearchSaleOrdersViewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderSearch', 'tenant', tenant)
            // verify required parameter 'searchSaleOrdersViewRequest' is not null or undefined
            assertParamExists('saleOrderSearch', 'searchSaleOrdersViewRequest', searchSaleOrdersViewRequest)
            const localVarPath = `/api/v1/saleorder/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchSaleOrdersViewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send Approval SaleOrder Guarantee.
         * @param {string} tenant Description
         * @param {SendGuaranteeApprovalRequest} sendGuaranteeApprovalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderSendGuaranteeApproval: async (tenant: string, sendGuaranteeApprovalRequest: SendGuaranteeApprovalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderSendGuaranteeApproval', 'tenant', tenant)
            // verify required parameter 'sendGuaranteeApprovalRequest' is not null or undefined
            assertParamExists('saleOrderSendGuaranteeApproval', 'sendGuaranteeApprovalRequest', sendGuaranteeApprovalRequest)
            const localVarPath = `/api/v1/saleorder/send-guarantee-approval`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendGuaranteeApprovalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Order Status Refund.
         * @param {string} tenant Description
         * @param {RefundRequest} refundRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderSendRefund: async (tenant: string, refundRequest: RefundRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderSendRefund', 'tenant', tenant)
            // verify required parameter 'refundRequest' is not null or undefined
            assertParamExists('saleOrderSendRefund', 'refundRequest', refundRequest)
            const localVarPath = `/api/v1/saleorder/refund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refundRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a SaleOrder.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateSaleOrderRequest} updateSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderUpdate: async (id: string, tenant: string, updateSaleOrderRequest: UpdateSaleOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saleOrderUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderUpdate', 'tenant', tenant)
            // verify required parameter 'updateSaleOrderRequest' is not null or undefined
            assertParamExists('saleOrderUpdate', 'updateSaleOrderRequest', updateSaleOrderRequest)
            const localVarPath = `/api/v1/saleorder/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSaleOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search SaleOrder using available filters with page Voucher.
         * @param {string} tenant Description
         * @param {SearchSaleOrdersViewRequest} searchSaleOrdersViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderVoucherSearch: async (tenant: string, searchSaleOrdersViewRequest: SearchSaleOrdersViewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderVoucherSearch', 'tenant', tenant)
            // verify required parameter 'searchSaleOrdersViewRequest' is not null or undefined
            assertParamExists('saleOrderVoucherSearch', 'searchSaleOrdersViewRequest', searchSaleOrdersViewRequest)
            const localVarPath = `/api/v1/saleorder/voucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchSaleOrdersViewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SaleOrderApi - functional programming interface
 * @export
 */
export const SaleOrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SaleOrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Approval SaleOrder Guarantee.
         * @param {string} tenant Description
         * @param {ApproveSaleOrderGuaranteeRequest} approveSaleOrderGuaranteeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderApproveSaleOrderGuarantee(tenant: string, approveSaleOrderGuaranteeRequest: ApproveSaleOrderGuaranteeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderApproveSaleOrderGuarantee(tenant, approveSaleOrderGuaranteeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel SaleOrders.
         * @param {string} tenant Description
         * @param {CancelSaleOrdersRequest} cancelSaleOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderCancel(tenant: string, cancelSaleOrdersRequest: CancelSaleOrdersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelSaleOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderCancel(tenant, cancelSaleOrdersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel a SaleOrder.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderCancelSingle(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderCancelSingle(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Confirm SaleOrder.
         * @param {string} tenant Description
         * @param {ConfirmSaleOrderRequest} confirmSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderConfirm(tenant: string, confirmSaleOrderRequest: ConfirmSaleOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmSaleOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderConfirm(tenant, confirmSaleOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Confirm SaleOrder Overload.
         * @param {string} tenant Description
         * @param {ConfirmSaleOrderOverloadRequest} confirmSaleOrderOverloadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderConfirmSaleOrderOverload(tenant: string, confirmSaleOrderOverloadRequest: ConfirmSaleOrderOverloadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderConfirmSaleOrderOverload(tenant, confirmSaleOrderOverloadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new SaleOrder.
         * @param {string} tenant Description
         * @param {CreateSaleOrderRequest} createSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderCreate(tenant: string, createSaleOrderRequest: CreateSaleOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderCreate(tenant, createSaleOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new SaleOrder Transfer.
         * @param {string} tenant Description
         * @param {CreateSaleOrderTransferRequest} createSaleOrderTransferRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderCreateTransfer(tenant: string, createSaleOrderTransferRequest: CreateSaleOrderTransferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderCreateTransfer(tenant, createSaleOrderTransferRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a SaleOrder.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderDownload(tenant: string, id?: string, type?: DocumentType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderDownload(tenant, id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Estimate Discount For SaleOrder.
         * @param {string} tenant Description
         * @param {EstimateDiscountRequest} estimateDiscountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderEstimateDiscount(tenant: string, estimateDiscountRequest: EstimateDiscountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateDiscountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderEstimateDiscount(tenant, estimateDiscountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportSaleOrderRequest} exportSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderExport(tenant: string, exportSaleOrderRequest: ExportSaleOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderExport(tenant, exportSaleOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get SaleOrder details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get booked SaleOrders.
         * @param {string} tenant Description
         * @param {string} [tourScheduleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderGetBooked(tenant: string, tourScheduleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleOrdersOfTourDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderGetBooked(tenant, tourScheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get History Approval.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderGetHistoryApproval(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SaleOrderHistoryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderGetHistoryApproval(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get RefundVouchers of sale order.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderGetRefundVouchers(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchReceivableVouchersBySaleOrderIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderGetRefundVouchers(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get reserved SaleOrders.
         * @param {string} tenant Description
         * @param {string} [tourScheduleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderGetReserved(tenant: string, tourScheduleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleOrdersOfTourDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderGetReserved(tenant, tourScheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate SaleOrder No.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderGetSaleOrderNo(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderGetSaleOrderNo(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get SaleOrder details with transfer.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderGetTransfer(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderGetTransfer(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Migrate GroupId.
         * @param {string} tenant Description
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderMigrateGroupId(tenant: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderMigrateGroupId(tenant, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search SaleOrder using available filters.
         * @param {string} tenant Description
         * @param {SearchSaleOrdersViewRequest} searchSaleOrdersViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderSearch(tenant: string, searchSaleOrdersViewRequest: SearchSaleOrdersViewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleOrderViewPaginationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderSearch(tenant, searchSaleOrdersViewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send Approval SaleOrder Guarantee.
         * @param {string} tenant Description
         * @param {SendGuaranteeApprovalRequest} sendGuaranteeApprovalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderSendGuaranteeApproval(tenant: string, sendGuaranteeApprovalRequest: SendGuaranteeApprovalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderSendGuaranteeApproval(tenant, sendGuaranteeApprovalRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Order Status Refund.
         * @param {string} tenant Description
         * @param {RefundRequest} refundRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderSendRefund(tenant: string, refundRequest: RefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderSendRefund(tenant, refundRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a SaleOrder.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateSaleOrderRequest} updateSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderUpdate(id: string, tenant: string, updateSaleOrderRequest: UpdateSaleOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderUpdate(id, tenant, updateSaleOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search SaleOrder using available filters with page Voucher.
         * @param {string} tenant Description
         * @param {SearchSaleOrdersViewRequest} searchSaleOrdersViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderVoucherSearch(tenant: string, searchSaleOrdersViewRequest: SearchSaleOrdersViewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleOrderViewPaginationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderVoucherSearch(tenant, searchSaleOrdersViewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SaleOrderApi - factory interface
 * @export
 */
export const SaleOrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SaleOrderApiFp(configuration)
    return {
        /**
         * 
         * @summary Approval SaleOrder Guarantee.
         * @param {string} tenant Description
         * @param {ApproveSaleOrderGuaranteeRequest} approveSaleOrderGuaranteeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderApproveSaleOrderGuarantee(tenant: string, approveSaleOrderGuaranteeRequest: ApproveSaleOrderGuaranteeRequest, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.saleOrderApproveSaleOrderGuarantee(tenant, approveSaleOrderGuaranteeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel SaleOrders.
         * @param {string} tenant Description
         * @param {CancelSaleOrdersRequest} cancelSaleOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderCancel(tenant: string, cancelSaleOrdersRequest: CancelSaleOrdersRequest, options?: any): AxiosPromise<CancelSaleOrderResponse> {
            return localVarFp.saleOrderCancel(tenant, cancelSaleOrdersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel a SaleOrder.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderCancelSingle(id: string, tenant: string, options?: any): AxiosPromise<void> {
            return localVarFp.saleOrderCancelSingle(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm SaleOrder.
         * @param {string} tenant Description
         * @param {ConfirmSaleOrderRequest} confirmSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderConfirm(tenant: string, confirmSaleOrderRequest: ConfirmSaleOrderRequest, options?: any): AxiosPromise<ConfirmSaleOrderResponse> {
            return localVarFp.saleOrderConfirm(tenant, confirmSaleOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm SaleOrder Overload.
         * @param {string} tenant Description
         * @param {ConfirmSaleOrderOverloadRequest} confirmSaleOrderOverloadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderConfirmSaleOrderOverload(tenant: string, confirmSaleOrderOverloadRequest: ConfirmSaleOrderOverloadRequest, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.saleOrderConfirmSaleOrderOverload(tenant, confirmSaleOrderOverloadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new SaleOrder.
         * @param {string} tenant Description
         * @param {CreateSaleOrderRequest} createSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderCreate(tenant: string, createSaleOrderRequest: CreateSaleOrderRequest, options?: any): AxiosPromise<string> {
            return localVarFp.saleOrderCreate(tenant, createSaleOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new SaleOrder Transfer.
         * @param {string} tenant Description
         * @param {CreateSaleOrderTransferRequest} createSaleOrderTransferRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderCreateTransfer(tenant: string, createSaleOrderTransferRequest: CreateSaleOrderTransferRequest, options?: any): AxiosPromise<string> {
            return localVarFp.saleOrderCreateTransfer(tenant, createSaleOrderTransferRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a SaleOrder.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.saleOrderDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderDownload(tenant: string, id?: string, type?: DocumentType, options?: any): AxiosPromise<string> {
            return localVarFp.saleOrderDownload(tenant, id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Estimate Discount For SaleOrder.
         * @param {string} tenant Description
         * @param {EstimateDiscountRequest} estimateDiscountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderEstimateDiscount(tenant: string, estimateDiscountRequest: EstimateDiscountRequest, options?: any): AxiosPromise<EstimateDiscountResponse> {
            return localVarFp.saleOrderEstimateDiscount(tenant, estimateDiscountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportSaleOrderRequest} exportSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderExport(tenant: string, exportSaleOrderRequest: ExportSaleOrderRequest, options?: any): AxiosPromise<File> {
            return localVarFp.saleOrderExport(tenant, exportSaleOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get SaleOrder details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGet(id: string, tenant: string, options?: any): AxiosPromise<SaleOrderDto> {
            return localVarFp.saleOrderGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get booked SaleOrders.
         * @param {string} tenant Description
         * @param {string} [tourScheduleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetBooked(tenant: string, tourScheduleId?: string, options?: any): AxiosPromise<SaleOrdersOfTourDto> {
            return localVarFp.saleOrderGetBooked(tenant, tourScheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get History Approval.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetHistoryApproval(id: string, tenant: string, options?: any): AxiosPromise<Array<SaleOrderHistoryDto>> {
            return localVarFp.saleOrderGetHistoryApproval(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get RefundVouchers of sale order.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetRefundVouchers(id: string, tenant: string, options?: any): AxiosPromise<SearchReceivableVouchersBySaleOrderIdResponse> {
            return localVarFp.saleOrderGetRefundVouchers(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get reserved SaleOrders.
         * @param {string} tenant Description
         * @param {string} [tourScheduleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetReserved(tenant: string, tourScheduleId?: string, options?: any): AxiosPromise<SaleOrdersOfTourDto> {
            return localVarFp.saleOrderGetReserved(tenant, tourScheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate SaleOrder No.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetSaleOrderNo(tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.saleOrderGetSaleOrderNo(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get SaleOrder details with transfer.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderGetTransfer(id: string, tenant: string, options?: any): AxiosPromise<SaleOrderDto> {
            return localVarFp.saleOrderGetTransfer(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Migrate GroupId.
         * @param {string} tenant Description
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderMigrateGroupId(tenant: string, body: object, options?: any): AxiosPromise<void> {
            return localVarFp.saleOrderMigrateGroupId(tenant, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search SaleOrder using available filters.
         * @param {string} tenant Description
         * @param {SearchSaleOrdersViewRequest} searchSaleOrdersViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderSearch(tenant: string, searchSaleOrdersViewRequest: SearchSaleOrdersViewRequest, options?: any): AxiosPromise<SaleOrderViewPaginationDto> {
            return localVarFp.saleOrderSearch(tenant, searchSaleOrdersViewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send Approval SaleOrder Guarantee.
         * @param {string} tenant Description
         * @param {SendGuaranteeApprovalRequest} sendGuaranteeApprovalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderSendGuaranteeApproval(tenant: string, sendGuaranteeApprovalRequest: SendGuaranteeApprovalRequest, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.saleOrderSendGuaranteeApproval(tenant, sendGuaranteeApprovalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Order Status Refund.
         * @param {string} tenant Description
         * @param {RefundRequest} refundRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderSendRefund(tenant: string, refundRequest: RefundRequest, options?: any): AxiosPromise<void> {
            return localVarFp.saleOrderSendRefund(tenant, refundRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a SaleOrder.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateSaleOrderRequest} updateSaleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderUpdate(id: string, tenant: string, updateSaleOrderRequest: UpdateSaleOrderRequest, options?: any): AxiosPromise<string> {
            return localVarFp.saleOrderUpdate(id, tenant, updateSaleOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search SaleOrder using available filters with page Voucher.
         * @param {string} tenant Description
         * @param {SearchSaleOrdersViewRequest} searchSaleOrdersViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderVoucherSearch(tenant: string, searchSaleOrdersViewRequest: SearchSaleOrdersViewRequest, options?: any): AxiosPromise<SaleOrderViewPaginationDto> {
            return localVarFp.saleOrderVoucherSearch(tenant, searchSaleOrdersViewRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SaleOrderApi - object-oriented interface
 * @export
 * @class SaleOrderApi
 * @extends {BaseAPI}
 */
export class SaleOrderApi extends BaseAPI {
    /**
     * 
     * @summary Approval SaleOrder Guarantee.
     * @param {string} tenant Description
     * @param {ApproveSaleOrderGuaranteeRequest} approveSaleOrderGuaranteeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderApproveSaleOrderGuarantee(tenant: string, approveSaleOrderGuaranteeRequest: ApproveSaleOrderGuaranteeRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderApproveSaleOrderGuarantee(tenant, approveSaleOrderGuaranteeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel SaleOrders.
     * @param {string} tenant Description
     * @param {CancelSaleOrdersRequest} cancelSaleOrdersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderCancel(tenant: string, cancelSaleOrdersRequest: CancelSaleOrdersRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderCancel(tenant, cancelSaleOrdersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel a SaleOrder.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderCancelSingle(id: string, tenant: string, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderCancelSingle(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm SaleOrder.
     * @param {string} tenant Description
     * @param {ConfirmSaleOrderRequest} confirmSaleOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderConfirm(tenant: string, confirmSaleOrderRequest: ConfirmSaleOrderRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderConfirm(tenant, confirmSaleOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm SaleOrder Overload.
     * @param {string} tenant Description
     * @param {ConfirmSaleOrderOverloadRequest} confirmSaleOrderOverloadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderConfirmSaleOrderOverload(tenant: string, confirmSaleOrderOverloadRequest: ConfirmSaleOrderOverloadRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderConfirmSaleOrderOverload(tenant, confirmSaleOrderOverloadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new SaleOrder.
     * @param {string} tenant Description
     * @param {CreateSaleOrderRequest} createSaleOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderCreate(tenant: string, createSaleOrderRequest: CreateSaleOrderRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderCreate(tenant, createSaleOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new SaleOrder Transfer.
     * @param {string} tenant Description
     * @param {CreateSaleOrderTransferRequest} createSaleOrderTransferRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderCreateTransfer(tenant: string, createSaleOrderTransferRequest: CreateSaleOrderTransferRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderCreateTransfer(tenant, createSaleOrderTransferRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a SaleOrder.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Description
     * @param {string} [id] 
     * @param {DocumentType} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderDownload(tenant: string, id?: string, type?: DocumentType, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderDownload(tenant, id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Estimate Discount For SaleOrder.
     * @param {string} tenant Description
     * @param {EstimateDiscountRequest} estimateDiscountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderEstimateDiscount(tenant: string, estimateDiscountRequest: EstimateDiscountRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderEstimateDiscount(tenant, estimateDiscountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Description
     * @param {ExportSaleOrderRequest} exportSaleOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderExport(tenant: string, exportSaleOrderRequest: ExportSaleOrderRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderExport(tenant, exportSaleOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get SaleOrder details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get booked SaleOrders.
     * @param {string} tenant Description
     * @param {string} [tourScheduleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderGetBooked(tenant: string, tourScheduleId?: string, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderGetBooked(tenant, tourScheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get History Approval.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderGetHistoryApproval(id: string, tenant: string, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderGetHistoryApproval(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get RefundVouchers of sale order.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderGetRefundVouchers(id: string, tenant: string, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderGetRefundVouchers(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get reserved SaleOrders.
     * @param {string} tenant Description
     * @param {string} [tourScheduleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderGetReserved(tenant: string, tourScheduleId?: string, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderGetReserved(tenant, tourScheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate SaleOrder No.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderGetSaleOrderNo(tenant: string, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderGetSaleOrderNo(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get SaleOrder details with transfer.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderGetTransfer(id: string, tenant: string, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderGetTransfer(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Migrate GroupId.
     * @param {string} tenant Description
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderMigrateGroupId(tenant: string, body: object, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderMigrateGroupId(tenant, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search SaleOrder using available filters.
     * @param {string} tenant Description
     * @param {SearchSaleOrdersViewRequest} searchSaleOrdersViewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderSearch(tenant: string, searchSaleOrdersViewRequest: SearchSaleOrdersViewRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderSearch(tenant, searchSaleOrdersViewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send Approval SaleOrder Guarantee.
     * @param {string} tenant Description
     * @param {SendGuaranteeApprovalRequest} sendGuaranteeApprovalRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderSendGuaranteeApproval(tenant: string, sendGuaranteeApprovalRequest: SendGuaranteeApprovalRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderSendGuaranteeApproval(tenant, sendGuaranteeApprovalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Order Status Refund.
     * @param {string} tenant Description
     * @param {RefundRequest} refundRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderSendRefund(tenant: string, refundRequest: RefundRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderSendRefund(tenant, refundRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a SaleOrder.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateSaleOrderRequest} updateSaleOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderUpdate(id: string, tenant: string, updateSaleOrderRequest: UpdateSaleOrderRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderUpdate(id, tenant, updateSaleOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search SaleOrder using available filters with page Voucher.
     * @param {string} tenant Description
     * @param {SearchSaleOrdersViewRequest} searchSaleOrdersViewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderApi
     */
    public saleOrderVoucherSearch(tenant: string, searchSaleOrdersViewRequest: SearchSaleOrdersViewRequest, options?: AxiosRequestConfig) {
        return SaleOrderApiFp(this.configuration).saleOrderVoucherSearch(tenant, searchSaleOrdersViewRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
