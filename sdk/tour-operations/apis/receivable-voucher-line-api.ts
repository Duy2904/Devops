/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateReceivableVoucherLineRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfReceivableVoucherLineDto } from '../models';
// @ts-ignore
import { ReceivableVoucherLineDto } from '../models';
// @ts-ignore
import { SearchReceivableVoucherLinesRequest } from '../models';
// @ts-ignore
import { UpdateReceivableVoucherLineRequest } from '../models';
/**
 * ReceivableVoucherLineApi - axios parameter creator
 * @export
 */
export const ReceivableVoucherLineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new ReceivableVoucherLine.
         * @param {string} tenant Description
         * @param {CreateReceivableVoucherLineRequest} createReceivableVoucherLineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherLineCreate: async (tenant: string, createReceivableVoucherLineRequest: CreateReceivableVoucherLineRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherLineCreate', 'tenant', tenant)
            // verify required parameter 'createReceivableVoucherLineRequest' is not null or undefined
            assertParamExists('receivableVoucherLineCreate', 'createReceivableVoucherLineRequest', createReceivableVoucherLineRequest)
            const localVarPath = `/api/v1/receivablevoucherline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReceivableVoucherLineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a ReceivableVoucherLine.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherLineDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('receivableVoucherLineDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherLineDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/receivablevoucherline/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ReceivableVoucherLine details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherLineGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('receivableVoucherLineGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherLineGet', 'tenant', tenant)
            const localVarPath = `/api/v1/receivablevoucherline/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search ReceivableVoucherLine using available filters.
         * @param {string} tenant Description
         * @param {SearchReceivableVoucherLinesRequest} searchReceivableVoucherLinesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherLineSearch: async (tenant: string, searchReceivableVoucherLinesRequest: SearchReceivableVoucherLinesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherLineSearch', 'tenant', tenant)
            // verify required parameter 'searchReceivableVoucherLinesRequest' is not null or undefined
            assertParamExists('receivableVoucherLineSearch', 'searchReceivableVoucherLinesRequest', searchReceivableVoucherLinesRequest)
            const localVarPath = `/api/v1/receivablevoucherline/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchReceivableVoucherLinesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a ReceivableVoucherLine.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateReceivableVoucherLineRequest} updateReceivableVoucherLineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherLineUpdate: async (id: string, tenant: string, updateReceivableVoucherLineRequest: UpdateReceivableVoucherLineRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('receivableVoucherLineUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherLineUpdate', 'tenant', tenant)
            // verify required parameter 'updateReceivableVoucherLineRequest' is not null or undefined
            assertParamExists('receivableVoucherLineUpdate', 'updateReceivableVoucherLineRequest', updateReceivableVoucherLineRequest)
            const localVarPath = `/api/v1/receivablevoucherline/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReceivableVoucherLineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReceivableVoucherLineApi - functional programming interface
 * @export
 */
export const ReceivableVoucherLineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReceivableVoucherLineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new ReceivableVoucherLine.
         * @param {string} tenant Description
         * @param {CreateReceivableVoucherLineRequest} createReceivableVoucherLineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherLineCreate(tenant: string, createReceivableVoucherLineRequest: CreateReceivableVoucherLineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherLineCreate(tenant, createReceivableVoucherLineRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a ReceivableVoucherLine.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherLineDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherLineDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get ReceivableVoucherLine details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherLineGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceivableVoucherLineDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherLineGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search ReceivableVoucherLine using available filters.
         * @param {string} tenant Description
         * @param {SearchReceivableVoucherLinesRequest} searchReceivableVoucherLinesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherLineSearch(tenant: string, searchReceivableVoucherLinesRequest: SearchReceivableVoucherLinesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfReceivableVoucherLineDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherLineSearch(tenant, searchReceivableVoucherLinesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a ReceivableVoucherLine.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateReceivableVoucherLineRequest} updateReceivableVoucherLineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherLineUpdate(id: string, tenant: string, updateReceivableVoucherLineRequest: UpdateReceivableVoucherLineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherLineUpdate(id, tenant, updateReceivableVoucherLineRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReceivableVoucherLineApi - factory interface
 * @export
 */
export const ReceivableVoucherLineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReceivableVoucherLineApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new ReceivableVoucherLine.
         * @param {string} tenant Description
         * @param {CreateReceivableVoucherLineRequest} createReceivableVoucherLineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherLineCreate(tenant: string, createReceivableVoucherLineRequest: CreateReceivableVoucherLineRequest, options?: any): AxiosPromise<string> {
            return localVarFp.receivableVoucherLineCreate(tenant, createReceivableVoucherLineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a ReceivableVoucherLine.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherLineDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.receivableVoucherLineDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ReceivableVoucherLine details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherLineGet(id: string, tenant: string, options?: any): AxiosPromise<ReceivableVoucherLineDto> {
            return localVarFp.receivableVoucherLineGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search ReceivableVoucherLine using available filters.
         * @param {string} tenant Description
         * @param {SearchReceivableVoucherLinesRequest} searchReceivableVoucherLinesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherLineSearch(tenant: string, searchReceivableVoucherLinesRequest: SearchReceivableVoucherLinesRequest, options?: any): AxiosPromise<PaginationResponseOfReceivableVoucherLineDto> {
            return localVarFp.receivableVoucherLineSearch(tenant, searchReceivableVoucherLinesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a ReceivableVoucherLine.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateReceivableVoucherLineRequest} updateReceivableVoucherLineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherLineUpdate(id: string, tenant: string, updateReceivableVoucherLineRequest: UpdateReceivableVoucherLineRequest, options?: any): AxiosPromise<string> {
            return localVarFp.receivableVoucherLineUpdate(id, tenant, updateReceivableVoucherLineRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReceivableVoucherLineApi - object-oriented interface
 * @export
 * @class ReceivableVoucherLineApi
 * @extends {BaseAPI}
 */
export class ReceivableVoucherLineApi extends BaseAPI {
    /**
     * 
     * @summary Create a new ReceivableVoucherLine.
     * @param {string} tenant Description
     * @param {CreateReceivableVoucherLineRequest} createReceivableVoucherLineRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherLineApi
     */
    public receivableVoucherLineCreate(tenant: string, createReceivableVoucherLineRequest: CreateReceivableVoucherLineRequest, options?: AxiosRequestConfig) {
        return ReceivableVoucherLineApiFp(this.configuration).receivableVoucherLineCreate(tenant, createReceivableVoucherLineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a ReceivableVoucherLine.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherLineApi
     */
    public receivableVoucherLineDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return ReceivableVoucherLineApiFp(this.configuration).receivableVoucherLineDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ReceivableVoucherLine details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherLineApi
     */
    public receivableVoucherLineGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return ReceivableVoucherLineApiFp(this.configuration).receivableVoucherLineGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search ReceivableVoucherLine using available filters.
     * @param {string} tenant Description
     * @param {SearchReceivableVoucherLinesRequest} searchReceivableVoucherLinesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherLineApi
     */
    public receivableVoucherLineSearch(tenant: string, searchReceivableVoucherLinesRequest: SearchReceivableVoucherLinesRequest, options?: AxiosRequestConfig) {
        return ReceivableVoucherLineApiFp(this.configuration).receivableVoucherLineSearch(tenant, searchReceivableVoucherLinesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a ReceivableVoucherLine.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateReceivableVoucherLineRequest} updateReceivableVoucherLineRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherLineApi
     */
    public receivableVoucherLineUpdate(id: string, tenant: string, updateReceivableVoucherLineRequest: UpdateReceivableVoucherLineRequest, options?: AxiosRequestConfig) {
        return ReceivableVoucherLineApiFp(this.configuration).receivableVoucherLineUpdate(id, tenant, updateReceivableVoucherLineRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
