/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateVendorAddressRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfVendorAddressDto } from '../models';
// @ts-ignore
import { SearchVendorAddressesRequest } from '../models';
// @ts-ignore
import { UpdateVendorAddressRequest } from '../models';
// @ts-ignore
import { VendorAddressDto } from '../models';
/**
 * VendorAddressApi - axios parameter creator
 * @export
 */
export const VendorAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new VendorAddress.
         * @param {string} tenant Description
         * @param {CreateVendorAddressRequest} createVendorAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorAddressCreate: async (tenant: string, createVendorAddressRequest: CreateVendorAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorAddressCreate', 'tenant', tenant)
            // verify required parameter 'createVendorAddressRequest' is not null or undefined
            assertParamExists('vendorAddressCreate', 'createVendorAddressRequest', createVendorAddressRequest)
            const localVarPath = `/api/v1/vendoraddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVendorAddressRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a VendorAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorAddressDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorAddressDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorAddressDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/vendoraddress/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get VendorAddress details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorAddressGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorAddressGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorAddressGet', 'tenant', tenant)
            const localVarPath = `/api/v1/vendoraddress/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search VendorAddress using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorAddressesRequest} searchVendorAddressesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorAddressSearch: async (tenant: string, searchVendorAddressesRequest: SearchVendorAddressesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorAddressSearch', 'tenant', tenant)
            // verify required parameter 'searchVendorAddressesRequest' is not null or undefined
            assertParamExists('vendorAddressSearch', 'searchVendorAddressesRequest', searchVendorAddressesRequest)
            const localVarPath = `/api/v1/vendoraddress/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchVendorAddressesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a VendorAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorAddressRequest} updateVendorAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorAddressUpdate: async (id: string, tenant: string, updateVendorAddressRequest: UpdateVendorAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorAddressUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorAddressUpdate', 'tenant', tenant)
            // verify required parameter 'updateVendorAddressRequest' is not null or undefined
            assertParamExists('vendorAddressUpdate', 'updateVendorAddressRequest', updateVendorAddressRequest)
            const localVarPath = `/api/v1/vendoraddress/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVendorAddressRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorAddressApi - functional programming interface
 * @export
 */
export const VendorAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new VendorAddress.
         * @param {string} tenant Description
         * @param {CreateVendorAddressRequest} createVendorAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorAddressCreate(tenant: string, createVendorAddressRequest: CreateVendorAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorAddressCreate(tenant, createVendorAddressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a VendorAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorAddressDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorAddressDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get VendorAddress details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorAddressGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorAddressDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorAddressGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search VendorAddress using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorAddressesRequest} searchVendorAddressesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorAddressSearch(tenant: string, searchVendorAddressesRequest: SearchVendorAddressesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfVendorAddressDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorAddressSearch(tenant, searchVendorAddressesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a VendorAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorAddressRequest} updateVendorAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorAddressUpdate(id: string, tenant: string, updateVendorAddressRequest: UpdateVendorAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorAddressUpdate(id, tenant, updateVendorAddressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorAddressApi - factory interface
 * @export
 */
export const VendorAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorAddressApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new VendorAddress.
         * @param {string} tenant Description
         * @param {CreateVendorAddressRequest} createVendorAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorAddressCreate(tenant: string, createVendorAddressRequest: CreateVendorAddressRequest, options?: any): AxiosPromise<string> {
            return localVarFp.vendorAddressCreate(tenant, createVendorAddressRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a VendorAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorAddressDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.vendorAddressDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get VendorAddress details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorAddressGet(id: string, tenant: string, options?: any): AxiosPromise<VendorAddressDto> {
            return localVarFp.vendorAddressGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search VendorAddress using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorAddressesRequest} searchVendorAddressesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorAddressSearch(tenant: string, searchVendorAddressesRequest: SearchVendorAddressesRequest, options?: any): AxiosPromise<PaginationResponseOfVendorAddressDto> {
            return localVarFp.vendorAddressSearch(tenant, searchVendorAddressesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a VendorAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorAddressRequest} updateVendorAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorAddressUpdate(id: string, tenant: string, updateVendorAddressRequest: UpdateVendorAddressRequest, options?: any): AxiosPromise<string> {
            return localVarFp.vendorAddressUpdate(id, tenant, updateVendorAddressRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VendorAddressApi - object-oriented interface
 * @export
 * @class VendorAddressApi
 * @extends {BaseAPI}
 */
export class VendorAddressApi extends BaseAPI {
    /**
     * 
     * @summary Create a new VendorAddress.
     * @param {string} tenant Description
     * @param {CreateVendorAddressRequest} createVendorAddressRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorAddressApi
     */
    public vendorAddressCreate(tenant: string, createVendorAddressRequest: CreateVendorAddressRequest, options?: AxiosRequestConfig) {
        return VendorAddressApiFp(this.configuration).vendorAddressCreate(tenant, createVendorAddressRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a VendorAddress.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorAddressApi
     */
    public vendorAddressDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VendorAddressApiFp(this.configuration).vendorAddressDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get VendorAddress details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorAddressApi
     */
    public vendorAddressGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VendorAddressApiFp(this.configuration).vendorAddressGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search VendorAddress using available filters.
     * @param {string} tenant Description
     * @param {SearchVendorAddressesRequest} searchVendorAddressesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorAddressApi
     */
    public vendorAddressSearch(tenant: string, searchVendorAddressesRequest: SearchVendorAddressesRequest, options?: AxiosRequestConfig) {
        return VendorAddressApiFp(this.configuration).vendorAddressSearch(tenant, searchVendorAddressesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a VendorAddress.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateVendorAddressRequest} updateVendorAddressRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorAddressApi
     */
    public vendorAddressUpdate(id: string, tenant: string, updateVendorAddressRequest: UpdateVendorAddressRequest, options?: AxiosRequestConfig) {
        return VendorAddressApiFp(this.configuration).vendorAddressUpdate(id, tenant, updateVendorAddressRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
