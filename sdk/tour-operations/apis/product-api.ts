/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateProductRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { ExportProductsRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfProductDto } from '../models';
// @ts-ignore
import { ProductDetailsDto } from '../models';
// @ts-ignore
import { ProductDto } from '../models';
// @ts-ignore
import { SearchProductsRequest } from '../models';
// @ts-ignore
import { UpdateProductRequest } from '../models';
/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new product.
         * @param {string} tenant Description
         * @param {CreateProductRequest} createProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCreate: async (tenant: string, createProductRequest: CreateProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productCreate', 'tenant', tenant)
            // verify required parameter 'createProductRequest' is not null or undefined
            assertParamExists('productCreate', 'createProductRequest', createProductRequest)
            const localVarPath = `/api/v1/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a product.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export a products.
         * @param {string} tenant Description
         * @param {ExportProductsRequest} exportProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productExport: async (tenant: string, exportProductsRequest: ExportProductsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productExport', 'tenant', tenant)
            // verify required parameter 'exportProductsRequest' is not null or undefined
            assertParamExists('productExport', 'exportProductsRequest', exportProductsRequest)
            const localVarPath = `/api/v1/product/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportProductsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productGet', 'tenant', tenant)
            const localVarPath = `/api/v1/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product details via dapper.
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetDapper: async (tenant: string, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productGetDapper', 'tenant', tenant)
            const localVarPath = `/api/v1/product/dapper`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search products using available filters.
         * @param {string} tenant Description
         * @param {SearchProductsRequest} searchProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productSearch: async (tenant: string, searchProductsRequest: SearchProductsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productSearch', 'tenant', tenant)
            // verify required parameter 'searchProductsRequest' is not null or undefined
            assertParamExists('productSearch', 'searchProductsRequest', searchProductsRequest)
            const localVarPath = `/api/v1/product/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchProductsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a product.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateProductRequest} updateProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdate: async (id: string, tenant: string, updateProductRequest: UpdateProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productUpdate', 'tenant', tenant)
            // verify required parameter 'updateProductRequest' is not null or undefined
            assertParamExists('productUpdate', 'updateProductRequest', updateProductRequest)
            const localVarPath = `/api/v1/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new product.
         * @param {string} tenant Description
         * @param {CreateProductRequest} createProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCreate(tenant: string, createProductRequest: CreateProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCreate(tenant, createProductRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a product.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Export a products.
         * @param {string} tenant Description
         * @param {ExportProductsRequest} exportProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productExport(tenant: string, exportProductsRequest: ExportProductsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productExport(tenant, exportProductsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get product details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get product details via dapper.
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productGetDapper(tenant: string, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productGetDapper(tenant, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search products using available filters.
         * @param {string} tenant Description
         * @param {SearchProductsRequest} searchProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productSearch(tenant: string, searchProductsRequest: SearchProductsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productSearch(tenant, searchProductsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a product.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateProductRequest} updateProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productUpdate(id: string, tenant: string, updateProductRequest: UpdateProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productUpdate(id, tenant, updateProductRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new product.
         * @param {string} tenant Description
         * @param {CreateProductRequest} createProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCreate(tenant: string, createProductRequest: CreateProductRequest, options?: any): AxiosPromise<string> {
            return localVarFp.productCreate(tenant, createProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a product.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.productDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export a products.
         * @param {string} tenant Description
         * @param {ExportProductsRequest} exportProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productExport(tenant: string, exportProductsRequest: ExportProductsRequest, options?: any): AxiosPromise<File> {
            return localVarFp.productExport(tenant, exportProductsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get product details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGet(id: string, tenant: string, options?: any): AxiosPromise<ProductDetailsDto> {
            return localVarFp.productGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get product details via dapper.
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetDapper(tenant: string, id?: string, options?: any): AxiosPromise<ProductDto> {
            return localVarFp.productGetDapper(tenant, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search products using available filters.
         * @param {string} tenant Description
         * @param {SearchProductsRequest} searchProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productSearch(tenant: string, searchProductsRequest: SearchProductsRequest, options?: any): AxiosPromise<PaginationResponseOfProductDto> {
            return localVarFp.productSearch(tenant, searchProductsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a product.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateProductRequest} updateProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdate(id: string, tenant: string, updateProductRequest: UpdateProductRequest, options?: any): AxiosPromise<string> {
            return localVarFp.productUpdate(id, tenant, updateProductRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @summary Create a new product.
     * @param {string} tenant Description
     * @param {CreateProductRequest} createProductRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productCreate(tenant: string, createProductRequest: CreateProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productCreate(tenant, createProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a product.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export a products.
     * @param {string} tenant Description
     * @param {ExportProductsRequest} exportProductsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productExport(tenant: string, exportProductsRequest: ExportProductsRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productExport(tenant, exportProductsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get product details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get product details via dapper.
     * @param {string} tenant Description
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productGetDapper(tenant: string, id?: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productGetDapper(tenant, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search products using available filters.
     * @param {string} tenant Description
     * @param {SearchProductsRequest} searchProductsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productSearch(tenant: string, searchProductsRequest: SearchProductsRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productSearch(tenant, searchProductsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a product.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateProductRequest} updateProductRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productUpdate(id: string, tenant: string, updateProductRequest: UpdateProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productUpdate(id, tenant, updateProductRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
