/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateVatRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfVatDto } from '../models';
// @ts-ignore
import { SearchVatsRequest } from '../models';
// @ts-ignore
import { UpdateVatRequest } from '../models';
// @ts-ignore
import { VatDto } from '../models';
/**
 * VatApi - axios parameter creator
 * @export
 */
export const VatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Vat.
         * @param {string} tenant Description
         * @param {CreateVatRequest} createVatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vatCreate: async (tenant: string, createVatRequest: CreateVatRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vatCreate', 'tenant', tenant)
            // verify required parameter 'createVatRequest' is not null or undefined
            assertParamExists('vatCreate', 'createVatRequest', createVatRequest)
            const localVarPath = `/api/v1/vat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVatRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Vat.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vatDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vatDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vatDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/vat/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Vat details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vatGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vatGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vatGet', 'tenant', tenant)
            const localVarPath = `/api/v1/vat/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Vat using available filters.
         * @param {string} tenant Description
         * @param {SearchVatsRequest} searchVatsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vatSearch: async (tenant: string, searchVatsRequest: SearchVatsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vatSearch', 'tenant', tenant)
            // verify required parameter 'searchVatsRequest' is not null or undefined
            assertParamExists('vatSearch', 'searchVatsRequest', searchVatsRequest)
            const localVarPath = `/api/v1/vat/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchVatsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Vat.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVatRequest} updateVatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vatUpdate: async (id: string, tenant: string, updateVatRequest: UpdateVatRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vatUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vatUpdate', 'tenant', tenant)
            // verify required parameter 'updateVatRequest' is not null or undefined
            assertParamExists('vatUpdate', 'updateVatRequest', updateVatRequest)
            const localVarPath = `/api/v1/vat/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVatRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VatApi - functional programming interface
 * @export
 */
export const VatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VatApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Vat.
         * @param {string} tenant Description
         * @param {CreateVatRequest} createVatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vatCreate(tenant: string, createVatRequest: CreateVatRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vatCreate(tenant, createVatRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Vat.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vatDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vatDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Vat details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vatGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VatDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vatGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Vat using available filters.
         * @param {string} tenant Description
         * @param {SearchVatsRequest} searchVatsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vatSearch(tenant: string, searchVatsRequest: SearchVatsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfVatDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vatSearch(tenant, searchVatsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Vat.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVatRequest} updateVatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vatUpdate(id: string, tenant: string, updateVatRequest: UpdateVatRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vatUpdate(id, tenant, updateVatRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VatApi - factory interface
 * @export
 */
export const VatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VatApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Vat.
         * @param {string} tenant Description
         * @param {CreateVatRequest} createVatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vatCreate(tenant: string, createVatRequest: CreateVatRequest, options?: any): AxiosPromise<string> {
            return localVarFp.vatCreate(tenant, createVatRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Vat.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vatDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.vatDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Vat details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vatGet(id: string, tenant: string, options?: any): AxiosPromise<VatDto> {
            return localVarFp.vatGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Vat using available filters.
         * @param {string} tenant Description
         * @param {SearchVatsRequest} searchVatsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vatSearch(tenant: string, searchVatsRequest: SearchVatsRequest, options?: any): AxiosPromise<PaginationResponseOfVatDto> {
            return localVarFp.vatSearch(tenant, searchVatsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Vat.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVatRequest} updateVatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vatUpdate(id: string, tenant: string, updateVatRequest: UpdateVatRequest, options?: any): AxiosPromise<string> {
            return localVarFp.vatUpdate(id, tenant, updateVatRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VatApi - object-oriented interface
 * @export
 * @class VatApi
 * @extends {BaseAPI}
 */
export class VatApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Vat.
     * @param {string} tenant Description
     * @param {CreateVatRequest} createVatRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VatApi
     */
    public vatCreate(tenant: string, createVatRequest: CreateVatRequest, options?: AxiosRequestConfig) {
        return VatApiFp(this.configuration).vatCreate(tenant, createVatRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Vat.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VatApi
     */
    public vatDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VatApiFp(this.configuration).vatDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Vat details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VatApi
     */
    public vatGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VatApiFp(this.configuration).vatGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Vat using available filters.
     * @param {string} tenant Description
     * @param {SearchVatsRequest} searchVatsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VatApi
     */
    public vatSearch(tenant: string, searchVatsRequest: SearchVatsRequest, options?: AxiosRequestConfig) {
        return VatApiFp(this.configuration).vatSearch(tenant, searchVatsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Vat.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateVatRequest} updateVatRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VatApi
     */
    public vatUpdate(id: string, tenant: string, updateVatRequest: UpdateVatRequest, options?: AxiosRequestConfig) {
        return VatApiFp(this.configuration).vatUpdate(id, tenant, updateVatRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
