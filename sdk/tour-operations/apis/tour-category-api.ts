/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTourCategoryRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfTourCategoryDto } from '../models';
// @ts-ignore
import { SearchTourCategoriesRequest } from '../models';
// @ts-ignore
import { TourCategoryDto } from '../models';
// @ts-ignore
import { UpdateTourCategoryRequest } from '../models';
/**
 * TourCategoryApi - axios parameter creator
 * @export
 */
export const TourCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new TourCategory.
         * @param {string} tenant Description
         * @param {CreateTourCategoryRequest} createTourCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourCategoryCreate: async (tenant: string, createTourCategoryRequest: CreateTourCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourCategoryCreate', 'tenant', tenant)
            // verify required parameter 'createTourCategoryRequest' is not null or undefined
            assertParamExists('tourCategoryCreate', 'createTourCategoryRequest', createTourCategoryRequest)
            const localVarPath = `/api/v1/tourcategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTourCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a TourCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourCategoryDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourCategoryDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourCategoryDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/tourcategory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourCategory details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourCategoryGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourCategoryGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourCategoryGet', 'tenant', tenant)
            const localVarPath = `/api/v1/tourcategory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search TourCategory using available filters.
         * @param {string} tenant Description
         * @param {SearchTourCategoriesRequest} searchTourCategoriesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourCategorySearch: async (tenant: string, searchTourCategoriesRequest: SearchTourCategoriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourCategorySearch', 'tenant', tenant)
            // verify required parameter 'searchTourCategoriesRequest' is not null or undefined
            assertParamExists('tourCategorySearch', 'searchTourCategoriesRequest', searchTourCategoriesRequest)
            const localVarPath = `/api/v1/tourcategory/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchTourCategoriesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a TourCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourCategoryRequest} updateTourCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourCategoryUpdate: async (id: string, tenant: string, updateTourCategoryRequest: UpdateTourCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourCategoryUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourCategoryUpdate', 'tenant', tenant)
            // verify required parameter 'updateTourCategoryRequest' is not null or undefined
            assertParamExists('tourCategoryUpdate', 'updateTourCategoryRequest', updateTourCategoryRequest)
            const localVarPath = `/api/v1/tourcategory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTourCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourCategoryApi - functional programming interface
 * @export
 */
export const TourCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new TourCategory.
         * @param {string} tenant Description
         * @param {CreateTourCategoryRequest} createTourCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourCategoryCreate(tenant: string, createTourCategoryRequest: CreateTourCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourCategoryCreate(tenant, createTourCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a TourCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourCategoryDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourCategoryDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourCategory details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourCategoryGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourCategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourCategoryGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search TourCategory using available filters.
         * @param {string} tenant Description
         * @param {SearchTourCategoriesRequest} searchTourCategoriesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourCategorySearch(tenant: string, searchTourCategoriesRequest: SearchTourCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTourCategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourCategorySearch(tenant, searchTourCategoriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a TourCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourCategoryRequest} updateTourCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourCategoryUpdate(id: string, tenant: string, updateTourCategoryRequest: UpdateTourCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourCategoryUpdate(id, tenant, updateTourCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourCategoryApi - factory interface
 * @export
 */
export const TourCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourCategoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new TourCategory.
         * @param {string} tenant Description
         * @param {CreateTourCategoryRequest} createTourCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourCategoryCreate(tenant: string, createTourCategoryRequest: CreateTourCategoryRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourCategoryCreate(tenant, createTourCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a TourCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourCategoryDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.tourCategoryDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourCategory details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourCategoryGet(id: string, tenant: string, options?: any): AxiosPromise<TourCategoryDto> {
            return localVarFp.tourCategoryGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search TourCategory using available filters.
         * @param {string} tenant Description
         * @param {SearchTourCategoriesRequest} searchTourCategoriesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourCategorySearch(tenant: string, searchTourCategoriesRequest: SearchTourCategoriesRequest, options?: any): AxiosPromise<PaginationResponseOfTourCategoryDto> {
            return localVarFp.tourCategorySearch(tenant, searchTourCategoriesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a TourCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourCategoryRequest} updateTourCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourCategoryUpdate(id: string, tenant: string, updateTourCategoryRequest: UpdateTourCategoryRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourCategoryUpdate(id, tenant, updateTourCategoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TourCategoryApi - object-oriented interface
 * @export
 * @class TourCategoryApi
 * @extends {BaseAPI}
 */
export class TourCategoryApi extends BaseAPI {
    /**
     * 
     * @summary Create a new TourCategory.
     * @param {string} tenant Description
     * @param {CreateTourCategoryRequest} createTourCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourCategoryApi
     */
    public tourCategoryCreate(tenant: string, createTourCategoryRequest: CreateTourCategoryRequest, options?: AxiosRequestConfig) {
        return TourCategoryApiFp(this.configuration).tourCategoryCreate(tenant, createTourCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a TourCategory.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourCategoryApi
     */
    public tourCategoryDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourCategoryApiFp(this.configuration).tourCategoryDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourCategory details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourCategoryApi
     */
    public tourCategoryGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourCategoryApiFp(this.configuration).tourCategoryGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search TourCategory using available filters.
     * @param {string} tenant Description
     * @param {SearchTourCategoriesRequest} searchTourCategoriesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourCategoryApi
     */
    public tourCategorySearch(tenant: string, searchTourCategoriesRequest: SearchTourCategoriesRequest, options?: AxiosRequestConfig) {
        return TourCategoryApiFp(this.configuration).tourCategorySearch(tenant, searchTourCategoriesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a TourCategory.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateTourCategoryRequest} updateTourCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourCategoryApi
     */
    public tourCategoryUpdate(id: string, tenant: string, updateTourCategoryRequest: UpdateTourCategoryRequest, options?: AxiosRequestConfig) {
        return TourCategoryApiFp(this.configuration).tourCategoryUpdate(id, tenant, updateTourCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
