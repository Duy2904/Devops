/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateCancellationTypeRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfCancellationTypeDto } from '../models';
// @ts-ignore
import { SearchCancellationTypesRequest } from '../models';
// @ts-ignore
import { UpdateCancellationTypeRequest } from '../models';
/**
 * CancellationTypeApi - axios parameter creator
 * @export
 */
export const CancellationTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new CancellationType.
         * @param {string} tenant Description
         * @param {CreateCancellationTypeRequest} createCancellationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancellationTypeCreate: async (tenant: string, createCancellationTypeRequest: CreateCancellationTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('cancellationTypeCreate', 'tenant', tenant)
            // verify required parameter 'createCancellationTypeRequest' is not null or undefined
            assertParamExists('cancellationTypeCreate', 'createCancellationTypeRequest', createCancellationTypeRequest)
            const localVarPath = `/api/v1/cancellationtype`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCancellationTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search CancellationType using available filters.
         * @param {string} tenant Description
         * @param {SearchCancellationTypesRequest} searchCancellationTypesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancellationTypeSearch: async (tenant: string, searchCancellationTypesRequest: SearchCancellationTypesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('cancellationTypeSearch', 'tenant', tenant)
            // verify required parameter 'searchCancellationTypesRequest' is not null or undefined
            assertParamExists('cancellationTypeSearch', 'searchCancellationTypesRequest', searchCancellationTypesRequest)
            const localVarPath = `/api/v1/cancellationtype/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchCancellationTypesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a CancellationType.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCancellationTypeRequest} updateCancellationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancellationTypeUpdate: async (id: string, tenant: string, updateCancellationTypeRequest: UpdateCancellationTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancellationTypeUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('cancellationTypeUpdate', 'tenant', tenant)
            // verify required parameter 'updateCancellationTypeRequest' is not null or undefined
            assertParamExists('cancellationTypeUpdate', 'updateCancellationTypeRequest', updateCancellationTypeRequest)
            const localVarPath = `/api/v1/cancellationtype/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCancellationTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CancellationTypeApi - functional programming interface
 * @export
 */
export const CancellationTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CancellationTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new CancellationType.
         * @param {string} tenant Description
         * @param {CreateCancellationTypeRequest} createCancellationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancellationTypeCreate(tenant: string, createCancellationTypeRequest: CreateCancellationTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancellationTypeCreate(tenant, createCancellationTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search CancellationType using available filters.
         * @param {string} tenant Description
         * @param {SearchCancellationTypesRequest} searchCancellationTypesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancellationTypeSearch(tenant: string, searchCancellationTypesRequest: SearchCancellationTypesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfCancellationTypeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancellationTypeSearch(tenant, searchCancellationTypesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a CancellationType.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCancellationTypeRequest} updateCancellationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancellationTypeUpdate(id: string, tenant: string, updateCancellationTypeRequest: UpdateCancellationTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancellationTypeUpdate(id, tenant, updateCancellationTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CancellationTypeApi - factory interface
 * @export
 */
export const CancellationTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CancellationTypeApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new CancellationType.
         * @param {string} tenant Description
         * @param {CreateCancellationTypeRequest} createCancellationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancellationTypeCreate(tenant: string, createCancellationTypeRequest: CreateCancellationTypeRequest, options?: any): AxiosPromise<string> {
            return localVarFp.cancellationTypeCreate(tenant, createCancellationTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search CancellationType using available filters.
         * @param {string} tenant Description
         * @param {SearchCancellationTypesRequest} searchCancellationTypesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancellationTypeSearch(tenant: string, searchCancellationTypesRequest: SearchCancellationTypesRequest, options?: any): AxiosPromise<PaginationResponseOfCancellationTypeDto> {
            return localVarFp.cancellationTypeSearch(tenant, searchCancellationTypesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a CancellationType.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCancellationTypeRequest} updateCancellationTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancellationTypeUpdate(id: string, tenant: string, updateCancellationTypeRequest: UpdateCancellationTypeRequest, options?: any): AxiosPromise<string> {
            return localVarFp.cancellationTypeUpdate(id, tenant, updateCancellationTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CancellationTypeApi - object-oriented interface
 * @export
 * @class CancellationTypeApi
 * @extends {BaseAPI}
 */
export class CancellationTypeApi extends BaseAPI {
    /**
     * 
     * @summary Create a new CancellationType.
     * @param {string} tenant Description
     * @param {CreateCancellationTypeRequest} createCancellationTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CancellationTypeApi
     */
    public cancellationTypeCreate(tenant: string, createCancellationTypeRequest: CreateCancellationTypeRequest, options?: AxiosRequestConfig) {
        return CancellationTypeApiFp(this.configuration).cancellationTypeCreate(tenant, createCancellationTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search CancellationType using available filters.
     * @param {string} tenant Description
     * @param {SearchCancellationTypesRequest} searchCancellationTypesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CancellationTypeApi
     */
    public cancellationTypeSearch(tenant: string, searchCancellationTypesRequest: SearchCancellationTypesRequest, options?: AxiosRequestConfig) {
        return CancellationTypeApiFp(this.configuration).cancellationTypeSearch(tenant, searchCancellationTypesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a CancellationType.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateCancellationTypeRequest} updateCancellationTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CancellationTypeApi
     */
    public cancellationTypeUpdate(id: string, tenant: string, updateCancellationTypeRequest: UpdateCancellationTypeRequest, options?: AxiosRequestConfig) {
        return CancellationTypeApiFp(this.configuration).cancellationTypeUpdate(id, tenant, updateCancellationTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
