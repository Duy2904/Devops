/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateCustomerRequest } from '../models';
// @ts-ignore
import { CustomerDetailsDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfCustomerDto } from '../models';
// @ts-ignore
import { SearchCustomersRequest } from '../models';
// @ts-ignore
import { UpdateCustomerRequest } from '../models';
/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Customer.
         * @param {string} tenant Description
         * @param {CreateCustomerRequest} createCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreate: async (tenant: string, createCustomerRequest: CreateCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerCreate', 'tenant', tenant)
            // verify required parameter 'createCustomerRequest' is not null or undefined
            assertParamExists('customerCreate', 'createCustomerRequest', createCustomerRequest)
            const localVarPath = `/api/v1/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Customer.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Customer details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerGet', 'tenant', tenant)
            const localVarPath = `/api/v1/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Customer using available filters.
         * @param {string} tenant Description
         * @param {SearchCustomersRequest} searchCustomersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSearch: async (tenant: string, searchCustomersRequest: SearchCustomersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerSearch', 'tenant', tenant)
            // verify required parameter 'searchCustomersRequest' is not null or undefined
            assertParamExists('customerSearch', 'searchCustomersRequest', searchCustomersRequest)
            const localVarPath = `/api/v1/customer/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchCustomersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Customer.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCustomerRequest} updateCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdate: async (id: string, tenant: string, updateCustomerRequest: UpdateCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerUpdate', 'tenant', tenant)
            // verify required parameter 'updateCustomerRequest' is not null or undefined
            assertParamExists('customerUpdate', 'updateCustomerRequest', updateCustomerRequest)
            const localVarPath = `/api/v1/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Customer.
         * @param {string} tenant Description
         * @param {CreateCustomerRequest} createCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerCreate(tenant: string, createCustomerRequest: CreateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerCreate(tenant, createCustomerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Customer.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Customer details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Customer using available filters.
         * @param {string} tenant Description
         * @param {SearchCustomersRequest} searchCustomersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerSearch(tenant: string, searchCustomersRequest: SearchCustomersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfCustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerSearch(tenant, searchCustomersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Customer.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCustomerRequest} updateCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUpdate(id: string, tenant: string, updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUpdate(id, tenant, updateCustomerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Customer.
         * @param {string} tenant Description
         * @param {CreateCustomerRequest} createCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerCreate(tenant: string, createCustomerRequest: CreateCustomerRequest, options?: any): AxiosPromise<string> {
            return localVarFp.customerCreate(tenant, createCustomerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Customer.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.customerDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Customer details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGet(id: string, tenant: string, options?: any): AxiosPromise<CustomerDetailsDto> {
            return localVarFp.customerGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Customer using available filters.
         * @param {string} tenant Description
         * @param {SearchCustomersRequest} searchCustomersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerSearch(tenant: string, searchCustomersRequest: SearchCustomersRequest, options?: any): AxiosPromise<PaginationResponseOfCustomerDto> {
            return localVarFp.customerSearch(tenant, searchCustomersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Customer.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCustomerRequest} updateCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdate(id: string, tenant: string, updateCustomerRequest: UpdateCustomerRequest, options?: any): AxiosPromise<string> {
            return localVarFp.customerUpdate(id, tenant, updateCustomerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Customer.
     * @param {string} tenant Description
     * @param {CreateCustomerRequest} createCustomerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerCreate(tenant: string, createCustomerRequest: CreateCustomerRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerCreate(tenant, createCustomerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Customer.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Customer details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Customer using available filters.
     * @param {string} tenant Description
     * @param {SearchCustomersRequest} searchCustomersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerSearch(tenant: string, searchCustomersRequest: SearchCustomersRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerSearch(tenant, searchCustomersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Customer.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateCustomerRequest} updateCustomerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerUpdate(id: string, tenant: string, updateCustomerRequest: UpdateCustomerRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerUpdate(id, tenant, updateCustomerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
