/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConfirmQuoteRequest } from '../models';
// @ts-ignore
import { CreateQuoteRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { ExportQuoteGitsRequest } from '../models';
// @ts-ignore
import { ExportQuoteRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfSearchQuoteDto } from '../models';
// @ts-ignore
import { QuoteDetailDto } from '../models';
// @ts-ignore
import { SearchQuotesRequest } from '../models';
// @ts-ignore
import { UpdateQuoteRequest } from '../models';
/**
 * QuoteGitApi - axios parameter creator
 * @export
 */
export const QuoteGitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuoteGitsRequest} exportQuoteGitsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitAgencyExport: async (tenant: string, exportQuoteGitsRequest: ExportQuoteGitsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitAgencyExport', 'tenant', tenant)
            // verify required parameter 'exportQuoteGitsRequest' is not null or undefined
            assertParamExists('quoteGitAgencyExport', 'exportQuoteGitsRequest', exportQuoteGitsRequest)
            const localVarPath = `/api/v1/quotegit/agent/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportQuoteGitsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitAgencyExportDetail: async (id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quoteGitAgencyExportDetail', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitAgencyExportDetail', 'tenant', tenant)
            // verify required parameter 'exportQuoteRequest' is not null or undefined
            assertParamExists('quoteGitAgencyExportDetail', 'exportQuoteRequest', exportQuoteRequest)
            const localVarPath = `/api/v1/quotegit/{id}/agent/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitAgencySearch: async (tenant: string, searchQuotesRequest: SearchQuotesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitAgencySearch', 'tenant', tenant)
            // verify required parameter 'searchQuotesRequest' is not null or undefined
            assertParamExists('quoteGitAgencySearch', 'searchQuotesRequest', searchQuotesRequest)
            const localVarPath = `/api/v1/quotegit/agent/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchQuotesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel Quote.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitCancel: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quoteGitCancel', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitCancel', 'tenant', tenant)
            const localVarPath = `/api/v1/quotegit/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ConfirmQuoteRequest} confirmQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitConfirm: async (tenant: string, confirmQuoteRequest: ConfirmQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitConfirm', 'tenant', tenant)
            // verify required parameter 'confirmQuoteRequest' is not null or undefined
            assertParamExists('quoteGitConfirm', 'confirmQuoteRequest', confirmQuoteRequest)
            const localVarPath = `/api/v1/quotegit/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new Quote.
         * @param {string} tenant Description
         * @param {CreateQuoteRequest} createQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitCreate: async (tenant: string, createQuoteRequest: CreateQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitCreate', 'tenant', tenant)
            // verify required parameter 'createQuoteRequest' is not null or undefined
            assertParamExists('quoteGitCreate', 'createQuoteRequest', createQuoteRequest)
            const localVarPath = `/api/v1/quotegit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Quote.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quoteGitDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/quotegit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuoteGitsRequest} exportQuoteGitsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitExport: async (tenant: string, exportQuoteGitsRequest: ExportQuoteGitsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitExport', 'tenant', tenant)
            // verify required parameter 'exportQuoteGitsRequest' is not null or undefined
            assertParamExists('quoteGitExport', 'exportQuoteGitsRequest', exportQuoteGitsRequest)
            const localVarPath = `/api/v1/quotegit/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportQuoteGitsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitExportDetail: async (id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quoteGitExportDetail', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitExportDetail', 'tenant', tenant)
            // verify required parameter 'exportQuoteRequest' is not null or undefined
            assertParamExists('quoteGitExportDetail', 'exportQuoteRequest', exportQuoteRequest)
            const localVarPath = `/api/v1/quotegit/{id}/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Quote detail.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quoteGitGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitGet', 'tenant', tenant)
            const localVarPath = `/api/v1/quotegit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Quotes Code.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitGetCode: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitGetCode', 'tenant', tenant)
            const localVarPath = `/api/v1/quotegit/gen-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitSearch: async (tenant: string, searchQuotesRequest: SearchQuotesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitSearch', 'tenant', tenant)
            // verify required parameter 'searchQuotesRequest' is not null or undefined
            assertParamExists('quoteGitSearch', 'searchQuotesRequest', searchQuotesRequest)
            const localVarPath = `/api/v1/quotegit/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchQuotesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitSendConfirm: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quoteGitSendConfirm', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitSendConfirm', 'tenant', tenant)
            const localVarPath = `/api/v1/quotegit/{id}/send-confirm`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a new Quote.
         * @param {string} tenant Description
         * @param {UpdateQuoteRequest} updateQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitUpdate: async (tenant: string, updateQuoteRequest: UpdateQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGitUpdate', 'tenant', tenant)
            // verify required parameter 'updateQuoteRequest' is not null or undefined
            assertParamExists('quoteGitUpdate', 'updateQuoteRequest', updateQuoteRequest)
            const localVarPath = `/api/v1/quotegit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuoteGitApi - functional programming interface
 * @export
 */
export const QuoteGitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuoteGitApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuoteGitsRequest} exportQuoteGitsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitAgencyExport(tenant: string, exportQuoteGitsRequest: ExportQuoteGitsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitAgencyExport(tenant, exportQuoteGitsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitAgencyExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitAgencyExportDetail(id, tenant, exportQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitAgencySearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfSearchQuoteDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitAgencySearch(tenant, searchQuotesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel Quote.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitCancel(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitCancel(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ConfirmQuoteRequest} confirmQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitConfirm(tenant: string, confirmQuoteRequest: ConfirmQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitConfirm(tenant, confirmQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new Quote.
         * @param {string} tenant Description
         * @param {CreateQuoteRequest} createQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitCreate(tenant: string, createQuoteRequest: CreateQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitCreate(tenant, createQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Quote.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuoteGitsRequest} exportQuoteGitsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitExport(tenant: string, exportQuoteGitsRequest: ExportQuoteGitsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitExport(tenant, exportQuoteGitsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitExportDetail(id, tenant, exportQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Quote detail.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate Quotes Code.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitGetCode(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitGetCode(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitSearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfSearchQuoteDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitSearch(tenant, searchQuotesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitSendConfirm(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitSendConfirm(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a new Quote.
         * @param {string} tenant Description
         * @param {UpdateQuoteRequest} updateQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGitUpdate(tenant: string, updateQuoteRequest: UpdateQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGitUpdate(tenant, updateQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuoteGitApi - factory interface
 * @export
 */
export const QuoteGitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuoteGitApiFp(configuration)
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuoteGitsRequest} exportQuoteGitsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitAgencyExport(tenant: string, exportQuoteGitsRequest: ExportQuoteGitsRequest, options?: any): AxiosPromise<File> {
            return localVarFp.quoteGitAgencyExport(tenant, exportQuoteGitsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitAgencyExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: any): AxiosPromise<File> {
            return localVarFp.quoteGitAgencyExportDetail(id, tenant, exportQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitAgencySearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: any): AxiosPromise<PaginationResponseOfSearchQuoteDto> {
            return localVarFp.quoteGitAgencySearch(tenant, searchQuotesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel Quote.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitCancel(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.quoteGitCancel(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ConfirmQuoteRequest} confirmQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitConfirm(tenant: string, confirmQuoteRequest: ConfirmQuoteRequest, options?: any): AxiosPromise<string> {
            return localVarFp.quoteGitConfirm(tenant, confirmQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new Quote.
         * @param {string} tenant Description
         * @param {CreateQuoteRequest} createQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitCreate(tenant: string, createQuoteRequest: CreateQuoteRequest, options?: any): AxiosPromise<string> {
            return localVarFp.quoteGitCreate(tenant, createQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Quote.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.quoteGitDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuoteGitsRequest} exportQuoteGitsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitExport(tenant: string, exportQuoteGitsRequest: ExportQuoteGitsRequest, options?: any): AxiosPromise<File> {
            return localVarFp.quoteGitExport(tenant, exportQuoteGitsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: any): AxiosPromise<File> {
            return localVarFp.quoteGitExportDetail(id, tenant, exportQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Quote detail.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitGet(id: string, tenant: string, options?: any): AxiosPromise<QuoteDetailDto> {
            return localVarFp.quoteGitGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Quotes Code.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitGetCode(tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.quoteGitGetCode(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitSearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: any): AxiosPromise<PaginationResponseOfSearchQuoteDto> {
            return localVarFp.quoteGitSearch(tenant, searchQuotesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitSendConfirm(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.quoteGitSendConfirm(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a new Quote.
         * @param {string} tenant Description
         * @param {UpdateQuoteRequest} updateQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGitUpdate(tenant: string, updateQuoteRequest: UpdateQuoteRequest, options?: any): AxiosPromise<string> {
            return localVarFp.quoteGitUpdate(tenant, updateQuoteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuoteGitApi - object-oriented interface
 * @export
 * @class QuoteGitApi
 * @extends {BaseAPI}
 */
export class QuoteGitApi extends BaseAPI {
    /**
     * 
     * @param {string} tenant Description
     * @param {ExportQuoteGitsRequest} exportQuoteGitsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitAgencyExport(tenant: string, exportQuoteGitsRequest: ExportQuoteGitsRequest, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitAgencyExport(tenant, exportQuoteGitsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} tenant Description
     * @param {ExportQuoteRequest} exportQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitAgencyExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitAgencyExportDetail(id, tenant, exportQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Quote using available filters.
     * @param {string} tenant Description
     * @param {SearchQuotesRequest} searchQuotesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitAgencySearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitAgencySearch(tenant, searchQuotesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel Quote.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitCancel(id: string, tenant: string, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitCancel(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Description
     * @param {ConfirmQuoteRequest} confirmQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitConfirm(tenant: string, confirmQuoteRequest: ConfirmQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitConfirm(tenant, confirmQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new Quote.
     * @param {string} tenant Description
     * @param {CreateQuoteRequest} createQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitCreate(tenant: string, createQuoteRequest: CreateQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitCreate(tenant, createQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Quote.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Description
     * @param {ExportQuoteGitsRequest} exportQuoteGitsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitExport(tenant: string, exportQuoteGitsRequest: ExportQuoteGitsRequest, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitExport(tenant, exportQuoteGitsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} tenant Description
     * @param {ExportQuoteRequest} exportQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitExportDetail(id, tenant, exportQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Quote detail.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Quotes Code.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitGetCode(tenant: string, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitGetCode(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Quote using available filters.
     * @param {string} tenant Description
     * @param {SearchQuotesRequest} searchQuotesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitSearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitSearch(tenant, searchQuotesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitSendConfirm(id: string, tenant: string, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitSendConfirm(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a new Quote.
     * @param {string} tenant Description
     * @param {UpdateQuoteRequest} updateQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteGitApi
     */
    public quoteGitUpdate(tenant: string, updateQuoteRequest: UpdateQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteGitApiFp(this.configuration).quoteGitUpdate(tenant, updateQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
