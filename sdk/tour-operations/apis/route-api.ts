/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateRouteRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfRouteDto } from '../models';
// @ts-ignore
import { RouteDto } from '../models';
// @ts-ignore
import { SearchRoutesRequest } from '../models';
// @ts-ignore
import { UpdateRouteRequest } from '../models';
/**
 * RouteApi - axios parameter creator
 * @export
 */
export const RouteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new route.
         * @param {string} tenant Description
         * @param {CreateRouteRequest} createRouteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeCreate: async (tenant: string, createRouteRequest: CreateRouteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('routeCreate', 'tenant', tenant)
            // verify required parameter 'createRouteRequest' is not null or undefined
            assertParamExists('routeCreate', 'createRouteRequest', createRouteRequest)
            const localVarPath = `/api/v1/route`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRouteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('routeDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('routeDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/route/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get route details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('routeGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('routeGet', 'tenant', tenant)
            const localVarPath = `/api/v1/route/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search routes using available filters.
         * @param {string} tenant Description
         * @param {SearchRoutesRequest} searchRoutesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeSearch: async (tenant: string, searchRoutesRequest: SearchRoutesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('routeSearch', 'tenant', tenant)
            // verify required parameter 'searchRoutesRequest' is not null or undefined
            assertParamExists('routeSearch', 'searchRoutesRequest', searchRoutesRequest)
            const localVarPath = `/api/v1/route/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchRoutesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateRouteRequest} updateRouteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeUpdate: async (id: string, tenant: string, updateRouteRequest: UpdateRouteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('routeUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('routeUpdate', 'tenant', tenant)
            // verify required parameter 'updateRouteRequest' is not null or undefined
            assertParamExists('routeUpdate', 'updateRouteRequest', updateRouteRequest)
            const localVarPath = `/api/v1/route/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRouteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RouteApi - functional programming interface
 * @export
 */
export const RouteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RouteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new route.
         * @param {string} tenant Description
         * @param {CreateRouteRequest} createRouteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async routeCreate(tenant: string, createRouteRequest: CreateRouteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.routeCreate(tenant, createRouteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async routeDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.routeDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get route details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async routeGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RouteDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.routeGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search routes using available filters.
         * @param {string} tenant Description
         * @param {SearchRoutesRequest} searchRoutesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async routeSearch(tenant: string, searchRoutesRequest: SearchRoutesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfRouteDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.routeSearch(tenant, searchRoutesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateRouteRequest} updateRouteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async routeUpdate(id: string, tenant: string, updateRouteRequest: UpdateRouteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.routeUpdate(id, tenant, updateRouteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RouteApi - factory interface
 * @export
 */
export const RouteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RouteApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new route.
         * @param {string} tenant Description
         * @param {CreateRouteRequest} createRouteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeCreate(tenant: string, createRouteRequest: CreateRouteRequest, options?: any): AxiosPromise<string> {
            return localVarFp.routeCreate(tenant, createRouteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.routeDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get route details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeGet(id: string, tenant: string, options?: any): AxiosPromise<RouteDto> {
            return localVarFp.routeGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search routes using available filters.
         * @param {string} tenant Description
         * @param {SearchRoutesRequest} searchRoutesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeSearch(tenant: string, searchRoutesRequest: SearchRoutesRequest, options?: any): AxiosPromise<PaginationResponseOfRouteDto> {
            return localVarFp.routeSearch(tenant, searchRoutesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateRouteRequest} updateRouteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routeUpdate(id: string, tenant: string, updateRouteRequest: UpdateRouteRequest, options?: any): AxiosPromise<string> {
            return localVarFp.routeUpdate(id, tenant, updateRouteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RouteApi - object-oriented interface
 * @export
 * @class RouteApi
 * @extends {BaseAPI}
 */
export class RouteApi extends BaseAPI {
    /**
     * 
     * @summary Create a new route.
     * @param {string} tenant Description
     * @param {CreateRouteRequest} createRouteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RouteApi
     */
    public routeCreate(tenant: string, createRouteRequest: CreateRouteRequest, options?: AxiosRequestConfig) {
        return RouteApiFp(this.configuration).routeCreate(tenant, createRouteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a route.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RouteApi
     */
    public routeDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return RouteApiFp(this.configuration).routeDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get route details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RouteApi
     */
    public routeGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return RouteApiFp(this.configuration).routeGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search routes using available filters.
     * @param {string} tenant Description
     * @param {SearchRoutesRequest} searchRoutesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RouteApi
     */
    public routeSearch(tenant: string, searchRoutesRequest: SearchRoutesRequest, options?: AxiosRequestConfig) {
        return RouteApiFp(this.configuration).routeSearch(tenant, searchRoutesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a route.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateRouteRequest} updateRouteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RouteApi
     */
    public routeUpdate(id: string, tenant: string, updateRouteRequest: UpdateRouteRequest, options?: AxiosRequestConfig) {
        return RouteApiFp(this.configuration).routeUpdate(id, tenant, updateRouteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
