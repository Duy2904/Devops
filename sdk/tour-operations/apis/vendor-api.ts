/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateVendorRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfVendorDto } from '../models';
// @ts-ignore
import { SearchVendorsRequest } from '../models';
// @ts-ignore
import { UpdateVendorRequest } from '../models';
// @ts-ignore
import { VendorDto } from '../models';
/**
 * VendorApi - axios parameter creator
 * @export
 */
export const VendorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Vendor.
         * @param {string} tenant Description
         * @param {CreateVendorRequest} createVendorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorCreate: async (tenant: string, createVendorRequest: CreateVendorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorCreate', 'tenant', tenant)
            // verify required parameter 'createVendorRequest' is not null or undefined
            assertParamExists('vendorCreate', 'createVendorRequest', createVendorRequest)
            const localVarPath = `/api/v1/vendor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVendorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Vendor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/vendor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Vendor details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorGet', 'tenant', tenant)
            const localVarPath = `/api/v1/vendor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Vendor using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorsRequest} searchVendorsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorSearch: async (tenant: string, searchVendorsRequest: SearchVendorsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorSearch', 'tenant', tenant)
            // verify required parameter 'searchVendorsRequest' is not null or undefined
            assertParamExists('vendorSearch', 'searchVendorsRequest', searchVendorsRequest)
            const localVarPath = `/api/v1/vendor/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchVendorsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Vendor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorRequest} updateVendorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorUpdate: async (id: string, tenant: string, updateVendorRequest: UpdateVendorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorUpdate', 'tenant', tenant)
            // verify required parameter 'updateVendorRequest' is not null or undefined
            assertParamExists('vendorUpdate', 'updateVendorRequest', updateVendorRequest)
            const localVarPath = `/api/v1/vendor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVendorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorApi - functional programming interface
 * @export
 */
export const VendorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Vendor.
         * @param {string} tenant Description
         * @param {CreateVendorRequest} createVendorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorCreate(tenant: string, createVendorRequest: CreateVendorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorCreate(tenant, createVendorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Vendor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Vendor details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Vendor using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorsRequest} searchVendorsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorSearch(tenant: string, searchVendorsRequest: SearchVendorsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfVendorDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorSearch(tenant, searchVendorsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Vendor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorRequest} updateVendorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorUpdate(id: string, tenant: string, updateVendorRequest: UpdateVendorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorUpdate(id, tenant, updateVendorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorApi - factory interface
 * @export
 */
export const VendorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Vendor.
         * @param {string} tenant Description
         * @param {CreateVendorRequest} createVendorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorCreate(tenant: string, createVendorRequest: CreateVendorRequest, options?: any): AxiosPromise<string> {
            return localVarFp.vendorCreate(tenant, createVendorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Vendor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.vendorDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Vendor details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGet(id: string, tenant: string, options?: any): AxiosPromise<VendorDto> {
            return localVarFp.vendorGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Vendor using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorsRequest} searchVendorsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorSearch(tenant: string, searchVendorsRequest: SearchVendorsRequest, options?: any): AxiosPromise<PaginationResponseOfVendorDto> {
            return localVarFp.vendorSearch(tenant, searchVendorsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Vendor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorRequest} updateVendorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorUpdate(id: string, tenant: string, updateVendorRequest: UpdateVendorRequest, options?: any): AxiosPromise<string> {
            return localVarFp.vendorUpdate(id, tenant, updateVendorRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VendorApi - object-oriented interface
 * @export
 * @class VendorApi
 * @extends {BaseAPI}
 */
export class VendorApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Vendor.
     * @param {string} tenant Description
     * @param {CreateVendorRequest} createVendorRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public vendorCreate(tenant: string, createVendorRequest: CreateVendorRequest, options?: AxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorCreate(tenant, createVendorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Vendor.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public vendorDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Vendor details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public vendorGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Vendor using available filters.
     * @param {string} tenant Description
     * @param {SearchVendorsRequest} searchVendorsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public vendorSearch(tenant: string, searchVendorsRequest: SearchVendorsRequest, options?: AxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorSearch(tenant, searchVendorsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Vendor.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateVendorRequest} updateVendorRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public vendorUpdate(id: string, tenant: string, updateVendorRequest: UpdateVendorRequest, options?: AxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorUpdate(id, tenant, updateVendorRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
