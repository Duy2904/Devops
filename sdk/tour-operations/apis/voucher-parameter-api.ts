/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateVoucherParameterRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfVoucherParameterDto } from '../models';
// @ts-ignore
import { SearchVoucherParametersRequest } from '../models';
// @ts-ignore
import { UpdateVoucherParameterRequest } from '../models';
// @ts-ignore
import { VoucherParameterDto } from '../models';
/**
 * VoucherParameterApi - axios parameter creator
 * @export
 */
export const VoucherParameterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new VoucherParameter.
         * @param {string} tenant Description
         * @param {CreateVoucherParameterRequest} createVoucherParameterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherParameterCreate: async (tenant: string, createVoucherParameterRequest: CreateVoucherParameterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('voucherParameterCreate', 'tenant', tenant)
            // verify required parameter 'createVoucherParameterRequest' is not null or undefined
            assertParamExists('voucherParameterCreate', 'createVoucherParameterRequest', createVoucherParameterRequest)
            const localVarPath = `/api/v1/voucherparameter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVoucherParameterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a VoucherParameter.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherParameterDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('voucherParameterDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('voucherParameterDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/voucherparameter/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get VoucherParameter details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherParameterGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('voucherParameterGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('voucherParameterGet', 'tenant', tenant)
            const localVarPath = `/api/v1/voucherparameter/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search VoucherParameter using available filters.
         * @param {string} tenant Description
         * @param {SearchVoucherParametersRequest} searchVoucherParametersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherParameterSearch: async (tenant: string, searchVoucherParametersRequest: SearchVoucherParametersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('voucherParameterSearch', 'tenant', tenant)
            // verify required parameter 'searchVoucherParametersRequest' is not null or undefined
            assertParamExists('voucherParameterSearch', 'searchVoucherParametersRequest', searchVoucherParametersRequest)
            const localVarPath = `/api/v1/voucherparameter/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchVoucherParametersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a VoucherParameter.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVoucherParameterRequest} updateVoucherParameterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherParameterUpdate: async (id: string, tenant: string, updateVoucherParameterRequest: UpdateVoucherParameterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('voucherParameterUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('voucherParameterUpdate', 'tenant', tenant)
            // verify required parameter 'updateVoucherParameterRequest' is not null or undefined
            assertParamExists('voucherParameterUpdate', 'updateVoucherParameterRequest', updateVoucherParameterRequest)
            const localVarPath = `/api/v1/voucherparameter/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVoucherParameterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoucherParameterApi - functional programming interface
 * @export
 */
export const VoucherParameterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoucherParameterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new VoucherParameter.
         * @param {string} tenant Description
         * @param {CreateVoucherParameterRequest} createVoucherParameterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voucherParameterCreate(tenant: string, createVoucherParameterRequest: CreateVoucherParameterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voucherParameterCreate(tenant, createVoucherParameterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a VoucherParameter.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voucherParameterDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voucherParameterDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get VoucherParameter details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voucherParameterGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherParameterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voucherParameterGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search VoucherParameter using available filters.
         * @param {string} tenant Description
         * @param {SearchVoucherParametersRequest} searchVoucherParametersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voucherParameterSearch(tenant: string, searchVoucherParametersRequest: SearchVoucherParametersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfVoucherParameterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voucherParameterSearch(tenant, searchVoucherParametersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a VoucherParameter.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVoucherParameterRequest} updateVoucherParameterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voucherParameterUpdate(id: string, tenant: string, updateVoucherParameterRequest: UpdateVoucherParameterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voucherParameterUpdate(id, tenant, updateVoucherParameterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VoucherParameterApi - factory interface
 * @export
 */
export const VoucherParameterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoucherParameterApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new VoucherParameter.
         * @param {string} tenant Description
         * @param {CreateVoucherParameterRequest} createVoucherParameterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherParameterCreate(tenant: string, createVoucherParameterRequest: CreateVoucherParameterRequest, options?: any): AxiosPromise<string> {
            return localVarFp.voucherParameterCreate(tenant, createVoucherParameterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a VoucherParameter.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherParameterDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.voucherParameterDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get VoucherParameter details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherParameterGet(id: string, tenant: string, options?: any): AxiosPromise<VoucherParameterDto> {
            return localVarFp.voucherParameterGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search VoucherParameter using available filters.
         * @param {string} tenant Description
         * @param {SearchVoucherParametersRequest} searchVoucherParametersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherParameterSearch(tenant: string, searchVoucherParametersRequest: SearchVoucherParametersRequest, options?: any): AxiosPromise<PaginationResponseOfVoucherParameterDto> {
            return localVarFp.voucherParameterSearch(tenant, searchVoucherParametersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a VoucherParameter.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVoucherParameterRequest} updateVoucherParameterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voucherParameterUpdate(id: string, tenant: string, updateVoucherParameterRequest: UpdateVoucherParameterRequest, options?: any): AxiosPromise<string> {
            return localVarFp.voucherParameterUpdate(id, tenant, updateVoucherParameterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VoucherParameterApi - object-oriented interface
 * @export
 * @class VoucherParameterApi
 * @extends {BaseAPI}
 */
export class VoucherParameterApi extends BaseAPI {
    /**
     * 
     * @summary Create a new VoucherParameter.
     * @param {string} tenant Description
     * @param {CreateVoucherParameterRequest} createVoucherParameterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherParameterApi
     */
    public voucherParameterCreate(tenant: string, createVoucherParameterRequest: CreateVoucherParameterRequest, options?: AxiosRequestConfig) {
        return VoucherParameterApiFp(this.configuration).voucherParameterCreate(tenant, createVoucherParameterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a VoucherParameter.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherParameterApi
     */
    public voucherParameterDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VoucherParameterApiFp(this.configuration).voucherParameterDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get VoucherParameter details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherParameterApi
     */
    public voucherParameterGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VoucherParameterApiFp(this.configuration).voucherParameterGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search VoucherParameter using available filters.
     * @param {string} tenant Description
     * @param {SearchVoucherParametersRequest} searchVoucherParametersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherParameterApi
     */
    public voucherParameterSearch(tenant: string, searchVoucherParametersRequest: SearchVoucherParametersRequest, options?: AxiosRequestConfig) {
        return VoucherParameterApiFp(this.configuration).voucherParameterSearch(tenant, searchVoucherParametersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a VoucherParameter.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateVoucherParameterRequest} updateVoucherParameterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoucherParameterApi
     */
    public voucherParameterUpdate(id: string, tenant: string, updateVoucherParameterRequest: UpdateVoucherParameterRequest, options?: AxiosRequestConfig) {
        return VoucherParameterApiFp(this.configuration).voucherParameterUpdate(id, tenant, updateVoucherParameterRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
