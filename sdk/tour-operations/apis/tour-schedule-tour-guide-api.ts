/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateExistingTourGuideForTourRequest } from '../models';
// @ts-ignore
import { CreateTourGuideForTourRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { TourGuideUpdateRequest } from '../models';
// @ts-ignore
import { UpdateExistingTourGuideForTourRequest } from '../models';
/**
 * TourScheduleTourGuideApi - axios parameter creator
 * @export
 */
export const TourScheduleTourGuideApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new tour guide for tour.
         * @param {string} tenant Description
         * @param {CreateTourGuideForTourRequest} createTourGuideForTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleTourGuideCreate: async (tenant: string, createTourGuideForTourRequest: CreateTourGuideForTourRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleTourGuideCreate', 'tenant', tenant)
            // verify required parameter 'createTourGuideForTourRequest' is not null or undefined
            assertParamExists('tourScheduleTourGuideCreate', 'createTourGuideForTourRequest', createTourGuideForTourRequest)
            const localVarPath = `/api/v1/tourscheduletourguide/createtourguide`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTourGuideForTourRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an existing tour guide for tour.
         * @param {string} tenant Description
         * @param {CreateExistingTourGuideForTourRequest} createExistingTourGuideForTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleTourGuideCreate2: async (tenant: string, createExistingTourGuideForTourRequest: CreateExistingTourGuideForTourRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleTourGuideCreate2', 'tenant', tenant)
            // verify required parameter 'createExistingTourGuideForTourRequest' is not null or undefined
            assertParamExists('tourScheduleTourGuideCreate2', 'createExistingTourGuideForTourRequest', createExistingTourGuideForTourRequest)
            const localVarPath = `/api/v1/tourscheduletourguide`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExistingTourGuideForTourRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a TourScheduleTourGuide.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleTourGuideDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleTourGuideDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleTourGuideDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/tourscheduletourguide/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing tour guide for tour.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateExistingTourGuideForTourRequest} updateExistingTourGuideForTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleTourGuideUpdate: async (id: string, tenant: string, updateExistingTourGuideForTourRequest: UpdateExistingTourGuideForTourRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleTourGuideUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleTourGuideUpdate', 'tenant', tenant)
            // verify required parameter 'updateExistingTourGuideForTourRequest' is not null or undefined
            assertParamExists('tourScheduleTourGuideUpdate', 'updateExistingTourGuideForTourRequest', updateExistingTourGuideForTourRequest)
            const localVarPath = `/api/v1/tourscheduletourguide/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExistingTourGuideForTourRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourScheduleTourGuideApi - functional programming interface
 * @export
 */
export const TourScheduleTourGuideApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourScheduleTourGuideApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new tour guide for tour.
         * @param {string} tenant Description
         * @param {CreateTourGuideForTourRequest} createTourGuideForTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleTourGuideCreate(tenant: string, createTourGuideForTourRequest: CreateTourGuideForTourRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleTourGuideCreate(tenant, createTourGuideForTourRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create an existing tour guide for tour.
         * @param {string} tenant Description
         * @param {CreateExistingTourGuideForTourRequest} createExistingTourGuideForTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleTourGuideCreate2(tenant: string, createExistingTourGuideForTourRequest: CreateExistingTourGuideForTourRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleTourGuideCreate2(tenant, createExistingTourGuideForTourRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a TourScheduleTourGuide.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleTourGuideDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleTourGuideDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing tour guide for tour.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateExistingTourGuideForTourRequest} updateExistingTourGuideForTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleTourGuideUpdate(id: string, tenant: string, updateExistingTourGuideForTourRequest: UpdateExistingTourGuideForTourRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleTourGuideUpdate(id, tenant, updateExistingTourGuideForTourRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourScheduleTourGuideApi - factory interface
 * @export
 */
export const TourScheduleTourGuideApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourScheduleTourGuideApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new tour guide for tour.
         * @param {string} tenant Description
         * @param {CreateTourGuideForTourRequest} createTourGuideForTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleTourGuideCreate(tenant: string, createTourGuideForTourRequest: CreateTourGuideForTourRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleTourGuideCreate(tenant, createTourGuideForTourRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an existing tour guide for tour.
         * @param {string} tenant Description
         * @param {CreateExistingTourGuideForTourRequest} createExistingTourGuideForTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleTourGuideCreate2(tenant: string, createExistingTourGuideForTourRequest: CreateExistingTourGuideForTourRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleTourGuideCreate2(tenant, createExistingTourGuideForTourRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a TourScheduleTourGuide.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleTourGuideDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleTourGuideDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing tour guide for tour.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateExistingTourGuideForTourRequest} updateExistingTourGuideForTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleTourGuideUpdate(id: string, tenant: string, updateExistingTourGuideForTourRequest: UpdateExistingTourGuideForTourRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleTourGuideUpdate(id, tenant, updateExistingTourGuideForTourRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TourScheduleTourGuideApi - object-oriented interface
 * @export
 * @class TourScheduleTourGuideApi
 * @extends {BaseAPI}
 */
export class TourScheduleTourGuideApi extends BaseAPI {
    /**
     * 
     * @summary Create a new tour guide for tour.
     * @param {string} tenant Description
     * @param {CreateTourGuideForTourRequest} createTourGuideForTourRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleTourGuideApi
     */
    public tourScheduleTourGuideCreate(tenant: string, createTourGuideForTourRequest: CreateTourGuideForTourRequest, options?: AxiosRequestConfig) {
        return TourScheduleTourGuideApiFp(this.configuration).tourScheduleTourGuideCreate(tenant, createTourGuideForTourRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create an existing tour guide for tour.
     * @param {string} tenant Description
     * @param {CreateExistingTourGuideForTourRequest} createExistingTourGuideForTourRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleTourGuideApi
     */
    public tourScheduleTourGuideCreate2(tenant: string, createExistingTourGuideForTourRequest: CreateExistingTourGuideForTourRequest, options?: AxiosRequestConfig) {
        return TourScheduleTourGuideApiFp(this.configuration).tourScheduleTourGuideCreate2(tenant, createExistingTourGuideForTourRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a TourScheduleTourGuide.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleTourGuideApi
     */
    public tourScheduleTourGuideDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourScheduleTourGuideApiFp(this.configuration).tourScheduleTourGuideDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing tour guide for tour.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateExistingTourGuideForTourRequest} updateExistingTourGuideForTourRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleTourGuideApi
     */
    public tourScheduleTourGuideUpdate(id: string, tenant: string, updateExistingTourGuideForTourRequest: UpdateExistingTourGuideForTourRequest, options?: AxiosRequestConfig) {
        return TourScheduleTourGuideApiFp(this.configuration).tourScheduleTourGuideUpdate(id, tenant, updateExistingTourGuideForTourRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
