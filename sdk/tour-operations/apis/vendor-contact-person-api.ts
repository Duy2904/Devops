/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateVendorContactPersonRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfVendorContactPersonDto } from '../models';
// @ts-ignore
import { SearchVendorContactPersonsRequest } from '../models';
// @ts-ignore
import { UpdateVendorContactPersonRequest } from '../models';
// @ts-ignore
import { VendorContactPersonDto } from '../models';
/**
 * VendorContactPersonApi - axios parameter creator
 * @export
 */
export const VendorContactPersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new VendorContactPerson.
         * @param {string} tenant Description
         * @param {CreateVendorContactPersonRequest} createVendorContactPersonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorContactPersonCreate: async (tenant: string, createVendorContactPersonRequest: CreateVendorContactPersonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorContactPersonCreate', 'tenant', tenant)
            // verify required parameter 'createVendorContactPersonRequest' is not null or undefined
            assertParamExists('vendorContactPersonCreate', 'createVendorContactPersonRequest', createVendorContactPersonRequest)
            const localVarPath = `/api/v1/vendorcontactperson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVendorContactPersonRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a VendorContactPerson.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorContactPersonDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorContactPersonDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorContactPersonDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/vendorcontactperson/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get VendorContactPerson details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorContactPersonGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorContactPersonGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorContactPersonGet', 'tenant', tenant)
            const localVarPath = `/api/v1/vendorcontactperson/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search VendorContactPerson using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorContactPersonsRequest} searchVendorContactPersonsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorContactPersonSearch: async (tenant: string, searchVendorContactPersonsRequest: SearchVendorContactPersonsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorContactPersonSearch', 'tenant', tenant)
            // verify required parameter 'searchVendorContactPersonsRequest' is not null or undefined
            assertParamExists('vendorContactPersonSearch', 'searchVendorContactPersonsRequest', searchVendorContactPersonsRequest)
            const localVarPath = `/api/v1/vendorcontactperson/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchVendorContactPersonsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a VendorContactPerson.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorContactPersonRequest} updateVendorContactPersonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorContactPersonUpdate: async (id: string, tenant: string, updateVendorContactPersonRequest: UpdateVendorContactPersonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorContactPersonUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorContactPersonUpdate', 'tenant', tenant)
            // verify required parameter 'updateVendorContactPersonRequest' is not null or undefined
            assertParamExists('vendorContactPersonUpdate', 'updateVendorContactPersonRequest', updateVendorContactPersonRequest)
            const localVarPath = `/api/v1/vendorcontactperson/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVendorContactPersonRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorContactPersonApi - functional programming interface
 * @export
 */
export const VendorContactPersonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorContactPersonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new VendorContactPerson.
         * @param {string} tenant Description
         * @param {CreateVendorContactPersonRequest} createVendorContactPersonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorContactPersonCreate(tenant: string, createVendorContactPersonRequest: CreateVendorContactPersonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorContactPersonCreate(tenant, createVendorContactPersonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a VendorContactPerson.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorContactPersonDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorContactPersonDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get VendorContactPerson details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorContactPersonGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorContactPersonDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorContactPersonGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search VendorContactPerson using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorContactPersonsRequest} searchVendorContactPersonsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorContactPersonSearch(tenant: string, searchVendorContactPersonsRequest: SearchVendorContactPersonsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfVendorContactPersonDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorContactPersonSearch(tenant, searchVendorContactPersonsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a VendorContactPerson.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorContactPersonRequest} updateVendorContactPersonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorContactPersonUpdate(id: string, tenant: string, updateVendorContactPersonRequest: UpdateVendorContactPersonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorContactPersonUpdate(id, tenant, updateVendorContactPersonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorContactPersonApi - factory interface
 * @export
 */
export const VendorContactPersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorContactPersonApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new VendorContactPerson.
         * @param {string} tenant Description
         * @param {CreateVendorContactPersonRequest} createVendorContactPersonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorContactPersonCreate(tenant: string, createVendorContactPersonRequest: CreateVendorContactPersonRequest, options?: any): AxiosPromise<string> {
            return localVarFp.vendorContactPersonCreate(tenant, createVendorContactPersonRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a VendorContactPerson.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorContactPersonDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.vendorContactPersonDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get VendorContactPerson details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorContactPersonGet(id: string, tenant: string, options?: any): AxiosPromise<VendorContactPersonDto> {
            return localVarFp.vendorContactPersonGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search VendorContactPerson using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorContactPersonsRequest} searchVendorContactPersonsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorContactPersonSearch(tenant: string, searchVendorContactPersonsRequest: SearchVendorContactPersonsRequest, options?: any): AxiosPromise<PaginationResponseOfVendorContactPersonDto> {
            return localVarFp.vendorContactPersonSearch(tenant, searchVendorContactPersonsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a VendorContactPerson.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorContactPersonRequest} updateVendorContactPersonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorContactPersonUpdate(id: string, tenant: string, updateVendorContactPersonRequest: UpdateVendorContactPersonRequest, options?: any): AxiosPromise<string> {
            return localVarFp.vendorContactPersonUpdate(id, tenant, updateVendorContactPersonRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VendorContactPersonApi - object-oriented interface
 * @export
 * @class VendorContactPersonApi
 * @extends {BaseAPI}
 */
export class VendorContactPersonApi extends BaseAPI {
    /**
     * 
     * @summary Create a new VendorContactPerson.
     * @param {string} tenant Description
     * @param {CreateVendorContactPersonRequest} createVendorContactPersonRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorContactPersonApi
     */
    public vendorContactPersonCreate(tenant: string, createVendorContactPersonRequest: CreateVendorContactPersonRequest, options?: AxiosRequestConfig) {
        return VendorContactPersonApiFp(this.configuration).vendorContactPersonCreate(tenant, createVendorContactPersonRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a VendorContactPerson.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorContactPersonApi
     */
    public vendorContactPersonDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VendorContactPersonApiFp(this.configuration).vendorContactPersonDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get VendorContactPerson details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorContactPersonApi
     */
    public vendorContactPersonGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VendorContactPersonApiFp(this.configuration).vendorContactPersonGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search VendorContactPerson using available filters.
     * @param {string} tenant Description
     * @param {SearchVendorContactPersonsRequest} searchVendorContactPersonsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorContactPersonApi
     */
    public vendorContactPersonSearch(tenant: string, searchVendorContactPersonsRequest: SearchVendorContactPersonsRequest, options?: AxiosRequestConfig) {
        return VendorContactPersonApiFp(this.configuration).vendorContactPersonSearch(tenant, searchVendorContactPersonsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a VendorContactPerson.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateVendorContactPersonRequest} updateVendorContactPersonRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorContactPersonApi
     */
    public vendorContactPersonUpdate(id: string, tenant: string, updateVendorContactPersonRequest: UpdateVendorContactPersonRequest, options?: AxiosRequestConfig) {
        return VendorContactPersonApiFp(this.configuration).vendorContactPersonUpdate(id, tenant, updateVendorContactPersonRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
