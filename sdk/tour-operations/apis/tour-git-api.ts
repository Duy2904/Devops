/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApproveTourScheduleRequest } from '../models';
// @ts-ignore
import { CreateTourGitRequest } from '../models';
// @ts-ignore
import { DropdownDto } from '../models';
// @ts-ignore
import { DropdownTourGit } from '../models';
// @ts-ignore
import { DropdownTourGitRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { ExportTourScheduleRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfTourSearchGitDto } from '../models';
// @ts-ignore
import { SearchTourSchedulesRequestOfTourSearchGitDto } from '../models';
// @ts-ignore
import { SendForApprovalRequest } from '../models';
// @ts-ignore
import { TourCodeResponseDto } from '../models';
// @ts-ignore
import { TourGitDto } from '../models';
// @ts-ignore
import { UpdateTourGitRequest } from '../models';
/**
 * TourGitApi - axios parameter creator
 * @export
 */
export const TourGitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitAgentExport: async (tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitAgentExport', 'tenant', tenant)
            // verify required parameter 'exportTourScheduleRequest' is not null or undefined
            assertParamExists('tourGitAgentExport', 'exportTourScheduleRequest', exportTourScheduleRequest)
            const localVarPath = `/api/v1/tourgit/agent/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportTourScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Approve TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ApproveTourScheduleRequest} approveTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitApprove: async (id: string, tenant: string, approveTourScheduleRequest: ApproveTourScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourGitApprove', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitApprove', 'tenant', tenant)
            // verify required parameter 'approveTourScheduleRequest' is not null or undefined
            assertParamExists('tourGitApprove', 'approveTourScheduleRequest', approveTourScheduleRequest)
            const localVarPath = `/api/v1/tourgit/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approveTourScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new TourGit.
         * @param {string} tenant Description
         * @param {CreateTourGitRequest} createTourGitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitCreate: async (tenant: string, createTourGitRequest: CreateTourGitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitCreate', 'tenant', tenant)
            // verify required parameter 'createTourGitRequest' is not null or undefined
            assertParamExists('tourGitCreate', 'createTourGitRequest', createTourGitRequest)
            const localVarPath = `/api/v1/tourgit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTourGitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourGitDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/tourgit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dropdown TourGit.
         * @param {string} tenant Description
         * @param {DropdownTourGitRequest} dropdownTourGitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitDropdown: async (tenant: string, dropdownTourGitRequest: DropdownTourGitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitDropdown', 'tenant', tenant)
            // verify required parameter 'dropdownTourGitRequest' is not null or undefined
            assertParamExists('tourGitDropdown', 'dropdownTourGitRequest', dropdownTourGitRequest)
            const localVarPath = `/api/v1/tourgit/dropdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dropdownTourGitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitExport: async (tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitExport', 'tenant', tenant)
            // verify required parameter 'exportTourScheduleRequest' is not null or undefined
            assertParamExists('tourGitExport', 'exportTourScheduleRequest', exportTourScheduleRequest)
            const localVarPath = `/api/v1/tourgit/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportTourScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourGit details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourGitGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitGet', 'tenant', tenant)
            const localVarPath = `/api/v1/tourgit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourGit details by code.
         * @param {string} tourCode 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitGet2: async (tourCode: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tourCode' is not null or undefined
            assertParamExists('tourGitGet2', 'tourCode', tourCode)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitGet2', 'tenant', tenant)
            const localVarPath = `/api/v1/tourgit/{tourCode}`
                .replace(`{${"tourCode"}}`, encodeURIComponent(String(tourCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get List Customer.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitGetCustomer: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitGetCustomer', 'tenant', tenant)
            const localVarPath = `/api/v1/tourgit/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get List Departure.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitGetDepartureLocation: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitGetDepartureLocation', 'tenant', tenant)
            const localVarPath = `/api/v1/tourgit/departure-location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get List Destination.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitGetDestinationLocation: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitGetDestinationLocation', 'tenant', tenant)
            const localVarPath = `/api/v1/tourgit/destination-location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search TourGit using available filters.
         * @param {string} tenant Description
         * @param {SearchTourSchedulesRequestOfTourSearchGitDto} searchTourSchedulesRequestOfTourSearchGitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitSearch: async (tenant: string, searchTourSchedulesRequestOfTourSearchGitDto: SearchTourSchedulesRequestOfTourSearchGitDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitSearch', 'tenant', tenant)
            // verify required parameter 'searchTourSchedulesRequestOfTourSearchGitDto' is not null or undefined
            assertParamExists('tourGitSearch', 'searchTourSchedulesRequestOfTourSearchGitDto', searchTourSchedulesRequestOfTourSearchGitDto)
            const localVarPath = `/api/v1/tourgit/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchTourSchedulesRequestOfTourSearchGitDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send for approval TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForApprovalRequest} sendForApprovalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitSendForApproval: async (id: string, tenant: string, sendForApprovalRequest: SendForApprovalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourGitSendForApproval', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitSendForApproval', 'tenant', tenant)
            // verify required parameter 'sendForApprovalRequest' is not null or undefined
            assertParamExists('tourGitSendForApproval', 'sendForApprovalRequest', sendForApprovalRequest)
            const localVarPath = `/api/v1/tourgit/{id}/send-for-approval`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendForApprovalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourGitRequest} updateTourGitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitUpdate: async (id: string, tenant: string, updateTourGitRequest: UpdateTourGitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourGitUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourGitUpdate', 'tenant', tenant)
            // verify required parameter 'updateTourGitRequest' is not null or undefined
            assertParamExists('tourGitUpdate', 'updateTourGitRequest', updateTourGitRequest)
            const localVarPath = `/api/v1/tourgit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTourGitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourGitApi - functional programming interface
 * @export
 */
export const TourGitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourGitApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitAgentExport(tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitAgentExport(tenant, exportTourScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Approve TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ApproveTourScheduleRequest} approveTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitApprove(id: string, tenant: string, approveTourScheduleRequest: ApproveTourScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitApprove(id, tenant, approveTourScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new TourGit.
         * @param {string} tenant Description
         * @param {CreateTourGitRequest} createTourGitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitCreate(tenant: string, createTourGitRequest: CreateTourGitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitCreate(tenant, createTourGitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Dropdown TourGit.
         * @param {string} tenant Description
         * @param {DropdownTourGitRequest} dropdownTourGitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitDropdown(tenant: string, dropdownTourGitRequest: DropdownTourGitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownTourGit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitDropdown(tenant, dropdownTourGitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitExport(tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitExport(tenant, exportTourScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourGit details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourGitDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourGit details by code.
         * @param {string} tourCode 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitGet2(tourCode: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourGitDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitGet2(tourCode, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get List Customer.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitGetCustomer(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitGetCustomer(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get List Departure.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitGetDepartureLocation(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitGetDepartureLocation(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get List Destination.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitGetDestinationLocation(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitGetDestinationLocation(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search TourGit using available filters.
         * @param {string} tenant Description
         * @param {SearchTourSchedulesRequestOfTourSearchGitDto} searchTourSchedulesRequestOfTourSearchGitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitSearch(tenant: string, searchTourSchedulesRequestOfTourSearchGitDto: SearchTourSchedulesRequestOfTourSearchGitDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTourSearchGitDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitSearch(tenant, searchTourSchedulesRequestOfTourSearchGitDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send for approval TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForApprovalRequest} sendForApprovalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitSendForApproval(id: string, tenant: string, sendForApprovalRequest: SendForApprovalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitSendForApproval(id, tenant, sendForApprovalRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourGitRequest} updateTourGitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourGitUpdate(id: string, tenant: string, updateTourGitRequest: UpdateTourGitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourCodeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourGitUpdate(id, tenant, updateTourGitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourGitApi - factory interface
 * @export
 */
export const TourGitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourGitApiFp(configuration)
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitAgentExport(tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options?: any): AxiosPromise<File> {
            return localVarFp.tourGitAgentExport(tenant, exportTourScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Approve TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ApproveTourScheduleRequest} approveTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitApprove(id: string, tenant: string, approveTourScheduleRequest: ApproveTourScheduleRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourGitApprove(id, tenant, approveTourScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new TourGit.
         * @param {string} tenant Description
         * @param {CreateTourGitRequest} createTourGitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitCreate(tenant: string, createTourGitRequest: CreateTourGitRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourGitCreate(tenant, createTourGitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.tourGitDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Dropdown TourGit.
         * @param {string} tenant Description
         * @param {DropdownTourGitRequest} dropdownTourGitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitDropdown(tenant: string, dropdownTourGitRequest: DropdownTourGitRequest, options?: any): AxiosPromise<Array<DropdownTourGit>> {
            return localVarFp.tourGitDropdown(tenant, dropdownTourGitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitExport(tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options?: any): AxiosPromise<File> {
            return localVarFp.tourGitExport(tenant, exportTourScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourGit details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitGet(id: string, tenant: string, options?: any): AxiosPromise<TourGitDto> {
            return localVarFp.tourGitGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourGit details by code.
         * @param {string} tourCode 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitGet2(tourCode: string, tenant: string, options?: any): AxiosPromise<TourGitDto> {
            return localVarFp.tourGitGet2(tourCode, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get List Customer.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitGetCustomer(tenant: string, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.tourGitGetCustomer(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get List Departure.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitGetDepartureLocation(tenant: string, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.tourGitGetDepartureLocation(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get List Destination.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitGetDestinationLocation(tenant: string, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.tourGitGetDestinationLocation(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search TourGit using available filters.
         * @param {string} tenant Description
         * @param {SearchTourSchedulesRequestOfTourSearchGitDto} searchTourSchedulesRequestOfTourSearchGitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitSearch(tenant: string, searchTourSchedulesRequestOfTourSearchGitDto: SearchTourSchedulesRequestOfTourSearchGitDto, options?: any): AxiosPromise<PaginationResponseOfTourSearchGitDto> {
            return localVarFp.tourGitSearch(tenant, searchTourSchedulesRequestOfTourSearchGitDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send for approval TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForApprovalRequest} sendForApprovalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitSendForApproval(id: string, tenant: string, sendForApprovalRequest: SendForApprovalRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourGitSendForApproval(id, tenant, sendForApprovalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a TourGit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourGitRequest} updateTourGitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourGitUpdate(id: string, tenant: string, updateTourGitRequest: UpdateTourGitRequest, options?: any): AxiosPromise<TourCodeResponseDto> {
            return localVarFp.tourGitUpdate(id, tenant, updateTourGitRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TourGitApi - object-oriented interface
 * @export
 * @class TourGitApi
 * @extends {BaseAPI}
 */
export class TourGitApi extends BaseAPI {
    /**
     * 
     * @param {string} tenant Description
     * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitAgentExport(tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitAgentExport(tenant, exportTourScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Approve TourGit.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {ApproveTourScheduleRequest} approveTourScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitApprove(id: string, tenant: string, approveTourScheduleRequest: ApproveTourScheduleRequest, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitApprove(id, tenant, approveTourScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new TourGit.
     * @param {string} tenant Description
     * @param {CreateTourGitRequest} createTourGitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitCreate(tenant: string, createTourGitRequest: CreateTourGitRequest, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitCreate(tenant, createTourGitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a TourGit.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Dropdown TourGit.
     * @param {string} tenant Description
     * @param {DropdownTourGitRequest} dropdownTourGitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitDropdown(tenant: string, dropdownTourGitRequest: DropdownTourGitRequest, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitDropdown(tenant, dropdownTourGitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Description
     * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitExport(tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitExport(tenant, exportTourScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourGit details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourGit details by code.
     * @param {string} tourCode 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitGet2(tourCode: string, tenant: string, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitGet2(tourCode, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get List Customer.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitGetCustomer(tenant: string, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitGetCustomer(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get List Departure.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitGetDepartureLocation(tenant: string, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitGetDepartureLocation(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get List Destination.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitGetDestinationLocation(tenant: string, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitGetDestinationLocation(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search TourGit using available filters.
     * @param {string} tenant Description
     * @param {SearchTourSchedulesRequestOfTourSearchGitDto} searchTourSchedulesRequestOfTourSearchGitDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitSearch(tenant: string, searchTourSchedulesRequestOfTourSearchGitDto: SearchTourSchedulesRequestOfTourSearchGitDto, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitSearch(tenant, searchTourSchedulesRequestOfTourSearchGitDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send for approval TourGit.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {SendForApprovalRequest} sendForApprovalRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitSendForApproval(id: string, tenant: string, sendForApprovalRequest: SendForApprovalRequest, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitSendForApproval(id, tenant, sendForApprovalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a TourGit.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateTourGitRequest} updateTourGitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGitApi
     */
    public tourGitUpdate(id: string, tenant: string, updateTourGitRequest: UpdateTourGitRequest, options?: AxiosRequestConfig) {
        return TourGitApiFp(this.configuration).tourGitUpdate(id, tenant, updateTourGitRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
