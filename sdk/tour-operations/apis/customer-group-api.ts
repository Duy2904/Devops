/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateCustomerGroupRequest } from '../models';
// @ts-ignore
import { CustomerGroupDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfCustomerGroupDto } from '../models';
// @ts-ignore
import { SearchCustomerGroupsRequest } from '../models';
// @ts-ignore
import { UpdateCustomerGroupRequest } from '../models';
/**
 * CustomerGroupApi - axios parameter creator
 * @export
 */
export const CustomerGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new customergroup.
         * @param {string} tenant Description
         * @param {CreateCustomerGroupRequest} createCustomerGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupCreate: async (tenant: string, createCustomerGroupRequest: CreateCustomerGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerGroupCreate', 'tenant', tenant)
            // verify required parameter 'createCustomerGroupRequest' is not null or undefined
            assertParamExists('customerGroupCreate', 'createCustomerGroupRequest', createCustomerGroupRequest)
            const localVarPath = `/api/v1/customergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomerGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a customergroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerGroupDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerGroupDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/customergroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get customergroup details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerGroupGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerGroupGet', 'tenant', tenant)
            const localVarPath = `/api/v1/customergroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search customergroup using available filters.
         * @param {string} tenant Description
         * @param {SearchCustomerGroupsRequest} searchCustomerGroupsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupSearch: async (tenant: string, searchCustomerGroupsRequest: SearchCustomerGroupsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerGroupSearch', 'tenant', tenant)
            // verify required parameter 'searchCustomerGroupsRequest' is not null or undefined
            assertParamExists('customerGroupSearch', 'searchCustomerGroupsRequest', searchCustomerGroupsRequest)
            const localVarPath = `/api/v1/customergroup/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchCustomerGroupsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a customergroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCustomerGroupRequest} updateCustomerGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupUpdate: async (id: string, tenant: string, updateCustomerGroupRequest: UpdateCustomerGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerGroupUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerGroupUpdate', 'tenant', tenant)
            // verify required parameter 'updateCustomerGroupRequest' is not null or undefined
            assertParamExists('customerGroupUpdate', 'updateCustomerGroupRequest', updateCustomerGroupRequest)
            const localVarPath = `/api/v1/customergroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomerGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerGroupApi - functional programming interface
 * @export
 */
export const CustomerGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new customergroup.
         * @param {string} tenant Description
         * @param {CreateCustomerGroupRequest} createCustomerGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupCreate(tenant: string, createCustomerGroupRequest: CreateCustomerGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupCreate(tenant, createCustomerGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a customergroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get customergroup details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search customergroup using available filters.
         * @param {string} tenant Description
         * @param {SearchCustomerGroupsRequest} searchCustomerGroupsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupSearch(tenant: string, searchCustomerGroupsRequest: SearchCustomerGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfCustomerGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupSearch(tenant, searchCustomerGroupsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a customergroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCustomerGroupRequest} updateCustomerGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGroupUpdate(id: string, tenant: string, updateCustomerGroupRequest: UpdateCustomerGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGroupUpdate(id, tenant, updateCustomerGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerGroupApi - factory interface
 * @export
 */
export const CustomerGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerGroupApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new customergroup.
         * @param {string} tenant Description
         * @param {CreateCustomerGroupRequest} createCustomerGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupCreate(tenant: string, createCustomerGroupRequest: CreateCustomerGroupRequest, options?: any): AxiosPromise<string> {
            return localVarFp.customerGroupCreate(tenant, createCustomerGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a customergroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.customerGroupDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get customergroup details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupGet(id: string, tenant: string, options?: any): AxiosPromise<CustomerGroupDto> {
            return localVarFp.customerGroupGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search customergroup using available filters.
         * @param {string} tenant Description
         * @param {SearchCustomerGroupsRequest} searchCustomerGroupsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupSearch(tenant: string, searchCustomerGroupsRequest: SearchCustomerGroupsRequest, options?: any): AxiosPromise<PaginationResponseOfCustomerGroupDto> {
            return localVarFp.customerGroupSearch(tenant, searchCustomerGroupsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a customergroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCustomerGroupRequest} updateCustomerGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGroupUpdate(id: string, tenant: string, updateCustomerGroupRequest: UpdateCustomerGroupRequest, options?: any): AxiosPromise<string> {
            return localVarFp.customerGroupUpdate(id, tenant, updateCustomerGroupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerGroupApi - object-oriented interface
 * @export
 * @class CustomerGroupApi
 * @extends {BaseAPI}
 */
export class CustomerGroupApi extends BaseAPI {
    /**
     * 
     * @summary Create a new customergroup.
     * @param {string} tenant Description
     * @param {CreateCustomerGroupRequest} createCustomerGroupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupApi
     */
    public customerGroupCreate(tenant: string, createCustomerGroupRequest: CreateCustomerGroupRequest, options?: AxiosRequestConfig) {
        return CustomerGroupApiFp(this.configuration).customerGroupCreate(tenant, createCustomerGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a customergroup.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupApi
     */
    public customerGroupDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return CustomerGroupApiFp(this.configuration).customerGroupDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get customergroup details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupApi
     */
    public customerGroupGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return CustomerGroupApiFp(this.configuration).customerGroupGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search customergroup using available filters.
     * @param {string} tenant Description
     * @param {SearchCustomerGroupsRequest} searchCustomerGroupsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupApi
     */
    public customerGroupSearch(tenant: string, searchCustomerGroupsRequest: SearchCustomerGroupsRequest, options?: AxiosRequestConfig) {
        return CustomerGroupApiFp(this.configuration).customerGroupSearch(tenant, searchCustomerGroupsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a customergroup.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateCustomerGroupRequest} updateCustomerGroupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupApi
     */
    public customerGroupUpdate(id: string, tenant: string, updateCustomerGroupRequest: UpdateCustomerGroupRequest, options?: AxiosRequestConfig) {
        return CustomerGroupApiFp(this.configuration).customerGroupUpdate(id, tenant, updateCustomerGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
