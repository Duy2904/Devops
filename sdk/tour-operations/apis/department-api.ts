/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateDepartmentRequest } from '../models';
// @ts-ignore
import { DepartmentDto } from '../models';
// @ts-ignore
import { DropdownDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfSearchDepartmentViewDto } from '../models';
// @ts-ignore
import { SearchDepartmentViewRequest } from '../models';
// @ts-ignore
import { UpdateDepartmentRequest } from '../models';
/**
 * DepartmentApi - axios parameter creator
 * @export
 */
export const DepartmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new department.
         * @param {string} tenant Description
         * @param {CreateDepartmentRequest} createDepartmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentCreate: async (tenant: string, createDepartmentRequest: CreateDepartmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('departmentCreate', 'tenant', tenant)
            // verify required parameter 'createDepartmentRequest' is not null or undefined
            assertParamExists('departmentCreate', 'createDepartmentRequest', createDepartmentRequest)
            const localVarPath = `/api/v1/department`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDepartmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a department.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('departmentDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get department details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('departmentGet', 'tenant', tenant)
            const localVarPath = `/api/v1/department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get department dropdown.
         * @param {string} branchId 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentGetDropdown: async (branchId: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'branchId' is not null or undefined
            assertParamExists('departmentGetDropdown', 'branchId', branchId)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('departmentGetDropdown', 'tenant', tenant)
            const localVarPath = `/api/v1/department/branch/{branchId}`
                .replace(`{${"branchId"}}`, encodeURIComponent(String(branchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search department using available filters.
         * @param {string} tenant Description
         * @param {SearchDepartmentViewRequest} searchDepartmentViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentSearch: async (tenant: string, searchDepartmentViewRequest: SearchDepartmentViewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('departmentSearch', 'tenant', tenant)
            // verify required parameter 'searchDepartmentViewRequest' is not null or undefined
            assertParamExists('departmentSearch', 'searchDepartmentViewRequest', searchDepartmentViewRequest)
            const localVarPath = `/api/v1/department/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchDepartmentViewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a department.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateDepartmentRequest} updateDepartmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentUpdate: async (id: string, tenant: string, updateDepartmentRequest: UpdateDepartmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('departmentUpdate', 'tenant', tenant)
            // verify required parameter 'updateDepartmentRequest' is not null or undefined
            assertParamExists('departmentUpdate', 'updateDepartmentRequest', updateDepartmentRequest)
            const localVarPath = `/api/v1/department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDepartmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentApi - functional programming interface
 * @export
 */
export const DepartmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new department.
         * @param {string} tenant Description
         * @param {CreateDepartmentRequest} createDepartmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentCreate(tenant: string, createDepartmentRequest: CreateDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentCreate(tenant, createDepartmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a department.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get department details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get department dropdown.
         * @param {string} branchId 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentGetDropdown(branchId: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentGetDropdown(branchId, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search department using available filters.
         * @param {string} tenant Description
         * @param {SearchDepartmentViewRequest} searchDepartmentViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentSearch(tenant: string, searchDepartmentViewRequest: SearchDepartmentViewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfSearchDepartmentViewDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentSearch(tenant, searchDepartmentViewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a department.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateDepartmentRequest} updateDepartmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentUpdate(id: string, tenant: string, updateDepartmentRequest: UpdateDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentUpdate(id, tenant, updateDepartmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentApi - factory interface
 * @export
 */
export const DepartmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new department.
         * @param {string} tenant Description
         * @param {CreateDepartmentRequest} createDepartmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentCreate(tenant: string, createDepartmentRequest: CreateDepartmentRequest, options?: any): AxiosPromise<string> {
            return localVarFp.departmentCreate(tenant, createDepartmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a department.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.departmentDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get department details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentGet(id: string, tenant: string, options?: any): AxiosPromise<DepartmentDto> {
            return localVarFp.departmentGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get department dropdown.
         * @param {string} branchId 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentGetDropdown(branchId: string, tenant: string, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.departmentGetDropdown(branchId, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search department using available filters.
         * @param {string} tenant Description
         * @param {SearchDepartmentViewRequest} searchDepartmentViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentSearch(tenant: string, searchDepartmentViewRequest: SearchDepartmentViewRequest, options?: any): AxiosPromise<PaginationResponseOfSearchDepartmentViewDto> {
            return localVarFp.departmentSearch(tenant, searchDepartmentViewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a department.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateDepartmentRequest} updateDepartmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentUpdate(id: string, tenant: string, updateDepartmentRequest: UpdateDepartmentRequest, options?: any): AxiosPromise<string> {
            return localVarFp.departmentUpdate(id, tenant, updateDepartmentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepartmentApi - object-oriented interface
 * @export
 * @class DepartmentApi
 * @extends {BaseAPI}
 */
export class DepartmentApi extends BaseAPI {
    /**
     * 
     * @summary Create a new department.
     * @param {string} tenant Description
     * @param {CreateDepartmentRequest} createDepartmentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public departmentCreate(tenant: string, createDepartmentRequest: CreateDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).departmentCreate(tenant, createDepartmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a department.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public departmentDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).departmentDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get department details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public departmentGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).departmentGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get department dropdown.
     * @param {string} branchId 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public departmentGetDropdown(branchId: string, tenant: string, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).departmentGetDropdown(branchId, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search department using available filters.
     * @param {string} tenant Description
     * @param {SearchDepartmentViewRequest} searchDepartmentViewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public departmentSearch(tenant: string, searchDepartmentViewRequest: SearchDepartmentViewRequest, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).departmentSearch(tenant, searchDepartmentViewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a department.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateDepartmentRequest} updateDepartmentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public departmentUpdate(id: string, tenant: string, updateDepartmentRequest: UpdateDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).departmentUpdate(id, tenant, updateDepartmentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
