/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConfirmQuoteRequest } from '../models';
// @ts-ignore
import { CreateQuoteRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { ExportQuoteRequest } from '../models';
// @ts-ignore
import { ExportQuotesRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfSearchQuoteDto } from '../models';
// @ts-ignore
import { QuoteDetailDto } from '../models';
// @ts-ignore
import { SearchQuotesRequest } from '../models';
// @ts-ignore
import { UpdateQuoteRequest } from '../models';
/**
 * QuoteApi - axios parameter creator
 * @export
 */
export const QuoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuotesRequest} exportQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteAgencyExport: async (tenant: string, exportQuotesRequest: ExportQuotesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteAgencyExport', 'tenant', tenant)
            // verify required parameter 'exportQuotesRequest' is not null or undefined
            assertParamExists('quoteAgencyExport', 'exportQuotesRequest', exportQuotesRequest)
            const localVarPath = `/api/v1/quote/agent/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportQuotesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteAgencyExportDetail: async (id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quoteAgencyExportDetail', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteAgencyExportDetail', 'tenant', tenant)
            // verify required parameter 'exportQuoteRequest' is not null or undefined
            assertParamExists('quoteAgencyExportDetail', 'exportQuoteRequest', exportQuoteRequest)
            const localVarPath = `/api/v1/quote/{id}/agent/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteAgencySearch: async (tenant: string, searchQuotesRequest: SearchQuotesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteAgencySearch', 'tenant', tenant)
            // verify required parameter 'searchQuotesRequest' is not null or undefined
            assertParamExists('quoteAgencySearch', 'searchQuotesRequest', searchQuotesRequest)
            const localVarPath = `/api/v1/quote/agent/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchQuotesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ConfirmQuoteRequest} confirmQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteConfirm: async (tenant: string, confirmQuoteRequest: ConfirmQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteConfirm', 'tenant', tenant)
            // verify required parameter 'confirmQuoteRequest' is not null or undefined
            assertParamExists('quoteConfirm', 'confirmQuoteRequest', confirmQuoteRequest)
            const localVarPath = `/api/v1/quote/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new Quote.
         * @param {string} tenant Description
         * @param {CreateQuoteRequest} createQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCreate: async (tenant: string, createQuoteRequest: CreateQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteCreate', 'tenant', tenant)
            // verify required parameter 'createQuoteRequest' is not null or undefined
            assertParamExists('quoteCreate', 'createQuoteRequest', createQuoteRequest)
            const localVarPath = `/api/v1/quote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Quote.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quoteDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/quote/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuotesRequest} exportQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteExport: async (tenant: string, exportQuotesRequest: ExportQuotesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteExport', 'tenant', tenant)
            // verify required parameter 'exportQuotesRequest' is not null or undefined
            assertParamExists('quoteExport', 'exportQuotesRequest', exportQuotesRequest)
            const localVarPath = `/api/v1/quote/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportQuotesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteExportDetail: async (id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quoteExportDetail', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteExportDetail', 'tenant', tenant)
            // verify required parameter 'exportQuoteRequest' is not null or undefined
            assertParamExists('quoteExportDetail', 'exportQuoteRequest', exportQuoteRequest)
            const localVarPath = `/api/v1/quote/{id}/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Quote detail.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quoteGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGet', 'tenant', tenant)
            const localVarPath = `/api/v1/quote/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Quotes Code.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGetCode: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteGetCode', 'tenant', tenant)
            const localVarPath = `/api/v1/quote/gen-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteSearch: async (tenant: string, searchQuotesRequest: SearchQuotesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteSearch', 'tenant', tenant)
            // verify required parameter 'searchQuotesRequest' is not null or undefined
            assertParamExists('quoteSearch', 'searchQuotesRequest', searchQuotesRequest)
            const localVarPath = `/api/v1/quote/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchQuotesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteSendConfirm: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quoteSendConfirm', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteSendConfirm', 'tenant', tenant)
            const localVarPath = `/api/v1/quote/{id}/send-confirm`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a new Quote.
         * @param {string} tenant Description
         * @param {UpdateQuoteRequest} updateQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteUpdate: async (tenant: string, updateQuoteRequest: UpdateQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('quoteUpdate', 'tenant', tenant)
            // verify required parameter 'updateQuoteRequest' is not null or undefined
            assertParamExists('quoteUpdate', 'updateQuoteRequest', updateQuoteRequest)
            const localVarPath = `/api/v1/quote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuoteApi - functional programming interface
 * @export
 */
export const QuoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuoteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuotesRequest} exportQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteAgencyExport(tenant: string, exportQuotesRequest: ExportQuotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteAgencyExport(tenant, exportQuotesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteAgencyExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteAgencyExportDetail(id, tenant, exportQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteAgencySearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfSearchQuoteDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteAgencySearch(tenant, searchQuotesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ConfirmQuoteRequest} confirmQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteConfirm(tenant: string, confirmQuoteRequest: ConfirmQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteConfirm(tenant, confirmQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new Quote.
         * @param {string} tenant Description
         * @param {CreateQuoteRequest} createQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteCreate(tenant: string, createQuoteRequest: CreateQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteCreate(tenant, createQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Quote.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuotesRequest} exportQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteExport(tenant: string, exportQuotesRequest: ExportQuotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteExport(tenant, exportQuotesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteExportDetail(id, tenant, exportQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Quote detail.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate Quotes Code.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteGetCode(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteGetCode(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteSearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfSearchQuoteDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteSearch(tenant, searchQuotesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteSendConfirm(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteSendConfirm(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a new Quote.
         * @param {string} tenant Description
         * @param {UpdateQuoteRequest} updateQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quoteUpdate(tenant: string, updateQuoteRequest: UpdateQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quoteUpdate(tenant, updateQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuoteApi - factory interface
 * @export
 */
export const QuoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuoteApiFp(configuration)
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuotesRequest} exportQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteAgencyExport(tenant: string, exportQuotesRequest: ExportQuotesRequest, options?: any): AxiosPromise<File> {
            return localVarFp.quoteAgencyExport(tenant, exportQuotesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteAgencyExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: any): AxiosPromise<File> {
            return localVarFp.quoteAgencyExportDetail(id, tenant, exportQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteAgencySearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: any): AxiosPromise<PaginationResponseOfSearchQuoteDto> {
            return localVarFp.quoteAgencySearch(tenant, searchQuotesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ConfirmQuoteRequest} confirmQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteConfirm(tenant: string, confirmQuoteRequest: ConfirmQuoteRequest, options?: any): AxiosPromise<string> {
            return localVarFp.quoteConfirm(tenant, confirmQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new Quote.
         * @param {string} tenant Description
         * @param {CreateQuoteRequest} createQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteCreate(tenant: string, createQuoteRequest: CreateQuoteRequest, options?: any): AxiosPromise<string> {
            return localVarFp.quoteCreate(tenant, createQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Quote.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.quoteDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportQuotesRequest} exportQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteExport(tenant: string, exportQuotesRequest: ExportQuotesRequest, options?: any): AxiosPromise<File> {
            return localVarFp.quoteExport(tenant, exportQuotesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportQuoteRequest} exportQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: any): AxiosPromise<File> {
            return localVarFp.quoteExportDetail(id, tenant, exportQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Quote detail.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGet(id: string, tenant: string, options?: any): AxiosPromise<QuoteDetailDto> {
            return localVarFp.quoteGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Quotes Code.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteGetCode(tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.quoteGetCode(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Quote using available filters.
         * @param {string} tenant Description
         * @param {SearchQuotesRequest} searchQuotesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteSearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: any): AxiosPromise<PaginationResponseOfSearchQuoteDto> {
            return localVarFp.quoteSearch(tenant, searchQuotesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteSendConfirm(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.quoteSendConfirm(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a new Quote.
         * @param {string} tenant Description
         * @param {UpdateQuoteRequest} updateQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quoteUpdate(tenant: string, updateQuoteRequest: UpdateQuoteRequest, options?: any): AxiosPromise<string> {
            return localVarFp.quoteUpdate(tenant, updateQuoteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuoteApi - object-oriented interface
 * @export
 * @class QuoteApi
 * @extends {BaseAPI}
 */
export class QuoteApi extends BaseAPI {
    /**
     * 
     * @param {string} tenant Description
     * @param {ExportQuotesRequest} exportQuotesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteAgencyExport(tenant: string, exportQuotesRequest: ExportQuotesRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteAgencyExport(tenant, exportQuotesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} tenant Description
     * @param {ExportQuoteRequest} exportQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteAgencyExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteAgencyExportDetail(id, tenant, exportQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Quote using available filters.
     * @param {string} tenant Description
     * @param {SearchQuotesRequest} searchQuotesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteAgencySearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteAgencySearch(tenant, searchQuotesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Description
     * @param {ConfirmQuoteRequest} confirmQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteConfirm(tenant: string, confirmQuoteRequest: ConfirmQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteConfirm(tenant, confirmQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new Quote.
     * @param {string} tenant Description
     * @param {CreateQuoteRequest} createQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteCreate(tenant: string, createQuoteRequest: CreateQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteCreate(tenant, createQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Quote.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Description
     * @param {ExportQuotesRequest} exportQuotesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteExport(tenant: string, exportQuotesRequest: ExportQuotesRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteExport(tenant, exportQuotesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} tenant Description
     * @param {ExportQuoteRequest} exportQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteExportDetail(id: string, tenant: string, exportQuoteRequest: ExportQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteExportDetail(id, tenant, exportQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Quote detail.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Quotes Code.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteGetCode(tenant: string, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteGetCode(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Quote using available filters.
     * @param {string} tenant Description
     * @param {SearchQuotesRequest} searchQuotesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteSearch(tenant: string, searchQuotesRequest: SearchQuotesRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteSearch(tenant, searchQuotesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteSendConfirm(id: string, tenant: string, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteSendConfirm(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a new Quote.
     * @param {string} tenant Description
     * @param {UpdateQuoteRequest} updateQuoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public quoteUpdate(tenant: string, updateQuoteRequest: UpdateQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).quoteUpdate(tenant, updateQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
