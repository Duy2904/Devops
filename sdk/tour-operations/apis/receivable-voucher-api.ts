/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApproveReceivableVoucherRequest } from '../models';
// @ts-ignore
import { CreateReceivableVoucherRequest } from '../models';
// @ts-ignore
import { DocumentType } from '../models';
// @ts-ignore
import { DropdownRemainAmtDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { ExportReceivableVoucherRequest } from '../models';
// @ts-ignore
import { GetRemainAmtRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfReceivableVoucherSearchDto } from '../models';
// @ts-ignore
import { ReceivableVoucherDto } from '../models';
// @ts-ignore
import { SearchReceivableVouchersRequest } from '../models';
// @ts-ignore
import { SendForConfirmationRequest } from '../models';
// @ts-ignore
import { UpdateReceivableVoucherRequest } from '../models';
/**
 * ReceivableVoucherApi - axios parameter creator
 * @export
 */
export const ReceivableVoucherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary KT confirm ReceivableVoucher.
         * @param {string} tenant Description
         * @param {ApproveReceivableVoucherRequest} approveReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherApprove: async (tenant: string, approveReceivableVoucherRequest: ApproveReceivableVoucherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherApprove', 'tenant', tenant)
            // verify required parameter 'approveReceivableVoucherRequest' is not null or undefined
            assertParamExists('receivableVoucherApprove', 'approveReceivableVoucherRequest', approveReceivableVoucherRequest)
            const localVarPath = `/api/v1/receivablevoucher/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approveReceivableVoucherRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new ReceivableVoucher.
         * @param {string} tenant Description
         * @param {CreateReceivableVoucherRequest} createReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherCreate: async (tenant: string, createReceivableVoucherRequest: CreateReceivableVoucherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherCreate', 'tenant', tenant)
            // verify required parameter 'createReceivableVoucherRequest' is not null or undefined
            assertParamExists('receivableVoucherCreate', 'createReceivableVoucherRequest', createReceivableVoucherRequest)
            const localVarPath = `/api/v1/receivablevoucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReceivableVoucherRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a ReceivableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('receivableVoucherDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/receivablevoucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download ReceivableVoucher by id.
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherDownload: async (tenant: string, id?: string, type?: DocumentType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherDownload', 'tenant', tenant)
            const localVarPath = `/api/v1/receivablevoucher/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dropdown SaleOrder/TourSchedule.
         * @param {string} tenant Description
         * @param {GetRemainAmtRequest} getRemainAmtRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherDropdown: async (tenant: string, getRemainAmtRequest: GetRemainAmtRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherDropdown', 'tenant', tenant)
            // verify required parameter 'getRemainAmtRequest' is not null or undefined
            assertParamExists('receivableVoucherDropdown', 'getRemainAmtRequest', getRemainAmtRequest)
            const localVarPath = `/api/v1/receivablevoucher/dropdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getRemainAmtRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export ReceivableVoucher using available filters.
         * @param {string} tenant Description
         * @param {ExportReceivableVoucherRequest} exportReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherExport: async (tenant: string, exportReceivableVoucherRequest: ExportReceivableVoucherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherExport', 'tenant', tenant)
            // verify required parameter 'exportReceivableVoucherRequest' is not null or undefined
            assertParamExists('receivableVoucherExport', 'exportReceivableVoucherRequest', exportReceivableVoucherRequest)
            const localVarPath = `/api/v1/receivablevoucher/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportReceivableVoucherRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ReceivableVoucher details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('receivableVoucherGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherGet', 'tenant', tenant)
            const localVarPath = `/api/v1/receivablevoucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Receivable VoucherNo .
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherGetReceiveVoucherNo: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherGetReceiveVoucherNo', 'tenant', tenant)
            const localVarPath = `/api/v1/receivablevoucher/gen-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search ReceivableVoucher using available filters.
         * @param {string} tenant Description
         * @param {SearchReceivableVouchersRequest} searchReceivableVouchersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherSearch: async (tenant: string, searchReceivableVouchersRequest: SearchReceivableVouchersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherSearch', 'tenant', tenant)
            // verify required parameter 'searchReceivableVouchersRequest' is not null or undefined
            assertParamExists('receivableVoucherSearch', 'searchReceivableVouchersRequest', searchReceivableVouchersRequest)
            const localVarPath = `/api/v1/receivablevoucher/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchReceivableVouchersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send for confirmation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForConfirmationRequest} sendForConfirmationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherSendForConfirmation: async (id: string, tenant: string, sendForConfirmationRequest: SendForConfirmationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('receivableVoucherSendForConfirmation', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherSendForConfirmation', 'tenant', tenant)
            // verify required parameter 'sendForConfirmationRequest' is not null or undefined
            assertParamExists('receivableVoucherSendForConfirmation', 'sendForConfirmationRequest', sendForConfirmationRequest)
            const localVarPath = `/api/v1/receivablevoucher/{id}/send-for-confirmation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendForConfirmationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a ReceivableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateReceivableVoucherRequest} updateReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherUpdate: async (id: string, tenant: string, updateReceivableVoucherRequest: UpdateReceivableVoucherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('receivableVoucherUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('receivableVoucherUpdate', 'tenant', tenant)
            // verify required parameter 'updateReceivableVoucherRequest' is not null or undefined
            assertParamExists('receivableVoucherUpdate', 'updateReceivableVoucherRequest', updateReceivableVoucherRequest)
            const localVarPath = `/api/v1/receivablevoucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReceivableVoucherRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReceivableVoucherApi - functional programming interface
 * @export
 */
export const ReceivableVoucherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReceivableVoucherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary KT confirm ReceivableVoucher.
         * @param {string} tenant Description
         * @param {ApproveReceivableVoucherRequest} approveReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherApprove(tenant: string, approveReceivableVoucherRequest: ApproveReceivableVoucherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherApprove(tenant, approveReceivableVoucherRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new ReceivableVoucher.
         * @param {string} tenant Description
         * @param {CreateReceivableVoucherRequest} createReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherCreate(tenant: string, createReceivableVoucherRequest: CreateReceivableVoucherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherCreate(tenant, createReceivableVoucherRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a ReceivableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Download ReceivableVoucher by id.
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherDownload(tenant: string, id?: string, type?: DocumentType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherDownload(tenant, id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Dropdown SaleOrder/TourSchedule.
         * @param {string} tenant Description
         * @param {GetRemainAmtRequest} getRemainAmtRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherDropdown(tenant: string, getRemainAmtRequest: GetRemainAmtRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownRemainAmtDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherDropdown(tenant, getRemainAmtRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Export ReceivableVoucher using available filters.
         * @param {string} tenant Description
         * @param {ExportReceivableVoucherRequest} exportReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherExport(tenant: string, exportReceivableVoucherRequest: ExportReceivableVoucherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherExport(tenant, exportReceivableVoucherRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get ReceivableVoucher details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceivableVoucherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate Receivable VoucherNo .
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherGetReceiveVoucherNo(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherGetReceiveVoucherNo(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search ReceivableVoucher using available filters.
         * @param {string} tenant Description
         * @param {SearchReceivableVouchersRequest} searchReceivableVouchersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherSearch(tenant: string, searchReceivableVouchersRequest: SearchReceivableVouchersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfReceivableVoucherSearchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherSearch(tenant, searchReceivableVouchersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send for confirmation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForConfirmationRequest} sendForConfirmationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherSendForConfirmation(id: string, tenant: string, sendForConfirmationRequest: SendForConfirmationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherSendForConfirmation(id, tenant, sendForConfirmationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a ReceivableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateReceivableVoucherRequest} updateReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivableVoucherUpdate(id: string, tenant: string, updateReceivableVoucherRequest: UpdateReceivableVoucherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivableVoucherUpdate(id, tenant, updateReceivableVoucherRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReceivableVoucherApi - factory interface
 * @export
 */
export const ReceivableVoucherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReceivableVoucherApiFp(configuration)
    return {
        /**
         * 
         * @summary KT confirm ReceivableVoucher.
         * @param {string} tenant Description
         * @param {ApproveReceivableVoucherRequest} approveReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherApprove(tenant: string, approveReceivableVoucherRequest: ApproveReceivableVoucherRequest, options?: any): AxiosPromise<number> {
            return localVarFp.receivableVoucherApprove(tenant, approveReceivableVoucherRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new ReceivableVoucher.
         * @param {string} tenant Description
         * @param {CreateReceivableVoucherRequest} createReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherCreate(tenant: string, createReceivableVoucherRequest: CreateReceivableVoucherRequest, options?: any): AxiosPromise<string> {
            return localVarFp.receivableVoucherCreate(tenant, createReceivableVoucherRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a ReceivableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.receivableVoucherDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download ReceivableVoucher by id.
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherDownload(tenant: string, id?: string, type?: DocumentType, options?: any): AxiosPromise<string> {
            return localVarFp.receivableVoucherDownload(tenant, id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Dropdown SaleOrder/TourSchedule.
         * @param {string} tenant Description
         * @param {GetRemainAmtRequest} getRemainAmtRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherDropdown(tenant: string, getRemainAmtRequest: GetRemainAmtRequest, options?: any): AxiosPromise<Array<DropdownRemainAmtDto>> {
            return localVarFp.receivableVoucherDropdown(tenant, getRemainAmtRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export ReceivableVoucher using available filters.
         * @param {string} tenant Description
         * @param {ExportReceivableVoucherRequest} exportReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherExport(tenant: string, exportReceivableVoucherRequest: ExportReceivableVoucherRequest, options?: any): AxiosPromise<File> {
            return localVarFp.receivableVoucherExport(tenant, exportReceivableVoucherRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ReceivableVoucher details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherGet(id: string, tenant: string, options?: any): AxiosPromise<ReceivableVoucherDto> {
            return localVarFp.receivableVoucherGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Receivable VoucherNo .
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherGetReceiveVoucherNo(tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.receivableVoucherGetReceiveVoucherNo(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search ReceivableVoucher using available filters.
         * @param {string} tenant Description
         * @param {SearchReceivableVouchersRequest} searchReceivableVouchersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherSearch(tenant: string, searchReceivableVouchersRequest: SearchReceivableVouchersRequest, options?: any): AxiosPromise<PaginationResponseOfReceivableVoucherSearchDto> {
            return localVarFp.receivableVoucherSearch(tenant, searchReceivableVouchersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send for confirmation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForConfirmationRequest} sendForConfirmationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherSendForConfirmation(id: string, tenant: string, sendForConfirmationRequest: SendForConfirmationRequest, options?: any): AxiosPromise<string> {
            return localVarFp.receivableVoucherSendForConfirmation(id, tenant, sendForConfirmationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a ReceivableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateReceivableVoucherRequest} updateReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivableVoucherUpdate(id: string, tenant: string, updateReceivableVoucherRequest: UpdateReceivableVoucherRequest, options?: any): AxiosPromise<string> {
            return localVarFp.receivableVoucherUpdate(id, tenant, updateReceivableVoucherRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReceivableVoucherApi - object-oriented interface
 * @export
 * @class ReceivableVoucherApi
 * @extends {BaseAPI}
 */
export class ReceivableVoucherApi extends BaseAPI {
    /**
     * 
     * @summary KT confirm ReceivableVoucher.
     * @param {string} tenant Description
     * @param {ApproveReceivableVoucherRequest} approveReceivableVoucherRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherApi
     */
    public receivableVoucherApprove(tenant: string, approveReceivableVoucherRequest: ApproveReceivableVoucherRequest, options?: AxiosRequestConfig) {
        return ReceivableVoucherApiFp(this.configuration).receivableVoucherApprove(tenant, approveReceivableVoucherRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new ReceivableVoucher.
     * @param {string} tenant Description
     * @param {CreateReceivableVoucherRequest} createReceivableVoucherRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherApi
     */
    public receivableVoucherCreate(tenant: string, createReceivableVoucherRequest: CreateReceivableVoucherRequest, options?: AxiosRequestConfig) {
        return ReceivableVoucherApiFp(this.configuration).receivableVoucherCreate(tenant, createReceivableVoucherRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a ReceivableVoucher.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherApi
     */
    public receivableVoucherDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return ReceivableVoucherApiFp(this.configuration).receivableVoucherDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download ReceivableVoucher by id.
     * @param {string} tenant Description
     * @param {string} [id] 
     * @param {DocumentType} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherApi
     */
    public receivableVoucherDownload(tenant: string, id?: string, type?: DocumentType, options?: AxiosRequestConfig) {
        return ReceivableVoucherApiFp(this.configuration).receivableVoucherDownload(tenant, id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Dropdown SaleOrder/TourSchedule.
     * @param {string} tenant Description
     * @param {GetRemainAmtRequest} getRemainAmtRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherApi
     */
    public receivableVoucherDropdown(tenant: string, getRemainAmtRequest: GetRemainAmtRequest, options?: AxiosRequestConfig) {
        return ReceivableVoucherApiFp(this.configuration).receivableVoucherDropdown(tenant, getRemainAmtRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export ReceivableVoucher using available filters.
     * @param {string} tenant Description
     * @param {ExportReceivableVoucherRequest} exportReceivableVoucherRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherApi
     */
    public receivableVoucherExport(tenant: string, exportReceivableVoucherRequest: ExportReceivableVoucherRequest, options?: AxiosRequestConfig) {
        return ReceivableVoucherApiFp(this.configuration).receivableVoucherExport(tenant, exportReceivableVoucherRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ReceivableVoucher details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherApi
     */
    public receivableVoucherGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return ReceivableVoucherApiFp(this.configuration).receivableVoucherGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Receivable VoucherNo .
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherApi
     */
    public receivableVoucherGetReceiveVoucherNo(tenant: string, options?: AxiosRequestConfig) {
        return ReceivableVoucherApiFp(this.configuration).receivableVoucherGetReceiveVoucherNo(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search ReceivableVoucher using available filters.
     * @param {string} tenant Description
     * @param {SearchReceivableVouchersRequest} searchReceivableVouchersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherApi
     */
    public receivableVoucherSearch(tenant: string, searchReceivableVouchersRequest: SearchReceivableVouchersRequest, options?: AxiosRequestConfig) {
        return ReceivableVoucherApiFp(this.configuration).receivableVoucherSearch(tenant, searchReceivableVouchersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send for confirmation.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {SendForConfirmationRequest} sendForConfirmationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherApi
     */
    public receivableVoucherSendForConfirmation(id: string, tenant: string, sendForConfirmationRequest: SendForConfirmationRequest, options?: AxiosRequestConfig) {
        return ReceivableVoucherApiFp(this.configuration).receivableVoucherSendForConfirmation(id, tenant, sendForConfirmationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a ReceivableVoucher.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateReceivableVoucherRequest} updateReceivableVoucherRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivableVoucherApi
     */
    public receivableVoucherUpdate(id: string, tenant: string, updateReceivableVoucherRequest: UpdateReceivableVoucherRequest, options?: AxiosRequestConfig) {
        return ReceivableVoucherApiFp(this.configuration).receivableVoucherUpdate(id, tenant, updateReceivableVoucherRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
