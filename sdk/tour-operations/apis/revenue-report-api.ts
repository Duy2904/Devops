/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DropdownDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { ExportRevenueReportRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { SearchRevenueReportViewPaginationDto } from '../models';
// @ts-ignore
import { SearchRevenueReportViewRequest } from '../models';
/**
 * RevenueReportApi - axios parameter creator
 * @export
 */
export const RevenueReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportRevenueReportRequest} exportRevenueReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revenueReportExport: async (tenant: string, exportRevenueReportRequest: ExportRevenueReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('revenueReportExport', 'tenant', tenant)
            // verify required parameter 'exportRevenueReportRequest' is not null or undefined
            assertParamExists('revenueReportExport', 'exportRevenueReportRequest', exportRevenueReportRequest)
            const localVarPath = `/api/v1/revenuereport/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportRevenueReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list created by SO.
         * @param {string} tourNature 
         * @param {string} groupId 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revenueReportGetCreatedBy: async (tourNature: string, groupId: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tourNature' is not null or undefined
            assertParamExists('revenueReportGetCreatedBy', 'tourNature', tourNature)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('revenueReportGetCreatedBy', 'groupId', groupId)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('revenueReportGetCreatedBy', 'tenant', tenant)
            const localVarPath = `/api/v1/revenuereport/{tourNature}/created-by/{groupId}`
                .replace(`{${"tourNature"}}`, encodeURIComponent(String(tourNature)))
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get provider.
         * @param {string} tourNature 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revenueReportGetSOProviders: async (tourNature: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tourNature' is not null or undefined
            assertParamExists('revenueReportGetSOProviders', 'tourNature', tourNature)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('revenueReportGetSOProviders', 'tenant', tenant)
            const localVarPath = `/api/v1/revenuereport/{tourNature}/provider`
                .replace(`{${"tourNature"}}`, encodeURIComponent(String(tourNature)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Revenue Report using available filters.
         * @param {string} tenant Description
         * @param {SearchRevenueReportViewRequest} searchRevenueReportViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revenueReportSearch: async (tenant: string, searchRevenueReportViewRequest: SearchRevenueReportViewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('revenueReportSearch', 'tenant', tenant)
            // verify required parameter 'searchRevenueReportViewRequest' is not null or undefined
            assertParamExists('revenueReportSearch', 'searchRevenueReportViewRequest', searchRevenueReportViewRequest)
            const localVarPath = `/api/v1/revenuereport/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchRevenueReportViewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RevenueReportApi - functional programming interface
 * @export
 */
export const RevenueReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RevenueReportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportRevenueReportRequest} exportRevenueReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revenueReportExport(tenant: string, exportRevenueReportRequest: ExportRevenueReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revenueReportExport(tenant, exportRevenueReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list created by SO.
         * @param {string} tourNature 
         * @param {string} groupId 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revenueReportGetCreatedBy(tourNature: string, groupId: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revenueReportGetCreatedBy(tourNature, groupId, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get provider.
         * @param {string} tourNature 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revenueReportGetSOProviders(tourNature: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revenueReportGetSOProviders(tourNature, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Revenue Report using available filters.
         * @param {string} tenant Description
         * @param {SearchRevenueReportViewRequest} searchRevenueReportViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revenueReportSearch(tenant: string, searchRevenueReportViewRequest: SearchRevenueReportViewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchRevenueReportViewPaginationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revenueReportSearch(tenant, searchRevenueReportViewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RevenueReportApi - factory interface
 * @export
 */
export const RevenueReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RevenueReportApiFp(configuration)
    return {
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportRevenueReportRequest} exportRevenueReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revenueReportExport(tenant: string, exportRevenueReportRequest: ExportRevenueReportRequest, options?: any): AxiosPromise<File> {
            return localVarFp.revenueReportExport(tenant, exportRevenueReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list created by SO.
         * @param {string} tourNature 
         * @param {string} groupId 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revenueReportGetCreatedBy(tourNature: string, groupId: string, tenant: string, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.revenueReportGetCreatedBy(tourNature, groupId, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get provider.
         * @param {string} tourNature 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revenueReportGetSOProviders(tourNature: string, tenant: string, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.revenueReportGetSOProviders(tourNature, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Revenue Report using available filters.
         * @param {string} tenant Description
         * @param {SearchRevenueReportViewRequest} searchRevenueReportViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revenueReportSearch(tenant: string, searchRevenueReportViewRequest: SearchRevenueReportViewRequest, options?: any): AxiosPromise<SearchRevenueReportViewPaginationDto> {
            return localVarFp.revenueReportSearch(tenant, searchRevenueReportViewRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RevenueReportApi - object-oriented interface
 * @export
 * @class RevenueReportApi
 * @extends {BaseAPI}
 */
export class RevenueReportApi extends BaseAPI {
    /**
     * 
     * @param {string} tenant Description
     * @param {ExportRevenueReportRequest} exportRevenueReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RevenueReportApi
     */
    public revenueReportExport(tenant: string, exportRevenueReportRequest: ExportRevenueReportRequest, options?: AxiosRequestConfig) {
        return RevenueReportApiFp(this.configuration).revenueReportExport(tenant, exportRevenueReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list created by SO.
     * @param {string} tourNature 
     * @param {string} groupId 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RevenueReportApi
     */
    public revenueReportGetCreatedBy(tourNature: string, groupId: string, tenant: string, options?: AxiosRequestConfig) {
        return RevenueReportApiFp(this.configuration).revenueReportGetCreatedBy(tourNature, groupId, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get provider.
     * @param {string} tourNature 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RevenueReportApi
     */
    public revenueReportGetSOProviders(tourNature: string, tenant: string, options?: AxiosRequestConfig) {
        return RevenueReportApiFp(this.configuration).revenueReportGetSOProviders(tourNature, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Revenue Report using available filters.
     * @param {string} tenant Description
     * @param {SearchRevenueReportViewRequest} searchRevenueReportViewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RevenueReportApi
     */
    public revenueReportSearch(tenant: string, searchRevenueReportViewRequest: SearchRevenueReportViewRequest, options?: AxiosRequestConfig) {
        return RevenueReportApiFp(this.configuration).revenueReportSearch(tenant, searchRevenueReportViewRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
