/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateProductGroupRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfProductGroupDto } from '../models';
// @ts-ignore
import { ProductGroupDto } from '../models';
// @ts-ignore
import { SearchProductGroupsRequest } from '../models';
// @ts-ignore
import { UpdateProductGroupRequest } from '../models';
/**
 * ProductGroupApi - axios parameter creator
 * @export
 */
export const ProductGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new ProductGroup.
         * @param {string} tenant Description
         * @param {CreateProductGroupRequest} createProductGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupCreate: async (tenant: string, createProductGroupRequest: CreateProductGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productGroupCreate', 'tenant', tenant)
            // verify required parameter 'createProductGroupRequest' is not null or undefined
            assertParamExists('productGroupCreate', 'createProductGroupRequest', createProductGroupRequest)
            const localVarPath = `/api/v1/productgroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a ProductGroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productGroupDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productGroupDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/productgroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ProductGroup details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productGroupGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productGroupGet', 'tenant', tenant)
            const localVarPath = `/api/v1/productgroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search ProductGroup using available filters.
         * @param {string} tenant Description
         * @param {SearchProductGroupsRequest} searchProductGroupsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupSearch: async (tenant: string, searchProductGroupsRequest: SearchProductGroupsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productGroupSearch', 'tenant', tenant)
            // verify required parameter 'searchProductGroupsRequest' is not null or undefined
            assertParamExists('productGroupSearch', 'searchProductGroupsRequest', searchProductGroupsRequest)
            const localVarPath = `/api/v1/productgroup/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchProductGroupsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a ProductGroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateProductGroupRequest} updateProductGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupUpdate: async (id: string, tenant: string, updateProductGroupRequest: UpdateProductGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productGroupUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productGroupUpdate', 'tenant', tenant)
            // verify required parameter 'updateProductGroupRequest' is not null or undefined
            assertParamExists('productGroupUpdate', 'updateProductGroupRequest', updateProductGroupRequest)
            const localVarPath = `/api/v1/productgroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductGroupApi - functional programming interface
 * @export
 */
export const ProductGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new ProductGroup.
         * @param {string} tenant Description
         * @param {CreateProductGroupRequest} createProductGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productGroupCreate(tenant: string, createProductGroupRequest: CreateProductGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productGroupCreate(tenant, createProductGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a ProductGroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productGroupDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productGroupDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get ProductGroup details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productGroupGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productGroupGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search ProductGroup using available filters.
         * @param {string} tenant Description
         * @param {SearchProductGroupsRequest} searchProductGroupsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productGroupSearch(tenant: string, searchProductGroupsRequest: SearchProductGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfProductGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productGroupSearch(tenant, searchProductGroupsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a ProductGroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateProductGroupRequest} updateProductGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productGroupUpdate(id: string, tenant: string, updateProductGroupRequest: UpdateProductGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productGroupUpdate(id, tenant, updateProductGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductGroupApi - factory interface
 * @export
 */
export const ProductGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductGroupApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new ProductGroup.
         * @param {string} tenant Description
         * @param {CreateProductGroupRequest} createProductGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupCreate(tenant: string, createProductGroupRequest: CreateProductGroupRequest, options?: any): AxiosPromise<string> {
            return localVarFp.productGroupCreate(tenant, createProductGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a ProductGroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.productGroupDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ProductGroup details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupGet(id: string, tenant: string, options?: any): AxiosPromise<ProductGroupDto> {
            return localVarFp.productGroupGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search ProductGroup using available filters.
         * @param {string} tenant Description
         * @param {SearchProductGroupsRequest} searchProductGroupsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupSearch(tenant: string, searchProductGroupsRequest: SearchProductGroupsRequest, options?: any): AxiosPromise<PaginationResponseOfProductGroupDto> {
            return localVarFp.productGroupSearch(tenant, searchProductGroupsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a ProductGroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateProductGroupRequest} updateProductGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupUpdate(id: string, tenant: string, updateProductGroupRequest: UpdateProductGroupRequest, options?: any): AxiosPromise<string> {
            return localVarFp.productGroupUpdate(id, tenant, updateProductGroupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductGroupApi - object-oriented interface
 * @export
 * @class ProductGroupApi
 * @extends {BaseAPI}
 */
export class ProductGroupApi extends BaseAPI {
    /**
     * 
     * @summary Create a new ProductGroup.
     * @param {string} tenant Description
     * @param {CreateProductGroupRequest} createProductGroupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductGroupApi
     */
    public productGroupCreate(tenant: string, createProductGroupRequest: CreateProductGroupRequest, options?: AxiosRequestConfig) {
        return ProductGroupApiFp(this.configuration).productGroupCreate(tenant, createProductGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a ProductGroup.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductGroupApi
     */
    public productGroupDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return ProductGroupApiFp(this.configuration).productGroupDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ProductGroup details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductGroupApi
     */
    public productGroupGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return ProductGroupApiFp(this.configuration).productGroupGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search ProductGroup using available filters.
     * @param {string} tenant Description
     * @param {SearchProductGroupsRequest} searchProductGroupsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductGroupApi
     */
    public productGroupSearch(tenant: string, searchProductGroupsRequest: SearchProductGroupsRequest, options?: AxiosRequestConfig) {
        return ProductGroupApiFp(this.configuration).productGroupSearch(tenant, searchProductGroupsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a ProductGroup.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateProductGroupRequest} updateProductGroupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductGroupApi
     */
    public productGroupUpdate(id: string, tenant: string, updateProductGroupRequest: UpdateProductGroupRequest, options?: AxiosRequestConfig) {
        return ProductGroupApiFp(this.configuration).productGroupUpdate(id, tenant, updateProductGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
