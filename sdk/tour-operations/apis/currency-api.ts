/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateCurrencyRequest } from '../models';
// @ts-ignore
import { CurrencyDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfCurrencyDto } from '../models';
// @ts-ignore
import { SearchCurrenciesRequest } from '../models';
// @ts-ignore
import { UpdateCurrencyRequest } from '../models';
/**
 * CurrencyApi - axios parameter creator
 * @export
 */
export const CurrencyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Currency.
         * @param {string} tenant Description
         * @param {CreateCurrencyRequest} createCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currencyCreate: async (tenant: string, createCurrencyRequest: CreateCurrencyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('currencyCreate', 'tenant', tenant)
            // verify required parameter 'createCurrencyRequest' is not null or undefined
            assertParamExists('currencyCreate', 'createCurrencyRequest', createCurrencyRequest)
            const localVarPath = `/api/v1/currency`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCurrencyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Currency.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currencyDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('currencyDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('currencyDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/currency/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Currency details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currencyGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('currencyGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('currencyGet', 'tenant', tenant)
            const localVarPath = `/api/v1/currency/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Currency using available filters.
         * @param {string} tenant Description
         * @param {SearchCurrenciesRequest} searchCurrenciesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currencySearch: async (tenant: string, searchCurrenciesRequest: SearchCurrenciesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('currencySearch', 'tenant', tenant)
            // verify required parameter 'searchCurrenciesRequest' is not null or undefined
            assertParamExists('currencySearch', 'searchCurrenciesRequest', searchCurrenciesRequest)
            const localVarPath = `/api/v1/currency/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchCurrenciesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Currency.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCurrencyRequest} updateCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currencyUpdate: async (id: string, tenant: string, updateCurrencyRequest: UpdateCurrencyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('currencyUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('currencyUpdate', 'tenant', tenant)
            // verify required parameter 'updateCurrencyRequest' is not null or undefined
            assertParamExists('currencyUpdate', 'updateCurrencyRequest', updateCurrencyRequest)
            const localVarPath = `/api/v1/currency/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCurrencyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CurrencyApi - functional programming interface
 * @export
 */
export const CurrencyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CurrencyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Currency.
         * @param {string} tenant Description
         * @param {CreateCurrencyRequest} createCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currencyCreate(tenant: string, createCurrencyRequest: CreateCurrencyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currencyCreate(tenant, createCurrencyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Currency.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currencyDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currencyDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Currency details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currencyGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrencyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currencyGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Currency using available filters.
         * @param {string} tenant Description
         * @param {SearchCurrenciesRequest} searchCurrenciesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currencySearch(tenant: string, searchCurrenciesRequest: SearchCurrenciesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfCurrencyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currencySearch(tenant, searchCurrenciesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Currency.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCurrencyRequest} updateCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currencyUpdate(id: string, tenant: string, updateCurrencyRequest: UpdateCurrencyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currencyUpdate(id, tenant, updateCurrencyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CurrencyApi - factory interface
 * @export
 */
export const CurrencyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CurrencyApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Currency.
         * @param {string} tenant Description
         * @param {CreateCurrencyRequest} createCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currencyCreate(tenant: string, createCurrencyRequest: CreateCurrencyRequest, options?: any): AxiosPromise<string> {
            return localVarFp.currencyCreate(tenant, createCurrencyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Currency.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currencyDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.currencyDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Currency details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currencyGet(id: string, tenant: string, options?: any): AxiosPromise<CurrencyDto> {
            return localVarFp.currencyGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Currency using available filters.
         * @param {string} tenant Description
         * @param {SearchCurrenciesRequest} searchCurrenciesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currencySearch(tenant: string, searchCurrenciesRequest: SearchCurrenciesRequest, options?: any): AxiosPromise<PaginationResponseOfCurrencyDto> {
            return localVarFp.currencySearch(tenant, searchCurrenciesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Currency.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCurrencyRequest} updateCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currencyUpdate(id: string, tenant: string, updateCurrencyRequest: UpdateCurrencyRequest, options?: any): AxiosPromise<string> {
            return localVarFp.currencyUpdate(id, tenant, updateCurrencyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CurrencyApi - object-oriented interface
 * @export
 * @class CurrencyApi
 * @extends {BaseAPI}
 */
export class CurrencyApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Currency.
     * @param {string} tenant Description
     * @param {CreateCurrencyRequest} createCurrencyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public currencyCreate(tenant: string, createCurrencyRequest: CreateCurrencyRequest, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).currencyCreate(tenant, createCurrencyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Currency.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public currencyDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).currencyDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Currency details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public currencyGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).currencyGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Currency using available filters.
     * @param {string} tenant Description
     * @param {SearchCurrenciesRequest} searchCurrenciesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public currencySearch(tenant: string, searchCurrenciesRequest: SearchCurrenciesRequest, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).currencySearch(tenant, searchCurrenciesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Currency.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateCurrencyRequest} updateCurrencyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public currencyUpdate(id: string, tenant: string, updateCurrencyRequest: UpdateCurrencyRequest, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).currencyUpdate(id, tenant, updateCurrencyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
