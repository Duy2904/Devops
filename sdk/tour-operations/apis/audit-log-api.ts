/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { GetAccountAuditLogsRequest } from '../models';
// @ts-ignore
import { GetAgentAuditLogsRequest } from '../models';
// @ts-ignore
import { GetBaseAuditLogsRequest } from '../models';
// @ts-ignore
import { GetBranchAuditLogsRequest } from '../models';
// @ts-ignore
import { GetDiscountAuditLogsRequest } from '../models';
// @ts-ignore
import { GetRoleAuditLogsRequest } from '../models';
// @ts-ignore
import { GetRoomListAuditLogsRequest } from '../models';
// @ts-ignore
import { GetSaleOrderAuditLogsRequest } from '../models';
// @ts-ignore
import { GetVisaAuditLogsRequest } from '../models';
// @ts-ignore
import { HistoryDetailDto } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfSearchAuditLogDto } from '../models';
// @ts-ignore
import { SearchAuditLogsRequest } from '../models';
/**
 * AuditLogApi - axios parameter creator
 * @export
 */
export const AuditLogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Account audit logs.
         * @param {string} tenant Description
         * @param {GetAccountAuditLogsRequest} getAccountAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetAccountAuditLogs: async (tenant: string, getAccountAuditLogsRequest: GetAccountAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetAccountAuditLogs', 'tenant', tenant)
            // verify required parameter 'getAccountAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetAccountAuditLogs', 'getAccountAuditLogsRequest', getAccountAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAccountAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Agent audit logs.
         * @param {string} tenant Description
         * @param {GetAgentAuditLogsRequest} getAgentAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetAgentAuditLogs: async (tenant: string, getAgentAuditLogsRequest: GetAgentAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetAgentAuditLogs', 'tenant', tenant)
            // verify required parameter 'getAgentAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetAgentAuditLogs', 'getAgentAuditLogsRequest', getAgentAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAgentAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Branch audit logs.
         * @param {string} tenant Description
         * @param {GetBranchAuditLogsRequest} getBranchAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetBranchAuditLogs: async (tenant: string, getBranchAuditLogsRequest: GetBranchAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetBranchAuditLogs', 'tenant', tenant)
            // verify required parameter 'getBranchAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetBranchAuditLogs', 'getBranchAuditLogsRequest', getBranchAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/branch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBranchAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Discount audit logs.
         * @param {string} tenant Description
         * @param {GetDiscountAuditLogsRequest} getDiscountAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetDiscountAuditLogs: async (tenant: string, getDiscountAuditLogsRequest: GetDiscountAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetDiscountAuditLogs', 'tenant', tenant)
            // verify required parameter 'getDiscountAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetDiscountAuditLogs', 'getDiscountAuditLogsRequest', getDiscountAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/discount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getDiscountAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Quote audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetQuoteAuditLogs: async (tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetQuoteAuditLogs', 'tenant', tenant)
            // verify required parameter 'getBaseAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetQuoteAuditLogs', 'getBaseAuditLogsRequest', getBaseAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/quote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBaseAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Quote GIT audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetQuoteGitAuditLogs: async (tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetQuoteGitAuditLogs', 'tenant', tenant)
            // verify required parameter 'getBaseAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetQuoteGitAuditLogs', 'getBaseAuditLogsRequest', getBaseAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/quote-git`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBaseAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receivable voucher audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetReceivableAuditLogs: async (tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetReceivableAuditLogs', 'tenant', tenant)
            // verify required parameter 'getBaseAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetReceivableAuditLogs', 'getBaseAuditLogsRequest', getBaseAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/receivable-voucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBaseAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refund voucher audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetRefundAuditLogs: async (tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetRefundAuditLogs', 'tenant', tenant)
            // verify required parameter 'getBaseAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetRefundAuditLogs', 'getBaseAuditLogsRequest', getBaseAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/refund-voucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBaseAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Role audit logs.
         * @param {string} tenant Description
         * @param {GetRoleAuditLogsRequest} getRoleAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetRoleAuditLogs: async (tenant: string, getRoleAuditLogsRequest: GetRoleAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetRoleAuditLogs', 'tenant', tenant)
            // verify required parameter 'getRoleAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetRoleAuditLogs', 'getRoleAuditLogsRequest', getRoleAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getRoleAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Room list audit logs.
         * @param {string} tenant Description
         * @param {GetRoomListAuditLogsRequest} getRoomListAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetRoomListAuditLogs: async (tenant: string, getRoomListAuditLogsRequest: GetRoomListAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetRoomListAuditLogs', 'tenant', tenant)
            // verify required parameter 'getRoomListAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetRoomListAuditLogs', 'getRoomListAuditLogsRequest', getRoomListAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/roomlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getRoomListAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sale order audit logs.
         * @param {string} tenant Description
         * @param {GetSaleOrderAuditLogsRequest} getSaleOrderAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetSaleOrderAuditLogs: async (tenant: string, getSaleOrderAuditLogsRequest: GetSaleOrderAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetSaleOrderAuditLogs', 'tenant', tenant)
            // verify required parameter 'getSaleOrderAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetSaleOrderAuditLogs', 'getSaleOrderAuditLogsRequest', getSaleOrderAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/sale-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getSaleOrderAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tour audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetTourAuditLogs: async (tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetTourAuditLogs', 'tenant', tenant)
            // verify required parameter 'getBaseAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetTourAuditLogs', 'getBaseAuditLogsRequest', getBaseAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/tour`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBaseAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tour audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetTourGitAuditLogs: async (tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetTourGitAuditLogs', 'tenant', tenant)
            // verify required parameter 'getBaseAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetTourGitAuditLogs', 'getBaseAuditLogsRequest', getBaseAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/tour-git`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBaseAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tour visa audit logs.
         * @param {string} tenant Description
         * @param {GetVisaAuditLogsRequest} getVisaAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetTourVisaAuditLogs: async (tenant: string, getVisaAuditLogsRequest: GetVisaAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogGetTourVisaAuditLogs', 'tenant', tenant)
            // verify required parameter 'getVisaAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogGetTourVisaAuditLogs', 'getVisaAuditLogsRequest', getVisaAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/tour-visa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getVisaAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search audit logs.
         * @param {string} tenant Description
         * @param {SearchAuditLogsRequest} searchAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogSearch: async (tenant: string, searchAuditLogsRequest: SearchAuditLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('auditLogSearch', 'tenant', tenant)
            // verify required parameter 'searchAuditLogsRequest' is not null or undefined
            assertParamExists('auditLogSearch', 'searchAuditLogsRequest', searchAuditLogsRequest)
            const localVarPath = `/api/v1/auditlog/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchAuditLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditLogApi - functional programming interface
 * @export
 */
export const AuditLogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuditLogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Account audit logs.
         * @param {string} tenant Description
         * @param {GetAccountAuditLogsRequest} getAccountAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetAccountAuditLogs(tenant: string, getAccountAuditLogsRequest: GetAccountAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetAccountAuditLogs(tenant, getAccountAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Agent audit logs.
         * @param {string} tenant Description
         * @param {GetAgentAuditLogsRequest} getAgentAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetAgentAuditLogs(tenant: string, getAgentAuditLogsRequest: GetAgentAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetAgentAuditLogs(tenant, getAgentAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Branch audit logs.
         * @param {string} tenant Description
         * @param {GetBranchAuditLogsRequest} getBranchAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetBranchAuditLogs(tenant: string, getBranchAuditLogsRequest: GetBranchAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetBranchAuditLogs(tenant, getBranchAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Discount audit logs.
         * @param {string} tenant Description
         * @param {GetDiscountAuditLogsRequest} getDiscountAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetDiscountAuditLogs(tenant: string, getDiscountAuditLogsRequest: GetDiscountAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetDiscountAuditLogs(tenant, getDiscountAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Quote audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetQuoteAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetQuoteAuditLogs(tenant, getBaseAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Quote GIT audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetQuoteGitAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetQuoteGitAuditLogs(tenant, getBaseAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Receivable voucher audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetReceivableAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetReceivableAuditLogs(tenant, getBaseAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refund voucher audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetRefundAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetRefundAuditLogs(tenant, getBaseAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Role audit logs.
         * @param {string} tenant Description
         * @param {GetRoleAuditLogsRequest} getRoleAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetRoleAuditLogs(tenant: string, getRoleAuditLogsRequest: GetRoleAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetRoleAuditLogs(tenant, getRoleAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Room list audit logs.
         * @param {string} tenant Description
         * @param {GetRoomListAuditLogsRequest} getRoomListAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetRoomListAuditLogs(tenant: string, getRoomListAuditLogsRequest: GetRoomListAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetRoomListAuditLogs(tenant, getRoomListAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sale order audit logs.
         * @param {string} tenant Description
         * @param {GetSaleOrderAuditLogsRequest} getSaleOrderAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetSaleOrderAuditLogs(tenant: string, getSaleOrderAuditLogsRequest: GetSaleOrderAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetSaleOrderAuditLogs(tenant, getSaleOrderAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tour audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetTourAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetTourAuditLogs(tenant, getBaseAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tour audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetTourGitAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetTourGitAuditLogs(tenant, getBaseAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tour visa audit logs.
         * @param {string} tenant Description
         * @param {GetVisaAuditLogsRequest} getVisaAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogGetTourVisaAuditLogs(tenant: string, getVisaAuditLogsRequest: GetVisaAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryDetailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogGetTourVisaAuditLogs(tenant, getVisaAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search audit logs.
         * @param {string} tenant Description
         * @param {SearchAuditLogsRequest} searchAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auditLogSearch(tenant: string, searchAuditLogsRequest: SearchAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfSearchAuditLogDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auditLogSearch(tenant, searchAuditLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuditLogApi - factory interface
 * @export
 */
export const AuditLogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuditLogApiFp(configuration)
    return {
        /**
         * 
         * @summary Account audit logs.
         * @param {string} tenant Description
         * @param {GetAccountAuditLogsRequest} getAccountAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetAccountAuditLogs(tenant: string, getAccountAuditLogsRequest: GetAccountAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetAccountAuditLogs(tenant, getAccountAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Agent audit logs.
         * @param {string} tenant Description
         * @param {GetAgentAuditLogsRequest} getAgentAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetAgentAuditLogs(tenant: string, getAgentAuditLogsRequest: GetAgentAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetAgentAuditLogs(tenant, getAgentAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Branch audit logs.
         * @param {string} tenant Description
         * @param {GetBranchAuditLogsRequest} getBranchAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetBranchAuditLogs(tenant: string, getBranchAuditLogsRequest: GetBranchAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetBranchAuditLogs(tenant, getBranchAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Discount audit logs.
         * @param {string} tenant Description
         * @param {GetDiscountAuditLogsRequest} getDiscountAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetDiscountAuditLogs(tenant: string, getDiscountAuditLogsRequest: GetDiscountAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetDiscountAuditLogs(tenant, getDiscountAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Quote audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetQuoteAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetQuoteAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Quote GIT audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetQuoteGitAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetQuoteGitAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Receivable voucher audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetReceivableAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetReceivableAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refund voucher audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetRefundAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetRefundAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Role audit logs.
         * @param {string} tenant Description
         * @param {GetRoleAuditLogsRequest} getRoleAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetRoleAuditLogs(tenant: string, getRoleAuditLogsRequest: GetRoleAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetRoleAuditLogs(tenant, getRoleAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Room list audit logs.
         * @param {string} tenant Description
         * @param {GetRoomListAuditLogsRequest} getRoomListAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetRoomListAuditLogs(tenant: string, getRoomListAuditLogsRequest: GetRoomListAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetRoomListAuditLogs(tenant, getRoomListAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sale order audit logs.
         * @param {string} tenant Description
         * @param {GetSaleOrderAuditLogsRequest} getSaleOrderAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetSaleOrderAuditLogs(tenant: string, getSaleOrderAuditLogsRequest: GetSaleOrderAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetSaleOrderAuditLogs(tenant, getSaleOrderAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tour audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetTourAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetTourAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tour audit logs.
         * @param {string} tenant Description
         * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetTourGitAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetTourGitAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tour visa audit logs.
         * @param {string} tenant Description
         * @param {GetVisaAuditLogsRequest} getVisaAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogGetTourVisaAuditLogs(tenant: string, getVisaAuditLogsRequest: GetVisaAuditLogsRequest, options?: any): AxiosPromise<Array<HistoryDetailDto>> {
            return localVarFp.auditLogGetTourVisaAuditLogs(tenant, getVisaAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search audit logs.
         * @param {string} tenant Description
         * @param {SearchAuditLogsRequest} searchAuditLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditLogSearch(tenant: string, searchAuditLogsRequest: SearchAuditLogsRequest, options?: any): AxiosPromise<PaginationResponseOfSearchAuditLogDto> {
            return localVarFp.auditLogSearch(tenant, searchAuditLogsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuditLogApi - object-oriented interface
 * @export
 * @class AuditLogApi
 * @extends {BaseAPI}
 */
export class AuditLogApi extends BaseAPI {
    /**
     * 
     * @summary Account audit logs.
     * @param {string} tenant Description
     * @param {GetAccountAuditLogsRequest} getAccountAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetAccountAuditLogs(tenant: string, getAccountAuditLogsRequest: GetAccountAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetAccountAuditLogs(tenant, getAccountAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Agent audit logs.
     * @param {string} tenant Description
     * @param {GetAgentAuditLogsRequest} getAgentAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetAgentAuditLogs(tenant: string, getAgentAuditLogsRequest: GetAgentAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetAgentAuditLogs(tenant, getAgentAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Branch audit logs.
     * @param {string} tenant Description
     * @param {GetBranchAuditLogsRequest} getBranchAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetBranchAuditLogs(tenant: string, getBranchAuditLogsRequest: GetBranchAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetBranchAuditLogs(tenant, getBranchAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Discount audit logs.
     * @param {string} tenant Description
     * @param {GetDiscountAuditLogsRequest} getDiscountAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetDiscountAuditLogs(tenant: string, getDiscountAuditLogsRequest: GetDiscountAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetDiscountAuditLogs(tenant, getDiscountAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Quote audit logs.
     * @param {string} tenant Description
     * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetQuoteAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetQuoteAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Quote GIT audit logs.
     * @param {string} tenant Description
     * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetQuoteGitAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetQuoteGitAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Receivable voucher audit logs.
     * @param {string} tenant Description
     * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetReceivableAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetReceivableAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refund voucher audit logs.
     * @param {string} tenant Description
     * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetRefundAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetRefundAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Role audit logs.
     * @param {string} tenant Description
     * @param {GetRoleAuditLogsRequest} getRoleAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetRoleAuditLogs(tenant: string, getRoleAuditLogsRequest: GetRoleAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetRoleAuditLogs(tenant, getRoleAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Room list audit logs.
     * @param {string} tenant Description
     * @param {GetRoomListAuditLogsRequest} getRoomListAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetRoomListAuditLogs(tenant: string, getRoomListAuditLogsRequest: GetRoomListAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetRoomListAuditLogs(tenant, getRoomListAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sale order audit logs.
     * @param {string} tenant Description
     * @param {GetSaleOrderAuditLogsRequest} getSaleOrderAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetSaleOrderAuditLogs(tenant: string, getSaleOrderAuditLogsRequest: GetSaleOrderAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetSaleOrderAuditLogs(tenant, getSaleOrderAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tour audit logs.
     * @param {string} tenant Description
     * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetTourAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetTourAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tour audit logs.
     * @param {string} tenant Description
     * @param {GetBaseAuditLogsRequest} getBaseAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetTourGitAuditLogs(tenant: string, getBaseAuditLogsRequest: GetBaseAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetTourGitAuditLogs(tenant, getBaseAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tour visa audit logs.
     * @param {string} tenant Description
     * @param {GetVisaAuditLogsRequest} getVisaAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogGetTourVisaAuditLogs(tenant: string, getVisaAuditLogsRequest: GetVisaAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogGetTourVisaAuditLogs(tenant, getVisaAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search audit logs.
     * @param {string} tenant Description
     * @param {SearchAuditLogsRequest} searchAuditLogsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public auditLogSearch(tenant: string, searchAuditLogsRequest: SearchAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogApiFp(this.configuration).auditLogSearch(tenant, searchAuditLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
