/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTourScheduleFareRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfTourScheduleFareDto } from '../models';
// @ts-ignore
import { SearchTourScheduleFaresRequest } from '../models';
// @ts-ignore
import { TourScheduleFareDto } from '../models';
// @ts-ignore
import { UpdateTourScheduleFareRequest } from '../models';
/**
 * TourScheduleFareApi - axios parameter creator
 * @export
 */
export const TourScheduleFareApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new TourScheduleFare.
         * @param {string} tenant Description
         * @param {CreateTourScheduleFareRequest} createTourScheduleFareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleFareCreate: async (tenant: string, createTourScheduleFareRequest: CreateTourScheduleFareRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleFareCreate', 'tenant', tenant)
            // verify required parameter 'createTourScheduleFareRequest' is not null or undefined
            assertParamExists('tourScheduleFareCreate', 'createTourScheduleFareRequest', createTourScheduleFareRequest)
            const localVarPath = `/api/v1/tourschedulefare`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTourScheduleFareRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a TourScheduleFare.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleFareDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleFareDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleFareDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/tourschedulefare/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourScheduleFare details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleFareGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleFareGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleFareGet', 'tenant', tenant)
            const localVarPath = `/api/v1/tourschedulefare/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search TourScheduleFare using available filters.
         * @param {string} tenant Description
         * @param {SearchTourScheduleFaresRequest} searchTourScheduleFaresRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleFareSearch: async (tenant: string, searchTourScheduleFaresRequest: SearchTourScheduleFaresRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleFareSearch', 'tenant', tenant)
            // verify required parameter 'searchTourScheduleFaresRequest' is not null or undefined
            assertParamExists('tourScheduleFareSearch', 'searchTourScheduleFaresRequest', searchTourScheduleFaresRequest)
            const localVarPath = `/api/v1/tourschedulefare/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchTourScheduleFaresRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a TourScheduleFare.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleFareRequest} updateTourScheduleFareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleFareUpdate: async (id: string, tenant: string, updateTourScheduleFareRequest: UpdateTourScheduleFareRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleFareUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleFareUpdate', 'tenant', tenant)
            // verify required parameter 'updateTourScheduleFareRequest' is not null or undefined
            assertParamExists('tourScheduleFareUpdate', 'updateTourScheduleFareRequest', updateTourScheduleFareRequest)
            const localVarPath = `/api/v1/tourschedulefare/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTourScheduleFareRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourScheduleFareApi - functional programming interface
 * @export
 */
export const TourScheduleFareApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourScheduleFareApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new TourScheduleFare.
         * @param {string} tenant Description
         * @param {CreateTourScheduleFareRequest} createTourScheduleFareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleFareCreate(tenant: string, createTourScheduleFareRequest: CreateTourScheduleFareRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleFareCreate(tenant, createTourScheduleFareRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a TourScheduleFare.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleFareDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleFareDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourScheduleFare details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleFareGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourScheduleFareDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleFareGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search TourScheduleFare using available filters.
         * @param {string} tenant Description
         * @param {SearchTourScheduleFaresRequest} searchTourScheduleFaresRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleFareSearch(tenant: string, searchTourScheduleFaresRequest: SearchTourScheduleFaresRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTourScheduleFareDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleFareSearch(tenant, searchTourScheduleFaresRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a TourScheduleFare.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleFareRequest} updateTourScheduleFareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleFareUpdate(id: string, tenant: string, updateTourScheduleFareRequest: UpdateTourScheduleFareRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleFareUpdate(id, tenant, updateTourScheduleFareRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourScheduleFareApi - factory interface
 * @export
 */
export const TourScheduleFareApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourScheduleFareApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new TourScheduleFare.
         * @param {string} tenant Description
         * @param {CreateTourScheduleFareRequest} createTourScheduleFareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleFareCreate(tenant: string, createTourScheduleFareRequest: CreateTourScheduleFareRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleFareCreate(tenant, createTourScheduleFareRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a TourScheduleFare.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleFareDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleFareDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourScheduleFare details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleFareGet(id: string, tenant: string, options?: any): AxiosPromise<TourScheduleFareDto> {
            return localVarFp.tourScheduleFareGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search TourScheduleFare using available filters.
         * @param {string} tenant Description
         * @param {SearchTourScheduleFaresRequest} searchTourScheduleFaresRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleFareSearch(tenant: string, searchTourScheduleFaresRequest: SearchTourScheduleFaresRequest, options?: any): AxiosPromise<PaginationResponseOfTourScheduleFareDto> {
            return localVarFp.tourScheduleFareSearch(tenant, searchTourScheduleFaresRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a TourScheduleFare.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleFareRequest} updateTourScheduleFareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleFareUpdate(id: string, tenant: string, updateTourScheduleFareRequest: UpdateTourScheduleFareRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleFareUpdate(id, tenant, updateTourScheduleFareRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TourScheduleFareApi - object-oriented interface
 * @export
 * @class TourScheduleFareApi
 * @extends {BaseAPI}
 */
export class TourScheduleFareApi extends BaseAPI {
    /**
     * 
     * @summary Create a new TourScheduleFare.
     * @param {string} tenant Description
     * @param {CreateTourScheduleFareRequest} createTourScheduleFareRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleFareApi
     */
    public tourScheduleFareCreate(tenant: string, createTourScheduleFareRequest: CreateTourScheduleFareRequest, options?: AxiosRequestConfig) {
        return TourScheduleFareApiFp(this.configuration).tourScheduleFareCreate(tenant, createTourScheduleFareRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a TourScheduleFare.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleFareApi
     */
    public tourScheduleFareDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourScheduleFareApiFp(this.configuration).tourScheduleFareDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourScheduleFare details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleFareApi
     */
    public tourScheduleFareGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourScheduleFareApiFp(this.configuration).tourScheduleFareGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search TourScheduleFare using available filters.
     * @param {string} tenant Description
     * @param {SearchTourScheduleFaresRequest} searchTourScheduleFaresRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleFareApi
     */
    public tourScheduleFareSearch(tenant: string, searchTourScheduleFaresRequest: SearchTourScheduleFaresRequest, options?: AxiosRequestConfig) {
        return TourScheduleFareApiFp(this.configuration).tourScheduleFareSearch(tenant, searchTourScheduleFaresRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a TourScheduleFare.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateTourScheduleFareRequest} updateTourScheduleFareRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleFareApi
     */
    public tourScheduleFareUpdate(id: string, tenant: string, updateTourScheduleFareRequest: UpdateTourScheduleFareRequest, options?: AxiosRequestConfig) {
        return TourScheduleFareApiFp(this.configuration).tourScheduleFareUpdate(id, tenant, updateTourScheduleFareRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
