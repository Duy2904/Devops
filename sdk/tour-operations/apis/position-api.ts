/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePositionRequest } from '../models';
// @ts-ignore
import { DropdownDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfPositionDto } from '../models';
// @ts-ignore
import { PositionDto } from '../models';
// @ts-ignore
import { SearchPositionRequest } from '../models';
// @ts-ignore
import { UpdatePositionRequest } from '../models';
/**
 * PositionApi - axios parameter creator
 * @export
 */
export const PositionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Position.
         * @param {string} tenant Description
         * @param {CreatePositionRequest} createPositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionCreate: async (tenant: string, createPositionRequest: CreatePositionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('positionCreate', 'tenant', tenant)
            // verify required parameter 'createPositionRequest' is not null or undefined
            assertParamExists('positionCreate', 'createPositionRequest', createPositionRequest)
            const localVarPath = `/api/v1/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPositionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Position.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('positionDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('positionDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/position/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Position details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('positionGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('positionGet', 'tenant', tenant)
            const localVarPath = `/api/v1/position/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Position dropdown.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionGetDropdown: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('positionGetDropdown', 'tenant', tenant)
            const localVarPath = `/api/v1/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Position using available filters.
         * @param {string} tenant Description
         * @param {SearchPositionRequest} searchPositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionSearch: async (tenant: string, searchPositionRequest: SearchPositionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('positionSearch', 'tenant', tenant)
            // verify required parameter 'searchPositionRequest' is not null or undefined
            assertParamExists('positionSearch', 'searchPositionRequest', searchPositionRequest)
            const localVarPath = `/api/v1/position/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchPositionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Position.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdatePositionRequest} updatePositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionUpdate: async (id: string, tenant: string, updatePositionRequest: UpdatePositionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('positionUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('positionUpdate', 'tenant', tenant)
            // verify required parameter 'updatePositionRequest' is not null or undefined
            assertParamExists('positionUpdate', 'updatePositionRequest', updatePositionRequest)
            const localVarPath = `/api/v1/position/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePositionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PositionApi - functional programming interface
 * @export
 */
export const PositionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PositionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Position.
         * @param {string} tenant Description
         * @param {CreatePositionRequest} createPositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionCreate(tenant: string, createPositionRequest: CreatePositionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionCreate(tenant, createPositionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Position.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Position details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Position dropdown.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionGetDropdown(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionGetDropdown(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Position using available filters.
         * @param {string} tenant Description
         * @param {SearchPositionRequest} searchPositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionSearch(tenant: string, searchPositionRequest: SearchPositionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfPositionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionSearch(tenant, searchPositionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Position.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdatePositionRequest} updatePositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionUpdate(id: string, tenant: string, updatePositionRequest: UpdatePositionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionUpdate(id, tenant, updatePositionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PositionApi - factory interface
 * @export
 */
export const PositionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PositionApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Position.
         * @param {string} tenant Description
         * @param {CreatePositionRequest} createPositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionCreate(tenant: string, createPositionRequest: CreatePositionRequest, options?: any): AxiosPromise<string> {
            return localVarFp.positionCreate(tenant, createPositionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Position.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.positionDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Position details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionGet(id: string, tenant: string, options?: any): AxiosPromise<PositionDto> {
            return localVarFp.positionGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Position dropdown.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionGetDropdown(tenant: string, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.positionGetDropdown(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Position using available filters.
         * @param {string} tenant Description
         * @param {SearchPositionRequest} searchPositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionSearch(tenant: string, searchPositionRequest: SearchPositionRequest, options?: any): AxiosPromise<PaginationResponseOfPositionDto> {
            return localVarFp.positionSearch(tenant, searchPositionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Position.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdatePositionRequest} updatePositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionUpdate(id: string, tenant: string, updatePositionRequest: UpdatePositionRequest, options?: any): AxiosPromise<string> {
            return localVarFp.positionUpdate(id, tenant, updatePositionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PositionApi - object-oriented interface
 * @export
 * @class PositionApi
 * @extends {BaseAPI}
 */
export class PositionApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Position.
     * @param {string} tenant Description
     * @param {CreatePositionRequest} createPositionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public positionCreate(tenant: string, createPositionRequest: CreatePositionRequest, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).positionCreate(tenant, createPositionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Position.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public positionDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).positionDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Position details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public positionGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).positionGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Position dropdown.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public positionGetDropdown(tenant: string, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).positionGetDropdown(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Position using available filters.
     * @param {string} tenant Description
     * @param {SearchPositionRequest} searchPositionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public positionSearch(tenant: string, searchPositionRequest: SearchPositionRequest, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).positionSearch(tenant, searchPositionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Position.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdatePositionRequest} updatePositionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public positionUpdate(id: string, tenant: string, updatePositionRequest: UpdatePositionRequest, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).positionUpdate(id, tenant, updatePositionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
