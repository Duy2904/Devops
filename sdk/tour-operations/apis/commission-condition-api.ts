/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateCommissionConditionCollectionRequest } from '../models';
// @ts-ignore
import { CreateCommissionConditionRequest } from '../models';
// @ts-ignore
import { DeleteCommissionConditionByTypeRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { UpdateCommissionConditionRequest } from '../models';
/**
 * CommissionConditionApi - axios parameter creator
 * @export
 */
export const CommissionConditionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a CommissionCondition collection for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionCollectionRequest} createCommissionConditionCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionCreateCollectionForAgent: async (tenant: string, createCommissionConditionCollectionRequest: CreateCommissionConditionCollectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionConditionCreateCollectionForAgent', 'tenant', tenant)
            // verify required parameter 'createCommissionConditionCollectionRequest' is not null or undefined
            assertParamExists('commissionConditionCreateCollectionForAgent', 'createCommissionConditionCollectionRequest', createCommissionConditionCollectionRequest)
            const localVarPath = `/api/v1/commissioncondition/agent/collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommissionConditionCollectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a CommissionCondition collection for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionCollectionRequest} createCommissionConditionCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionCreateCollectionForReferrer: async (tenant: string, createCommissionConditionCollectionRequest: CreateCommissionConditionCollectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionConditionCreateCollectionForReferrer', 'tenant', tenant)
            // verify required parameter 'createCommissionConditionCollectionRequest' is not null or undefined
            assertParamExists('commissionConditionCreateCollectionForReferrer', 'createCommissionConditionCollectionRequest', createCommissionConditionCollectionRequest)
            const localVarPath = `/api/v1/commissioncondition/referrer/collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommissionConditionCollectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new CommissionCondition for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionRequest} createCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionCreateForAgent: async (tenant: string, createCommissionConditionRequest: CreateCommissionConditionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionConditionCreateForAgent', 'tenant', tenant)
            // verify required parameter 'createCommissionConditionRequest' is not null or undefined
            assertParamExists('commissionConditionCreateForAgent', 'createCommissionConditionRequest', createCommissionConditionRequest)
            const localVarPath = `/api/v1/commissioncondition/agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommissionConditionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new CommissionCondition for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionRequest} createCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionCreateForReferrer: async (tenant: string, createCommissionConditionRequest: CreateCommissionConditionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionConditionCreateForReferrer', 'tenant', tenant)
            // verify required parameter 'createCommissionConditionRequest' is not null or undefined
            assertParamExists('commissionConditionCreateForReferrer', 'createCommissionConditionRequest', createCommissionConditionRequest)
            const localVarPath = `/api/v1/commissioncondition/referrer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommissionConditionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Agent CommissionCondition by Type.
         * @param {string} tenant Description
         * @param {DeleteCommissionConditionByTypeRequest} deleteCommissionConditionByTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionDeleteByTypeForAgent: async (tenant: string, deleteCommissionConditionByTypeRequest: DeleteCommissionConditionByTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionConditionDeleteByTypeForAgent', 'tenant', tenant)
            // verify required parameter 'deleteCommissionConditionByTypeRequest' is not null or undefined
            assertParamExists('commissionConditionDeleteByTypeForAgent', 'deleteCommissionConditionByTypeRequest', deleteCommissionConditionByTypeRequest)
            const localVarPath = `/api/v1/commissioncondition/agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCommissionConditionByTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Referrer CommissionCondition by Type.
         * @param {string} tenant Description
         * @param {DeleteCommissionConditionByTypeRequest} deleteCommissionConditionByTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionDeleteByTypeForReferrer: async (tenant: string, deleteCommissionConditionByTypeRequest: DeleteCommissionConditionByTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionConditionDeleteByTypeForReferrer', 'tenant', tenant)
            // verify required parameter 'deleteCommissionConditionByTypeRequest' is not null or undefined
            assertParamExists('commissionConditionDeleteByTypeForReferrer', 'deleteCommissionConditionByTypeRequest', deleteCommissionConditionByTypeRequest)
            const localVarPath = `/api/v1/commissioncondition/referrer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCommissionConditionByTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Agent CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionDeleteForAgent: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commissionConditionDeleteForAgent', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionConditionDeleteForAgent', 'tenant', tenant)
            const localVarPath = `/api/v1/commissioncondition/agent/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Referrer CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionDeleteForReferrer: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commissionConditionDeleteForReferrer', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionConditionDeleteForReferrer', 'tenant', tenant)
            const localVarPath = `/api/v1/commissioncondition/referrer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Agent CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCommissionConditionRequest} updateCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionUpdateForAgent: async (id: string, tenant: string, updateCommissionConditionRequest: UpdateCommissionConditionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commissionConditionUpdateForAgent', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionConditionUpdateForAgent', 'tenant', tenant)
            // verify required parameter 'updateCommissionConditionRequest' is not null or undefined
            assertParamExists('commissionConditionUpdateForAgent', 'updateCommissionConditionRequest', updateCommissionConditionRequest)
            const localVarPath = `/api/v1/commissioncondition/agent/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCommissionConditionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Referrer CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCommissionConditionRequest} updateCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionUpdateForReferrer: async (id: string, tenant: string, updateCommissionConditionRequest: UpdateCommissionConditionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commissionConditionUpdateForReferrer', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionConditionUpdateForReferrer', 'tenant', tenant)
            // verify required parameter 'updateCommissionConditionRequest' is not null or undefined
            assertParamExists('commissionConditionUpdateForReferrer', 'updateCommissionConditionRequest', updateCommissionConditionRequest)
            const localVarPath = `/api/v1/commissioncondition/referrer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCommissionConditionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommissionConditionApi - functional programming interface
 * @export
 */
export const CommissionConditionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommissionConditionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a CommissionCondition collection for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionCollectionRequest} createCommissionConditionCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionConditionCreateCollectionForAgent(tenant: string, createCommissionConditionCollectionRequest: CreateCommissionConditionCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionConditionCreateCollectionForAgent(tenant, createCommissionConditionCollectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a CommissionCondition collection for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionCollectionRequest} createCommissionConditionCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionConditionCreateCollectionForReferrer(tenant: string, createCommissionConditionCollectionRequest: CreateCommissionConditionCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionConditionCreateCollectionForReferrer(tenant, createCommissionConditionCollectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new CommissionCondition for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionRequest} createCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionConditionCreateForAgent(tenant: string, createCommissionConditionRequest: CreateCommissionConditionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionConditionCreateForAgent(tenant, createCommissionConditionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new CommissionCondition for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionRequest} createCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionConditionCreateForReferrer(tenant: string, createCommissionConditionRequest: CreateCommissionConditionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionConditionCreateForReferrer(tenant, createCommissionConditionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Agent CommissionCondition by Type.
         * @param {string} tenant Description
         * @param {DeleteCommissionConditionByTypeRequest} deleteCommissionConditionByTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionConditionDeleteByTypeForAgent(tenant: string, deleteCommissionConditionByTypeRequest: DeleteCommissionConditionByTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionConditionDeleteByTypeForAgent(tenant, deleteCommissionConditionByTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Referrer CommissionCondition by Type.
         * @param {string} tenant Description
         * @param {DeleteCommissionConditionByTypeRequest} deleteCommissionConditionByTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionConditionDeleteByTypeForReferrer(tenant: string, deleteCommissionConditionByTypeRequest: DeleteCommissionConditionByTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionConditionDeleteByTypeForReferrer(tenant, deleteCommissionConditionByTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Agent CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionConditionDeleteForAgent(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionConditionDeleteForAgent(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Referrer CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionConditionDeleteForReferrer(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionConditionDeleteForReferrer(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Agent CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCommissionConditionRequest} updateCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionConditionUpdateForAgent(id: string, tenant: string, updateCommissionConditionRequest: UpdateCommissionConditionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionConditionUpdateForAgent(id, tenant, updateCommissionConditionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Referrer CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCommissionConditionRequest} updateCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionConditionUpdateForReferrer(id: string, tenant: string, updateCommissionConditionRequest: UpdateCommissionConditionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionConditionUpdateForReferrer(id, tenant, updateCommissionConditionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommissionConditionApi - factory interface
 * @export
 */
export const CommissionConditionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommissionConditionApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a CommissionCondition collection for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionCollectionRequest} createCommissionConditionCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionCreateCollectionForAgent(tenant: string, createCommissionConditionCollectionRequest: CreateCommissionConditionCollectionRequest, options?: any): AxiosPromise<number> {
            return localVarFp.commissionConditionCreateCollectionForAgent(tenant, createCommissionConditionCollectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a CommissionCondition collection for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionCollectionRequest} createCommissionConditionCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionCreateCollectionForReferrer(tenant: string, createCommissionConditionCollectionRequest: CreateCommissionConditionCollectionRequest, options?: any): AxiosPromise<number> {
            return localVarFp.commissionConditionCreateCollectionForReferrer(tenant, createCommissionConditionCollectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new CommissionCondition for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionRequest} createCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionCreateForAgent(tenant: string, createCommissionConditionRequest: CreateCommissionConditionRequest, options?: any): AxiosPromise<string> {
            return localVarFp.commissionConditionCreateForAgent(tenant, createCommissionConditionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new CommissionCondition for Agent.
         * @param {string} tenant Description
         * @param {CreateCommissionConditionRequest} createCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionCreateForReferrer(tenant: string, createCommissionConditionRequest: CreateCommissionConditionRequest, options?: any): AxiosPromise<string> {
            return localVarFp.commissionConditionCreateForReferrer(tenant, createCommissionConditionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Agent CommissionCondition by Type.
         * @param {string} tenant Description
         * @param {DeleteCommissionConditionByTypeRequest} deleteCommissionConditionByTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionDeleteByTypeForAgent(tenant: string, deleteCommissionConditionByTypeRequest: DeleteCommissionConditionByTypeRequest, options?: any): AxiosPromise<number> {
            return localVarFp.commissionConditionDeleteByTypeForAgent(tenant, deleteCommissionConditionByTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Referrer CommissionCondition by Type.
         * @param {string} tenant Description
         * @param {DeleteCommissionConditionByTypeRequest} deleteCommissionConditionByTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionDeleteByTypeForReferrer(tenant: string, deleteCommissionConditionByTypeRequest: DeleteCommissionConditionByTypeRequest, options?: any): AxiosPromise<number> {
            return localVarFp.commissionConditionDeleteByTypeForReferrer(tenant, deleteCommissionConditionByTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Agent CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionDeleteForAgent(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.commissionConditionDeleteForAgent(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Referrer CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionDeleteForReferrer(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.commissionConditionDeleteForReferrer(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Agent CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCommissionConditionRequest} updateCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionUpdateForAgent(id: string, tenant: string, updateCommissionConditionRequest: UpdateCommissionConditionRequest, options?: any): AxiosPromise<string> {
            return localVarFp.commissionConditionUpdateForAgent(id, tenant, updateCommissionConditionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Referrer CommissionCondition.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCommissionConditionRequest} updateCommissionConditionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionConditionUpdateForReferrer(id: string, tenant: string, updateCommissionConditionRequest: UpdateCommissionConditionRequest, options?: any): AxiosPromise<string> {
            return localVarFp.commissionConditionUpdateForReferrer(id, tenant, updateCommissionConditionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommissionConditionApi - object-oriented interface
 * @export
 * @class CommissionConditionApi
 * @extends {BaseAPI}
 */
export class CommissionConditionApi extends BaseAPI {
    /**
     * 
     * @summary Create a CommissionCondition collection for Agent.
     * @param {string} tenant Description
     * @param {CreateCommissionConditionCollectionRequest} createCommissionConditionCollectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionConditionApi
     */
    public commissionConditionCreateCollectionForAgent(tenant: string, createCommissionConditionCollectionRequest: CreateCommissionConditionCollectionRequest, options?: AxiosRequestConfig) {
        return CommissionConditionApiFp(this.configuration).commissionConditionCreateCollectionForAgent(tenant, createCommissionConditionCollectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a CommissionCondition collection for Agent.
     * @param {string} tenant Description
     * @param {CreateCommissionConditionCollectionRequest} createCommissionConditionCollectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionConditionApi
     */
    public commissionConditionCreateCollectionForReferrer(tenant: string, createCommissionConditionCollectionRequest: CreateCommissionConditionCollectionRequest, options?: AxiosRequestConfig) {
        return CommissionConditionApiFp(this.configuration).commissionConditionCreateCollectionForReferrer(tenant, createCommissionConditionCollectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new CommissionCondition for Agent.
     * @param {string} tenant Description
     * @param {CreateCommissionConditionRequest} createCommissionConditionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionConditionApi
     */
    public commissionConditionCreateForAgent(tenant: string, createCommissionConditionRequest: CreateCommissionConditionRequest, options?: AxiosRequestConfig) {
        return CommissionConditionApiFp(this.configuration).commissionConditionCreateForAgent(tenant, createCommissionConditionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new CommissionCondition for Agent.
     * @param {string} tenant Description
     * @param {CreateCommissionConditionRequest} createCommissionConditionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionConditionApi
     */
    public commissionConditionCreateForReferrer(tenant: string, createCommissionConditionRequest: CreateCommissionConditionRequest, options?: AxiosRequestConfig) {
        return CommissionConditionApiFp(this.configuration).commissionConditionCreateForReferrer(tenant, createCommissionConditionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Agent CommissionCondition by Type.
     * @param {string} tenant Description
     * @param {DeleteCommissionConditionByTypeRequest} deleteCommissionConditionByTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionConditionApi
     */
    public commissionConditionDeleteByTypeForAgent(tenant: string, deleteCommissionConditionByTypeRequest: DeleteCommissionConditionByTypeRequest, options?: AxiosRequestConfig) {
        return CommissionConditionApiFp(this.configuration).commissionConditionDeleteByTypeForAgent(tenant, deleteCommissionConditionByTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Referrer CommissionCondition by Type.
     * @param {string} tenant Description
     * @param {DeleteCommissionConditionByTypeRequest} deleteCommissionConditionByTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionConditionApi
     */
    public commissionConditionDeleteByTypeForReferrer(tenant: string, deleteCommissionConditionByTypeRequest: DeleteCommissionConditionByTypeRequest, options?: AxiosRequestConfig) {
        return CommissionConditionApiFp(this.configuration).commissionConditionDeleteByTypeForReferrer(tenant, deleteCommissionConditionByTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Agent CommissionCondition.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionConditionApi
     */
    public commissionConditionDeleteForAgent(id: string, tenant: string, options?: AxiosRequestConfig) {
        return CommissionConditionApiFp(this.configuration).commissionConditionDeleteForAgent(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Referrer CommissionCondition.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionConditionApi
     */
    public commissionConditionDeleteForReferrer(id: string, tenant: string, options?: AxiosRequestConfig) {
        return CommissionConditionApiFp(this.configuration).commissionConditionDeleteForReferrer(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Agent CommissionCondition.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateCommissionConditionRequest} updateCommissionConditionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionConditionApi
     */
    public commissionConditionUpdateForAgent(id: string, tenant: string, updateCommissionConditionRequest: UpdateCommissionConditionRequest, options?: AxiosRequestConfig) {
        return CommissionConditionApiFp(this.configuration).commissionConditionUpdateForAgent(id, tenant, updateCommissionConditionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Referrer CommissionCondition.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateCommissionConditionRequest} updateCommissionConditionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionConditionApi
     */
    public commissionConditionUpdateForReferrer(id: string, tenant: string, updateCommissionConditionRequest: UpdateCommissionConditionRequest, options?: AxiosRequestConfig) {
        return CommissionConditionApiFp(this.configuration).commissionConditionUpdateForReferrer(id, tenant, updateCommissionConditionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
