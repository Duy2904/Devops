/* tslint:disable */
/* eslint-disable */
/**
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@codewithmukesh.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTourScheduleRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfTourScheduleDto } from '../models';
// @ts-ignore
import { SearchTourSchedulesRequestOfTourScheduleDto } from '../models';
// @ts-ignore
import { TourScheduleDto } from '../models';
// @ts-ignore
import { UpdateTourScheduleRequest } from '../models';
// @ts-ignore
import { UpdateTourScheduleStatusRequest } from '../models';
/**
 * TourScheduleApi - axios parameter creator
 * @export
 */
export const TourScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new TourSchedule.
         * @param {string} tenant Description
         * @param {CreateTourScheduleRequest} createTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleCreate: async (tenant: string, createTourScheduleRequest: CreateTourScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleCreate', 'tenant', tenant)
            // verify required parameter 'createTourScheduleRequest' is not null or undefined
            assertParamExists('tourScheduleCreate', 'createTourScheduleRequest', createTourScheduleRequest)
            const localVarPath = `/api/v1/tourschedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTourScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a TourInfor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/tourschedule/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourSchedule details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleGet', 'tenant', tenant)
            const localVarPath = `/api/v1/tourschedule/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourSchedule details by code.
         * @param {string} tourCode 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleGet2: async (tourCode: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tourCode' is not null or undefined
            assertParamExists('tourScheduleGet2', 'tourCode', tourCode)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleGet2', 'tenant', tenant)
            const localVarPath = `/api/v1/tourschedule/{tourCode}`
                .replace(`{${"tourCode"}}`, encodeURIComponent(String(tourCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search TourSchedule using available filters.
         * @param {string} tenant Description
         * @param {SearchTourSchedulesRequestOfTourScheduleDto} searchTourSchedulesRequestOfTourScheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSearch: async (tenant: string, searchTourSchedulesRequestOfTourScheduleDto: SearchTourSchedulesRequestOfTourScheduleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleSearch', 'tenant', tenant)
            // verify required parameter 'searchTourSchedulesRequestOfTourScheduleDto' is not null or undefined
            assertParamExists('tourScheduleSearch', 'searchTourSchedulesRequestOfTourScheduleDto', searchTourSchedulesRequestOfTourScheduleDto)
            const localVarPath = `/api/v1/tourschedule/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchTourSchedulesRequestOfTourScheduleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a TourSchedule.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleRequest} updateTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleUpdate: async (id: string, tenant: string, updateTourScheduleRequest: UpdateTourScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleUpdate', 'tenant', tenant)
            // verify required parameter 'updateTourScheduleRequest' is not null or undefined
            assertParamExists('tourScheduleUpdate', 'updateTourScheduleRequest', updateTourScheduleRequest)
            const localVarPath = `/api/v1/tourschedule/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTourScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update TourSchedule status.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleStatusRequest} updateTourScheduleStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleUpdatePatch: async (id: string, tenant: string, updateTourScheduleStatusRequest: UpdateTourScheduleStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleUpdatePatch', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleUpdatePatch', 'tenant', tenant)
            // verify required parameter 'updateTourScheduleStatusRequest' is not null or undefined
            assertParamExists('tourScheduleUpdatePatch', 'updateTourScheduleStatusRequest', updateTourScheduleStatusRequest)
            const localVarPath = `/api/v1/tourschedule/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTourScheduleStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourScheduleApi - functional programming interface
 * @export
 */
export const TourScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new TourSchedule.
         * @param {string} tenant Description
         * @param {CreateTourScheduleRequest} createTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleCreate(tenant: string, createTourScheduleRequest: CreateTourScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleCreate(tenant, createTourScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a TourInfor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourSchedule details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourSchedule details by code.
         * @param {string} tourCode 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleGet2(tourCode: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleGet2(tourCode, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search TourSchedule using available filters.
         * @param {string} tenant Description
         * @param {SearchTourSchedulesRequestOfTourScheduleDto} searchTourSchedulesRequestOfTourScheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleSearch(tenant: string, searchTourSchedulesRequestOfTourScheduleDto: SearchTourSchedulesRequestOfTourScheduleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTourScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleSearch(tenant, searchTourSchedulesRequestOfTourScheduleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a TourSchedule.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleRequest} updateTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleUpdate(id: string, tenant: string, updateTourScheduleRequest: UpdateTourScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleUpdate(id, tenant, updateTourScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update TourSchedule status.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleStatusRequest} updateTourScheduleStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleUpdatePatch(id: string, tenant: string, updateTourScheduleStatusRequest: UpdateTourScheduleStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleUpdatePatch(id, tenant, updateTourScheduleStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourScheduleApi - factory interface
 * @export
 */
export const TourScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourScheduleApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new TourSchedule.
         * @param {string} tenant Description
         * @param {CreateTourScheduleRequest} createTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleCreate(tenant: string, createTourScheduleRequest: CreateTourScheduleRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleCreate(tenant, createTourScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a TourInfor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourSchedule details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleGet(id: string, tenant: string, options?: any): AxiosPromise<TourScheduleDto> {
            return localVarFp.tourScheduleGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourSchedule details by code.
         * @param {string} tourCode 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleGet2(tourCode: string, tenant: string, options?: any): AxiosPromise<TourScheduleDto> {
            return localVarFp.tourScheduleGet2(tourCode, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search TourSchedule using available filters.
         * @param {string} tenant Description
         * @param {SearchTourSchedulesRequestOfTourScheduleDto} searchTourSchedulesRequestOfTourScheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSearch(tenant: string, searchTourSchedulesRequestOfTourScheduleDto: SearchTourSchedulesRequestOfTourScheduleDto, options?: any): AxiosPromise<PaginationResponseOfTourScheduleDto> {
            return localVarFp.tourScheduleSearch(tenant, searchTourSchedulesRequestOfTourScheduleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a TourSchedule.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleRequest} updateTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleUpdate(id: string, tenant: string, updateTourScheduleRequest: UpdateTourScheduleRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleUpdate(id, tenant, updateTourScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update TourSchedule status.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleStatusRequest} updateTourScheduleStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleUpdatePatch(id: string, tenant: string, updateTourScheduleStatusRequest: UpdateTourScheduleStatusRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleUpdatePatch(id, tenant, updateTourScheduleStatusRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TourScheduleApi - object-oriented interface
 * @export
 * @class TourScheduleApi
 * @extends {BaseAPI}
 */
export class TourScheduleApi extends BaseAPI {
    /**
     * 
     * @summary Create a new TourSchedule.
     * @param {string} tenant Description
     * @param {CreateTourScheduleRequest} createTourScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleApi
     */
    public tourScheduleCreate(tenant: string, createTourScheduleRequest: CreateTourScheduleRequest, options?: AxiosRequestConfig) {
        return TourScheduleApiFp(this.configuration).tourScheduleCreate(tenant, createTourScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a TourInfor.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleApi
     */
    public tourScheduleDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourScheduleApiFp(this.configuration).tourScheduleDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourSchedule details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleApi
     */
    public tourScheduleGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourScheduleApiFp(this.configuration).tourScheduleGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourSchedule details by code.
     * @param {string} tourCode 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleApi
     */
    public tourScheduleGet2(tourCode: string, tenant: string, options?: AxiosRequestConfig) {
        return TourScheduleApiFp(this.configuration).tourScheduleGet2(tourCode, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search TourSchedule using available filters.
     * @param {string} tenant Description
     * @param {SearchTourSchedulesRequestOfTourScheduleDto} searchTourSchedulesRequestOfTourScheduleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleApi
     */
    public tourScheduleSearch(tenant: string, searchTourSchedulesRequestOfTourScheduleDto: SearchTourSchedulesRequestOfTourScheduleDto, options?: AxiosRequestConfig) {
        return TourScheduleApiFp(this.configuration).tourScheduleSearch(tenant, searchTourSchedulesRequestOfTourScheduleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a TourSchedule.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateTourScheduleRequest} updateTourScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleApi
     */
    public tourScheduleUpdate(id: string, tenant: string, updateTourScheduleRequest: UpdateTourScheduleRequest, options?: AxiosRequestConfig) {
        return TourScheduleApiFp(this.configuration).tourScheduleUpdate(id, tenant, updateTourScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update TourSchedule status.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateTourScheduleStatusRequest} updateTourScheduleStatusRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleApi
     */
    public tourScheduleUpdatePatch(id: string, tenant: string, updateTourScheduleStatusRequest: UpdateTourScheduleStatusRequest, options?: AxiosRequestConfig) {
        return TourScheduleApiFp(this.configuration).tourScheduleUpdatePatch(id, tenant, updateTourScheduleStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
