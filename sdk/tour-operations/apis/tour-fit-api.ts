/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApproveTourScheduleRequest } from '../models';
// @ts-ignore
import { CreateTourScheduleRequest } from '../models';
// @ts-ignore
import { DropdownDto } from '../models';
// @ts-ignore
import { DropdownRouteDto } from '../models';
// @ts-ignore
import { DropdownTourFit } from '../models';
// @ts-ignore
import { DropdownTourFitRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { ExportRoomListRequest } from '../models';
// @ts-ignore
import { ExportTourScheduleRequest } from '../models';
// @ts-ignore
import { GetTourScheduleInfoBySaleOrderIdRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfTourScheduleInfoDto } from '../models';
// @ts-ignore
import { PaginationResponseOfTourSearchFitDto } from '../models';
// @ts-ignore
import { PaginationResponseOfTourSearchFitViewDto } from '../models';
// @ts-ignore
import { RoomListTravellerDto } from '../models';
// @ts-ignore
import { SearchTourFitRequestOfTourSearchFitViewDto } from '../models';
// @ts-ignore
import { SearchTourSchedulesRequestOfTourSearchFitDto } from '../models';
// @ts-ignore
import { SendForApprovalRequest } from '../models';
// @ts-ignore
import { TourCodeResponseDto } from '../models';
// @ts-ignore
import { TourFilterDataDto } from '../models';
// @ts-ignore
import { TourScheduleDto } from '../models';
// @ts-ignore
import { TourVisaFitDto } from '../models';
// @ts-ignore
import { TourVisaWithTourSchedulesRequestOfTourVisaFitDto } from '../models';
// @ts-ignore
import { UpdateRoomListRequest } from '../models';
// @ts-ignore
import { UpdateTourScheduleRequest } from '../models';
/**
 * TourFitApi - axios parameter creator
 * @export
 */
export const TourFitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approve TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ApproveTourScheduleRequest} approveTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitApprove: async (id: string, tenant: string, approveTourScheduleRequest: ApproveTourScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitApprove', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitApprove', 'tenant', tenant)
            // verify required parameter 'approveTourScheduleRequest' is not null or undefined
            assertParamExists('tourFitApprove', 'approveTourScheduleRequest', approveTourScheduleRequest)
            const localVarPath = `/api/v1/tourfit/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approveTourScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel TourFit status.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitCancelTour: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitCancelTour', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitCancelTour', 'tenant', tenant)
            const localVarPath = `/api/v1/tourfit/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new TourFit.
         * @param {string} tenant Description
         * @param {CreateTourScheduleRequest} createTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitCreate: async (tenant: string, createTourScheduleRequest: CreateTourScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitCreate', 'tenant', tenant)
            // verify required parameter 'createTourScheduleRequest' is not null or undefined
            assertParamExists('tourFitCreate', 'createTourScheduleRequest', createTourScheduleRequest)
            const localVarPath = `/api/v1/tourfit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTourScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/tourfit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dropdown TourFit.
         * @param {string} tenant Description
         * @param {DropdownTourFitRequest} dropdownTourFitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitDropdown: async (tenant: string, dropdownTourFitRequest: DropdownTourFitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitDropdown', 'tenant', tenant)
            // verify required parameter 'dropdownTourFitRequest' is not null or undefined
            assertParamExists('tourFitDropdown', 'dropdownTourFitRequest', dropdownTourFitRequest)
            const localVarPath = `/api/v1/tourfit/dropdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dropdownTourFitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export room list.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportRoomListRequest} exportRoomListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitExport: async (id: string, tenant: string, exportRoomListRequest: ExportRoomListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitExport', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitExport', 'tenant', tenant)
            // verify required parameter 'exportRoomListRequest' is not null or undefined
            assertParamExists('tourFitExport', 'exportRoomListRequest', exportRoomListRequest)
            const localVarPath = `/api/v1/tourfit/{id}/room-list/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportRoomListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitExport2: async (tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitExport2', 'tenant', tenant)
            // verify required parameter 'exportTourScheduleRequest' is not null or undefined
            assertParamExists('tourFitExport2', 'exportTourScheduleRequest', exportTourScheduleRequest)
            const localVarPath = `/api/v1/tourfit/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportTourScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourFit details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitGet', 'tenant', tenant)
            const localVarPath = `/api/v1/tourfit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get List Departure.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetDepartureLocation: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitGetDepartureLocation', 'tenant', tenant)
            const localVarPath = `/api/v1/tourfit/departure-location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get List Destination.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetDestinationLocation: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitGetDestinationLocation', 'tenant', tenant)
            const localVarPath = `/api/v1/tourfit/destination-location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get filter data.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetFilterData: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitGetFilterData', 'tenant', tenant)
            const localVarPath = `/api/v1/tourfit/filter-data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourFit room list.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetRoomList: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitGetRoomList', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitGetRoomList', 'tenant', tenant)
            const localVarPath = `/api/v1/tourfit/{id}/room-list`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get List Route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetRouteByDestinationId: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitGetRouteByDestinationId', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitGetRouteByDestinationId', 'tenant', tenant)
            const localVarPath = `/api/v1/tourfit/{id}/route`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get List Route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetSeatAvailable: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitGetSeatAvailable', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitGetSeatAvailable', 'tenant', tenant)
            const localVarPath = `/api/v1/tourfit/{id}/seat-available`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourFit details by code.
         * @param {string} tourCode 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetTourCode: async (tourCode: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tourCode' is not null or undefined
            assertParamExists('tourFitGetTourCode', 'tourCode', tourCode)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitGetTourCode', 'tenant', tenant)
            const localVarPath = `/api/v1/tourfit/{tourCode}`
                .replace(`{${"tourCode"}}`, encodeURIComponent(String(tourCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get List Tour Transfer by id.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {GetTourScheduleInfoBySaleOrderIdRequest} getTourScheduleInfoBySaleOrderIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetTransfer: async (id: string, tenant: string, getTourScheduleInfoBySaleOrderIdRequest: GetTourScheduleInfoBySaleOrderIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitGetTransfer', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitGetTransfer', 'tenant', tenant)
            // verify required parameter 'getTourScheduleInfoBySaleOrderIdRequest' is not null or undefined
            assertParamExists('tourFitGetTransfer', 'getTourScheduleInfoBySaleOrderIdRequest', getTourScheduleInfoBySaleOrderIdRequest)
            const localVarPath = `/api/v1/tourfit/{id}/transfer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getTourScheduleInfoBySaleOrderIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search TourFit using available filters.
         * @param {string} tenant Description
         * @param {SearchTourSchedulesRequestOfTourSearchFitDto} searchTourSchedulesRequestOfTourSearchFitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitSearch: async (tenant: string, searchTourSchedulesRequestOfTourSearchFitDto: SearchTourSchedulesRequestOfTourSearchFitDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitSearch', 'tenant', tenant)
            // verify required parameter 'searchTourSchedulesRequestOfTourSearchFitDto' is not null or undefined
            assertParamExists('tourFitSearch', 'searchTourSchedulesRequestOfTourSearchFitDto', searchTourSchedulesRequestOfTourSearchFitDto)
            const localVarPath = `/api/v1/tourfit/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchTourSchedulesRequestOfTourSearchFitDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search TourFit View using available filters.
         * @param {string} tenant Description
         * @param {SearchTourFitRequestOfTourSearchFitViewDto} searchTourFitRequestOfTourSearchFitViewDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitSearchV2: async (tenant: string, searchTourFitRequestOfTourSearchFitViewDto: SearchTourFitRequestOfTourSearchFitViewDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitSearchV2', 'tenant', tenant)
            // verify required parameter 'searchTourFitRequestOfTourSearchFitViewDto' is not null or undefined
            assertParamExists('tourFitSearchV2', 'searchTourFitRequestOfTourSearchFitViewDto', searchTourFitRequestOfTourSearchFitViewDto)
            const localVarPath = `/api/v1/tourfit/search-v2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchTourFitRequestOfTourSearchFitViewDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send for approval TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForApprovalRequest} sendForApprovalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitSendForApproval: async (id: string, tenant: string, sendForApprovalRequest: SendForApprovalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitSendForApproval', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitSendForApproval', 'tenant', tenant)
            // verify required parameter 'sendForApprovalRequest' is not null or undefined
            assertParamExists('tourFitSendForApproval', 'sendForApprovalRequest', sendForApprovalRequest)
            const localVarPath = `/api/v1/tourfit/{id}/send-for-approval`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendForApprovalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourFit using page filter visa.
         * @param {string} tenant Description
         * @param {TourVisaWithTourSchedulesRequestOfTourVisaFitDto} tourVisaWithTourSchedulesRequestOfTourVisaFitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitTourVisa: async (tenant: string, tourVisaWithTourSchedulesRequestOfTourVisaFitDto: TourVisaWithTourSchedulesRequestOfTourVisaFitDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitTourVisa', 'tenant', tenant)
            // verify required parameter 'tourVisaWithTourSchedulesRequestOfTourVisaFitDto' is not null or undefined
            assertParamExists('tourFitTourVisa', 'tourVisaWithTourSchedulesRequestOfTourVisaFitDto', tourVisaWithTourSchedulesRequestOfTourVisaFitDto)
            const localVarPath = `/api/v1/tourfit/tourvisa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tourVisaWithTourSchedulesRequestOfTourVisaFitDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleRequest} updateTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitUpdate: async (id: string, tenant: string, updateTourScheduleRequest: UpdateTourScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitUpdate', 'tenant', tenant)
            // verify required parameter 'updateTourScheduleRequest' is not null or undefined
            assertParamExists('tourFitUpdate', 'updateTourScheduleRequest', updateTourScheduleRequest)
            const localVarPath = `/api/v1/tourfit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTourScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourFit room list.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateRoomListRequest} updateRoomListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitUpdateRoomList: async (id: string, tenant: string, updateRoomListRequest: UpdateRoomListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourFitUpdateRoomList', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourFitUpdateRoomList', 'tenant', tenant)
            // verify required parameter 'updateRoomListRequest' is not null or undefined
            assertParamExists('tourFitUpdateRoomList', 'updateRoomListRequest', updateRoomListRequest)
            const localVarPath = `/api/v1/tourfit/{id}/room-list`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoomListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourFitApi - functional programming interface
 * @export
 */
export const TourFitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourFitApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Approve TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ApproveTourScheduleRequest} approveTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitApprove(id: string, tenant: string, approveTourScheduleRequest: ApproveTourScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitApprove(id, tenant, approveTourScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel TourFit status.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitCancelTour(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitCancelTour(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new TourFit.
         * @param {string} tenant Description
         * @param {CreateTourScheduleRequest} createTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitCreate(tenant: string, createTourScheduleRequest: CreateTourScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitCreate(tenant, createTourScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Dropdown TourFit.
         * @param {string} tenant Description
         * @param {DropdownTourFitRequest} dropdownTourFitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitDropdown(tenant: string, dropdownTourFitRequest: DropdownTourFitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownTourFit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitDropdown(tenant, dropdownTourFitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Export room list.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportRoomListRequest} exportRoomListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitExport(id: string, tenant: string, exportRoomListRequest: ExportRoomListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitExport(id, tenant, exportRoomListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitExport2(tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitExport2(tenant, exportTourScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourFit details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get List Departure.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitGetDepartureLocation(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitGetDepartureLocation(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get List Destination.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitGetDestinationLocation(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitGetDestinationLocation(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get filter data.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitGetFilterData(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourFilterDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitGetFilterData(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourFit room list.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitGetRoomList(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoomListTravellerDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitGetRoomList(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get List Route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitGetRouteByDestinationId(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownRouteDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitGetRouteByDestinationId(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get List Route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitGetSeatAvailable(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitGetSeatAvailable(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourFit details by code.
         * @param {string} tourCode 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitGetTourCode(tourCode: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitGetTourCode(tourCode, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get List Tour Transfer by id.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {GetTourScheduleInfoBySaleOrderIdRequest} getTourScheduleInfoBySaleOrderIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitGetTransfer(id: string, tenant: string, getTourScheduleInfoBySaleOrderIdRequest: GetTourScheduleInfoBySaleOrderIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTourScheduleInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitGetTransfer(id, tenant, getTourScheduleInfoBySaleOrderIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search TourFit using available filters.
         * @param {string} tenant Description
         * @param {SearchTourSchedulesRequestOfTourSearchFitDto} searchTourSchedulesRequestOfTourSearchFitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitSearch(tenant: string, searchTourSchedulesRequestOfTourSearchFitDto: SearchTourSchedulesRequestOfTourSearchFitDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTourSearchFitDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitSearch(tenant, searchTourSchedulesRequestOfTourSearchFitDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search TourFit View using available filters.
         * @param {string} tenant Description
         * @param {SearchTourFitRequestOfTourSearchFitViewDto} searchTourFitRequestOfTourSearchFitViewDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitSearchV2(tenant: string, searchTourFitRequestOfTourSearchFitViewDto: SearchTourFitRequestOfTourSearchFitViewDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTourSearchFitViewDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitSearchV2(tenant, searchTourFitRequestOfTourSearchFitViewDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send for approval TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForApprovalRequest} sendForApprovalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitSendForApproval(id: string, tenant: string, sendForApprovalRequest: SendForApprovalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitSendForApproval(id, tenant, sendForApprovalRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourFit using page filter visa.
         * @param {string} tenant Description
         * @param {TourVisaWithTourSchedulesRequestOfTourVisaFitDto} tourVisaWithTourSchedulesRequestOfTourVisaFitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitTourVisa(tenant: string, tourVisaWithTourSchedulesRequestOfTourVisaFitDto: TourVisaWithTourSchedulesRequestOfTourVisaFitDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TourVisaFitDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitTourVisa(tenant, tourVisaWithTourSchedulesRequestOfTourVisaFitDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleRequest} updateTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitUpdate(id: string, tenant: string, updateTourScheduleRequest: UpdateTourScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourCodeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitUpdate(id, tenant, updateTourScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourFit room list.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateRoomListRequest} updateRoomListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourFitUpdateRoomList(id: string, tenant: string, updateRoomListRequest: UpdateRoomListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourFitUpdateRoomList(id, tenant, updateRoomListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourFitApi - factory interface
 * @export
 */
export const TourFitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourFitApiFp(configuration)
    return {
        /**
         * 
         * @summary Approve TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ApproveTourScheduleRequest} approveTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitApprove(id: string, tenant: string, approveTourScheduleRequest: ApproveTourScheduleRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourFitApprove(id, tenant, approveTourScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel TourFit status.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitCancelTour(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.tourFitCancelTour(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new TourFit.
         * @param {string} tenant Description
         * @param {CreateTourScheduleRequest} createTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitCreate(tenant: string, createTourScheduleRequest: CreateTourScheduleRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourFitCreate(tenant, createTourScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.tourFitDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Dropdown TourFit.
         * @param {string} tenant Description
         * @param {DropdownTourFitRequest} dropdownTourFitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitDropdown(tenant: string, dropdownTourFitRequest: DropdownTourFitRequest, options?: any): AxiosPromise<Array<DropdownTourFit>> {
            return localVarFp.tourFitDropdown(tenant, dropdownTourFitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export room list.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {ExportRoomListRequest} exportRoomListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitExport(id: string, tenant: string, exportRoomListRequest: ExportRoomListRequest, options?: any): AxiosPromise<File> {
            return localVarFp.tourFitExport(id, tenant, exportRoomListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitExport2(tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options?: any): AxiosPromise<File> {
            return localVarFp.tourFitExport2(tenant, exportTourScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourFit details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGet(id: string, tenant: string, options?: any): AxiosPromise<TourScheduleDto> {
            return localVarFp.tourFitGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get List Departure.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetDepartureLocation(tenant: string, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.tourFitGetDepartureLocation(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get List Destination.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetDestinationLocation(tenant: string, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.tourFitGetDestinationLocation(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get filter data.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetFilterData(tenant: string, options?: any): AxiosPromise<TourFilterDataDto> {
            return localVarFp.tourFitGetFilterData(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourFit room list.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetRoomList(id: string, tenant: string, options?: any): AxiosPromise<Array<RoomListTravellerDto>> {
            return localVarFp.tourFitGetRoomList(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get List Route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetRouteByDestinationId(id: string, tenant: string, options?: any): AxiosPromise<Array<DropdownRouteDto>> {
            return localVarFp.tourFitGetRouteByDestinationId(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get List Route.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetSeatAvailable(id: string, tenant: string, options?: any): AxiosPromise<number> {
            return localVarFp.tourFitGetSeatAvailable(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourFit details by code.
         * @param {string} tourCode 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetTourCode(tourCode: string, tenant: string, options?: any): AxiosPromise<TourScheduleDto> {
            return localVarFp.tourFitGetTourCode(tourCode, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get List Tour Transfer by id.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {GetTourScheduleInfoBySaleOrderIdRequest} getTourScheduleInfoBySaleOrderIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitGetTransfer(id: string, tenant: string, getTourScheduleInfoBySaleOrderIdRequest: GetTourScheduleInfoBySaleOrderIdRequest, options?: any): AxiosPromise<PaginationResponseOfTourScheduleInfoDto> {
            return localVarFp.tourFitGetTransfer(id, tenant, getTourScheduleInfoBySaleOrderIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search TourFit using available filters.
         * @param {string} tenant Description
         * @param {SearchTourSchedulesRequestOfTourSearchFitDto} searchTourSchedulesRequestOfTourSearchFitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitSearch(tenant: string, searchTourSchedulesRequestOfTourSearchFitDto: SearchTourSchedulesRequestOfTourSearchFitDto, options?: any): AxiosPromise<PaginationResponseOfTourSearchFitDto> {
            return localVarFp.tourFitSearch(tenant, searchTourSchedulesRequestOfTourSearchFitDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search TourFit View using available filters.
         * @param {string} tenant Description
         * @param {SearchTourFitRequestOfTourSearchFitViewDto} searchTourFitRequestOfTourSearchFitViewDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitSearchV2(tenant: string, searchTourFitRequestOfTourSearchFitViewDto: SearchTourFitRequestOfTourSearchFitViewDto, options?: any): AxiosPromise<PaginationResponseOfTourSearchFitViewDto> {
            return localVarFp.tourFitSearchV2(tenant, searchTourFitRequestOfTourSearchFitViewDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send for approval TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForApprovalRequest} sendForApprovalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitSendForApproval(id: string, tenant: string, sendForApprovalRequest: SendForApprovalRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourFitSendForApproval(id, tenant, sendForApprovalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourFit using page filter visa.
         * @param {string} tenant Description
         * @param {TourVisaWithTourSchedulesRequestOfTourVisaFitDto} tourVisaWithTourSchedulesRequestOfTourVisaFitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitTourVisa(tenant: string, tourVisaWithTourSchedulesRequestOfTourVisaFitDto: TourVisaWithTourSchedulesRequestOfTourVisaFitDto, options?: any): AxiosPromise<Array<TourVisaFitDto>> {
            return localVarFp.tourFitTourVisa(tenant, tourVisaWithTourSchedulesRequestOfTourVisaFitDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a TourFit.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleRequest} updateTourScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitUpdate(id: string, tenant: string, updateTourScheduleRequest: UpdateTourScheduleRequest, options?: any): AxiosPromise<TourCodeResponseDto> {
            return localVarFp.tourFitUpdate(id, tenant, updateTourScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourFit room list.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateRoomListRequest} updateRoomListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourFitUpdateRoomList(id: string, tenant: string, updateRoomListRequest: UpdateRoomListRequest, options?: any): AxiosPromise<number> {
            return localVarFp.tourFitUpdateRoomList(id, tenant, updateRoomListRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TourFitApi - object-oriented interface
 * @export
 * @class TourFitApi
 * @extends {BaseAPI}
 */
export class TourFitApi extends BaseAPI {
    /**
     * 
     * @summary Approve TourFit.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {ApproveTourScheduleRequest} approveTourScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitApprove(id: string, tenant: string, approveTourScheduleRequest: ApproveTourScheduleRequest, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitApprove(id, tenant, approveTourScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel TourFit status.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitCancelTour(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitCancelTour(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new TourFit.
     * @param {string} tenant Description
     * @param {CreateTourScheduleRequest} createTourScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitCreate(tenant: string, createTourScheduleRequest: CreateTourScheduleRequest, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitCreate(tenant, createTourScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a TourFit.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Dropdown TourFit.
     * @param {string} tenant Description
     * @param {DropdownTourFitRequest} dropdownTourFitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitDropdown(tenant: string, dropdownTourFitRequest: DropdownTourFitRequest, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitDropdown(tenant, dropdownTourFitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export room list.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {ExportRoomListRequest} exportRoomListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitExport(id: string, tenant: string, exportRoomListRequest: ExportRoomListRequest, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitExport(id, tenant, exportRoomListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Description
     * @param {ExportTourScheduleRequest} exportTourScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitExport2(tenant: string, exportTourScheduleRequest: ExportTourScheduleRequest, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitExport2(tenant, exportTourScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourFit details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get List Departure.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitGetDepartureLocation(tenant: string, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitGetDepartureLocation(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get List Destination.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitGetDestinationLocation(tenant: string, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitGetDestinationLocation(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get filter data.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitGetFilterData(tenant: string, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitGetFilterData(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourFit room list.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitGetRoomList(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitGetRoomList(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get List Route.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitGetRouteByDestinationId(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitGetRouteByDestinationId(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get List Route.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitGetSeatAvailable(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitGetSeatAvailable(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourFit details by code.
     * @param {string} tourCode 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitGetTourCode(tourCode: string, tenant: string, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitGetTourCode(tourCode, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get List Tour Transfer by id.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {GetTourScheduleInfoBySaleOrderIdRequest} getTourScheduleInfoBySaleOrderIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitGetTransfer(id: string, tenant: string, getTourScheduleInfoBySaleOrderIdRequest: GetTourScheduleInfoBySaleOrderIdRequest, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitGetTransfer(id, tenant, getTourScheduleInfoBySaleOrderIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search TourFit using available filters.
     * @param {string} tenant Description
     * @param {SearchTourSchedulesRequestOfTourSearchFitDto} searchTourSchedulesRequestOfTourSearchFitDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitSearch(tenant: string, searchTourSchedulesRequestOfTourSearchFitDto: SearchTourSchedulesRequestOfTourSearchFitDto, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitSearch(tenant, searchTourSchedulesRequestOfTourSearchFitDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search TourFit View using available filters.
     * @param {string} tenant Description
     * @param {SearchTourFitRequestOfTourSearchFitViewDto} searchTourFitRequestOfTourSearchFitViewDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitSearchV2(tenant: string, searchTourFitRequestOfTourSearchFitViewDto: SearchTourFitRequestOfTourSearchFitViewDto, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitSearchV2(tenant, searchTourFitRequestOfTourSearchFitViewDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send for approval TourFit.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {SendForApprovalRequest} sendForApprovalRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitSendForApproval(id: string, tenant: string, sendForApprovalRequest: SendForApprovalRequest, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitSendForApproval(id, tenant, sendForApprovalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourFit using page filter visa.
     * @param {string} tenant Description
     * @param {TourVisaWithTourSchedulesRequestOfTourVisaFitDto} tourVisaWithTourSchedulesRequestOfTourVisaFitDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitTourVisa(tenant: string, tourVisaWithTourSchedulesRequestOfTourVisaFitDto: TourVisaWithTourSchedulesRequestOfTourVisaFitDto, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitTourVisa(tenant, tourVisaWithTourSchedulesRequestOfTourVisaFitDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a TourFit.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateTourScheduleRequest} updateTourScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitUpdate(id: string, tenant: string, updateTourScheduleRequest: UpdateTourScheduleRequest, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitUpdate(id, tenant, updateTourScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourFit room list.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateRoomListRequest} updateRoomListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourFitApi
     */
    public tourFitUpdateRoomList(id: string, tenant: string, updateRoomListRequest: UpdateRoomListRequest, options?: AxiosRequestConfig) {
        return TourFitApiFp(this.configuration).tourFitUpdateRoomList(id, tenant, updateRoomListRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
