/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTourVisaRequest } from '../models';
// @ts-ignore
import { DocumentType } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { ExportTourVisaRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfSaleOrderByTourDto } from '../models';
// @ts-ignore
import { PaginationResponseOfSearchTourVisaDto } from '../models';
// @ts-ignore
import { SaleOrderByTourRequest } from '../models';
// @ts-ignore
import { SearchTourVisaRequest } from '../models';
// @ts-ignore
import { TourVisaCheckListDto } from '../models';
// @ts-ignore
import { TourVisaDto } from '../models';
// @ts-ignore
import { UpdateTourVisaRequest } from '../models';
// @ts-ignore
import { UpdateVisaStatusRequest } from '../models';
/**
 * TourVisaApi - axios parameter creator
 * @export
 */
export const TourVisaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new TourVisa.
         * @param {string} tenant Description
         * @param {CreateTourVisaRequest} createTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaCreate: async (tenant: string, createTourVisaRequest: CreateTourVisaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourVisaCreate', 'tenant', tenant)
            // verify required parameter 'createTourVisaRequest' is not null or undefined
            assertParamExists('tourVisaCreate', 'createTourVisaRequest', createTourVisaRequest)
            const localVarPath = `/api/v1/tourvisa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTourVisaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Tour Visa.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourVisaDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourVisaDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/tourvisa/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaDownload: async (tenant: string, id?: string, type?: DocumentType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourVisaDownload', 'tenant', tenant)
            const localVarPath = `/api/v1/tourvisa/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourVisaRequest} exportTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaExport: async (tenant: string, exportTourVisaRequest: ExportTourVisaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourVisaExport', 'tenant', tenant)
            // verify required parameter 'exportTourVisaRequest' is not null or undefined
            assertParamExists('tourVisaExport', 'exportTourVisaRequest', exportTourVisaRequest)
            const localVarPath = `/api/v1/tourvisa/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportTourVisaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Tour Visa.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourVisaGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourVisaGet', 'tenant', tenant)
            const localVarPath = `/api/v1/tourvisa/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get check list.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaGetCheckList: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourVisaGetCheckList', 'tenant', tenant)
            const localVarPath = `/api/v1/tourvisa/checklist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate TourVisa Code.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaGetCode: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourVisaGetCode', 'tenant', tenant)
            const localVarPath = `/api/v1/tourvisa/gen-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get sale order.
         * @param {string} tenant Description
         * @param {SaleOrderByTourRequest} saleOrderByTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaGetSaleOrder: async (tenant: string, saleOrderByTourRequest: SaleOrderByTourRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourVisaGetSaleOrder', 'tenant', tenant)
            // verify required parameter 'saleOrderByTourRequest' is not null or undefined
            assertParamExists('tourVisaGetSaleOrder', 'saleOrderByTourRequest', saleOrderByTourRequest)
            const localVarPath = `/api/v1/tourvisa/sale-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saleOrderByTourRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search TourVisa.
         * @param {string} tenant Description
         * @param {SearchTourVisaRequest} searchTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaSearch: async (tenant: string, searchTourVisaRequest: SearchTourVisaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourVisaSearch', 'tenant', tenant)
            // verify required parameter 'searchTourVisaRequest' is not null or undefined
            assertParamExists('tourVisaSearch', 'searchTourVisaRequest', searchTourVisaRequest)
            const localVarPath = `/api/v1/tourvisa/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchTourVisaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Tour Visa.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourVisaRequest} updateTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaUpdate: async (id: string, tenant: string, updateTourVisaRequest: UpdateTourVisaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourVisaUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourVisaUpdate', 'tenant', tenant)
            // verify required parameter 'updateTourVisaRequest' is not null or undefined
            assertParamExists('tourVisaUpdate', 'updateTourVisaRequest', updateTourVisaRequest)
            const localVarPath = `/api/v1/tourvisa/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTourVisaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Status Tour Visa.
         * @param {string} tenant Description
         * @param {UpdateVisaStatusRequest} updateVisaStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaUpdateStatus: async (tenant: string, updateVisaStatusRequest: UpdateVisaStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourVisaUpdateStatus', 'tenant', tenant)
            // verify required parameter 'updateVisaStatusRequest' is not null or undefined
            assertParamExists('tourVisaUpdateStatus', 'updateVisaStatusRequest', updateVisaStatusRequest)
            const localVarPath = `/api/v1/tourvisa/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVisaStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourVisaApi - functional programming interface
 * @export
 */
export const TourVisaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourVisaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new TourVisa.
         * @param {string} tenant Description
         * @param {CreateTourVisaRequest} createTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourVisaCreate(tenant: string, createTourVisaRequest: CreateTourVisaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourVisaCreate(tenant, createTourVisaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Tour Visa.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourVisaDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourVisaDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourVisaDownload(tenant: string, id?: string, type?: DocumentType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourVisaDownload(tenant, id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourVisaRequest} exportTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourVisaExport(tenant: string, exportTourVisaRequest: ExportTourVisaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourVisaExport(tenant, exportTourVisaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Tour Visa.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourVisaGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourVisaDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourVisaGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get check list.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourVisaGetCheckList(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TourVisaCheckListDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourVisaGetCheckList(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate TourVisa Code.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourVisaGetCode(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourVisaGetCode(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get sale order.
         * @param {string} tenant Description
         * @param {SaleOrderByTourRequest} saleOrderByTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourVisaGetSaleOrder(tenant: string, saleOrderByTourRequest: SaleOrderByTourRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfSaleOrderByTourDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourVisaGetSaleOrder(tenant, saleOrderByTourRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search TourVisa.
         * @param {string} tenant Description
         * @param {SearchTourVisaRequest} searchTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourVisaSearch(tenant: string, searchTourVisaRequest: SearchTourVisaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfSearchTourVisaDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourVisaSearch(tenant, searchTourVisaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Tour Visa.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourVisaRequest} updateTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourVisaUpdate(id: string, tenant: string, updateTourVisaRequest: UpdateTourVisaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourVisaUpdate(id, tenant, updateTourVisaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Status Tour Visa.
         * @param {string} tenant Description
         * @param {UpdateVisaStatusRequest} updateVisaStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourVisaUpdateStatus(tenant: string, updateVisaStatusRequest: UpdateVisaStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourVisaUpdateStatus(tenant, updateVisaStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourVisaApi - factory interface
 * @export
 */
export const TourVisaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourVisaApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new TourVisa.
         * @param {string} tenant Description
         * @param {CreateTourVisaRequest} createTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaCreate(tenant: string, createTourVisaRequest: CreateTourVisaRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourVisaCreate(tenant, createTourVisaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Tour Visa.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.tourVisaDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaDownload(tenant: string, id?: string, type?: DocumentType, options?: any): AxiosPromise<string> {
            return localVarFp.tourVisaDownload(tenant, id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportTourVisaRequest} exportTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaExport(tenant: string, exportTourVisaRequest: ExportTourVisaRequest, options?: any): AxiosPromise<File> {
            return localVarFp.tourVisaExport(tenant, exportTourVisaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Tour Visa.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaGet(id: string, tenant: string, options?: any): AxiosPromise<TourVisaDto> {
            return localVarFp.tourVisaGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get check list.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaGetCheckList(tenant: string, options?: any): AxiosPromise<Array<TourVisaCheckListDto>> {
            return localVarFp.tourVisaGetCheckList(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate TourVisa Code.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaGetCode(tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.tourVisaGetCode(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get sale order.
         * @param {string} tenant Description
         * @param {SaleOrderByTourRequest} saleOrderByTourRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaGetSaleOrder(tenant: string, saleOrderByTourRequest: SaleOrderByTourRequest, options?: any): AxiosPromise<PaginationResponseOfSaleOrderByTourDto> {
            return localVarFp.tourVisaGetSaleOrder(tenant, saleOrderByTourRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search TourVisa.
         * @param {string} tenant Description
         * @param {SearchTourVisaRequest} searchTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaSearch(tenant: string, searchTourVisaRequest: SearchTourVisaRequest, options?: any): AxiosPromise<PaginationResponseOfSearchTourVisaDto> {
            return localVarFp.tourVisaSearch(tenant, searchTourVisaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Tour Visa.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourVisaRequest} updateTourVisaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaUpdate(id: string, tenant: string, updateTourVisaRequest: UpdateTourVisaRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourVisaUpdate(id, tenant, updateTourVisaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Status Tour Visa.
         * @param {string} tenant Description
         * @param {UpdateVisaStatusRequest} updateVisaStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourVisaUpdateStatus(tenant: string, updateVisaStatusRequest: UpdateVisaStatusRequest, options?: any): AxiosPromise<void> {
            return localVarFp.tourVisaUpdateStatus(tenant, updateVisaStatusRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TourVisaApi - object-oriented interface
 * @export
 * @class TourVisaApi
 * @extends {BaseAPI}
 */
export class TourVisaApi extends BaseAPI {
    /**
     * 
     * @summary Create a new TourVisa.
     * @param {string} tenant Description
     * @param {CreateTourVisaRequest} createTourVisaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourVisaApi
     */
    public tourVisaCreate(tenant: string, createTourVisaRequest: CreateTourVisaRequest, options?: AxiosRequestConfig) {
        return TourVisaApiFp(this.configuration).tourVisaCreate(tenant, createTourVisaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Tour Visa.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourVisaApi
     */
    public tourVisaDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourVisaApiFp(this.configuration).tourVisaDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Description
     * @param {string} [id] 
     * @param {DocumentType} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourVisaApi
     */
    public tourVisaDownload(tenant: string, id?: string, type?: DocumentType, options?: AxiosRequestConfig) {
        return TourVisaApiFp(this.configuration).tourVisaDownload(tenant, id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Description
     * @param {ExportTourVisaRequest} exportTourVisaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourVisaApi
     */
    public tourVisaExport(tenant: string, exportTourVisaRequest: ExportTourVisaRequest, options?: AxiosRequestConfig) {
        return TourVisaApiFp(this.configuration).tourVisaExport(tenant, exportTourVisaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Tour Visa.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourVisaApi
     */
    public tourVisaGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourVisaApiFp(this.configuration).tourVisaGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get check list.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourVisaApi
     */
    public tourVisaGetCheckList(tenant: string, options?: AxiosRequestConfig) {
        return TourVisaApiFp(this.configuration).tourVisaGetCheckList(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate TourVisa Code.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourVisaApi
     */
    public tourVisaGetCode(tenant: string, options?: AxiosRequestConfig) {
        return TourVisaApiFp(this.configuration).tourVisaGetCode(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get sale order.
     * @param {string} tenant Description
     * @param {SaleOrderByTourRequest} saleOrderByTourRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourVisaApi
     */
    public tourVisaGetSaleOrder(tenant: string, saleOrderByTourRequest: SaleOrderByTourRequest, options?: AxiosRequestConfig) {
        return TourVisaApiFp(this.configuration).tourVisaGetSaleOrder(tenant, saleOrderByTourRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search TourVisa.
     * @param {string} tenant Description
     * @param {SearchTourVisaRequest} searchTourVisaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourVisaApi
     */
    public tourVisaSearch(tenant: string, searchTourVisaRequest: SearchTourVisaRequest, options?: AxiosRequestConfig) {
        return TourVisaApiFp(this.configuration).tourVisaSearch(tenant, searchTourVisaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Tour Visa.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateTourVisaRequest} updateTourVisaRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourVisaApi
     */
    public tourVisaUpdate(id: string, tenant: string, updateTourVisaRequest: UpdateTourVisaRequest, options?: AxiosRequestConfig) {
        return TourVisaApiFp(this.configuration).tourVisaUpdate(id, tenant, updateTourVisaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Status Tour Visa.
     * @param {string} tenant Description
     * @param {UpdateVisaStatusRequest} updateVisaStatusRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourVisaApi
     */
    public tourVisaUpdateStatus(tenant: string, updateVisaStatusRequest: UpdateVisaStatusRequest, options?: AxiosRequestConfig) {
        return TourVisaApiFp(this.configuration).tourVisaUpdateStatus(tenant, updateVisaStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
