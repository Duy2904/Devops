/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTourScheduleSurchargeRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfTourScheduleSurchargeDto } from '../models';
// @ts-ignore
import { SearchTourScheduleSurchargesRequest } from '../models';
// @ts-ignore
import { TourScheduleSurchargeDto } from '../models';
// @ts-ignore
import { UpdateTourScheduleSurchargeRequest } from '../models';
/**
 * TourScheduleSurchargeApi - axios parameter creator
 * @export
 */
export const TourScheduleSurchargeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new TourScheduleSurcharge.
         * @param {string} tenant Description
         * @param {CreateTourScheduleSurchargeRequest} createTourScheduleSurchargeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSurchargeCreate: async (tenant: string, createTourScheduleSurchargeRequest: CreateTourScheduleSurchargeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleSurchargeCreate', 'tenant', tenant)
            // verify required parameter 'createTourScheduleSurchargeRequest' is not null or undefined
            assertParamExists('tourScheduleSurchargeCreate', 'createTourScheduleSurchargeRequest', createTourScheduleSurchargeRequest)
            const localVarPath = `/api/v1/tourschedulesurcharge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTourScheduleSurchargeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a TourScheduleSurcharge.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSurchargeDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleSurchargeDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleSurchargeDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/tourschedulesurcharge/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourScheduleSurcharge details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSurchargeGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleSurchargeGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleSurchargeGet', 'tenant', tenant)
            const localVarPath = `/api/v1/tourschedulesurcharge/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search TourScheduleSurcharge using available filters.
         * @param {string} tenant Description
         * @param {SearchTourScheduleSurchargesRequest} searchTourScheduleSurchargesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSurchargeSearch: async (tenant: string, searchTourScheduleSurchargesRequest: SearchTourScheduleSurchargesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleSurchargeSearch', 'tenant', tenant)
            // verify required parameter 'searchTourScheduleSurchargesRequest' is not null or undefined
            assertParamExists('tourScheduleSurchargeSearch', 'searchTourScheduleSurchargesRequest', searchTourScheduleSurchargesRequest)
            const localVarPath = `/api/v1/tourschedulesurcharge/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchTourScheduleSurchargesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a TourScheduleSurcharge.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleSurchargeRequest} updateTourScheduleSurchargeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSurchargeUpdate: async (id: string, tenant: string, updateTourScheduleSurchargeRequest: UpdateTourScheduleSurchargeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourScheduleSurchargeUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourScheduleSurchargeUpdate', 'tenant', tenant)
            // verify required parameter 'updateTourScheduleSurchargeRequest' is not null or undefined
            assertParamExists('tourScheduleSurchargeUpdate', 'updateTourScheduleSurchargeRequest', updateTourScheduleSurchargeRequest)
            const localVarPath = `/api/v1/tourschedulesurcharge/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTourScheduleSurchargeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourScheduleSurchargeApi - functional programming interface
 * @export
 */
export const TourScheduleSurchargeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourScheduleSurchargeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new TourScheduleSurcharge.
         * @param {string} tenant Description
         * @param {CreateTourScheduleSurchargeRequest} createTourScheduleSurchargeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleSurchargeCreate(tenant: string, createTourScheduleSurchargeRequest: CreateTourScheduleSurchargeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleSurchargeCreate(tenant, createTourScheduleSurchargeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a TourScheduleSurcharge.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleSurchargeDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleSurchargeDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourScheduleSurcharge details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleSurchargeGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourScheduleSurchargeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleSurchargeGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search TourScheduleSurcharge using available filters.
         * @param {string} tenant Description
         * @param {SearchTourScheduleSurchargesRequest} searchTourScheduleSurchargesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleSurchargeSearch(tenant: string, searchTourScheduleSurchargesRequest: SearchTourScheduleSurchargesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTourScheduleSurchargeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleSurchargeSearch(tenant, searchTourScheduleSurchargesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a TourScheduleSurcharge.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleSurchargeRequest} updateTourScheduleSurchargeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourScheduleSurchargeUpdate(id: string, tenant: string, updateTourScheduleSurchargeRequest: UpdateTourScheduleSurchargeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourScheduleSurchargeUpdate(id, tenant, updateTourScheduleSurchargeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourScheduleSurchargeApi - factory interface
 * @export
 */
export const TourScheduleSurchargeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourScheduleSurchargeApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new TourScheduleSurcharge.
         * @param {string} tenant Description
         * @param {CreateTourScheduleSurchargeRequest} createTourScheduleSurchargeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSurchargeCreate(tenant: string, createTourScheduleSurchargeRequest: CreateTourScheduleSurchargeRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleSurchargeCreate(tenant, createTourScheduleSurchargeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a TourScheduleSurcharge.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSurchargeDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleSurchargeDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourScheduleSurcharge details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSurchargeGet(id: string, tenant: string, options?: any): AxiosPromise<TourScheduleSurchargeDto> {
            return localVarFp.tourScheduleSurchargeGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search TourScheduleSurcharge using available filters.
         * @param {string} tenant Description
         * @param {SearchTourScheduleSurchargesRequest} searchTourScheduleSurchargesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSurchargeSearch(tenant: string, searchTourScheduleSurchargesRequest: SearchTourScheduleSurchargesRequest, options?: any): AxiosPromise<PaginationResponseOfTourScheduleSurchargeDto> {
            return localVarFp.tourScheduleSurchargeSearch(tenant, searchTourScheduleSurchargesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a TourScheduleSurcharge.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourScheduleSurchargeRequest} updateTourScheduleSurchargeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourScheduleSurchargeUpdate(id: string, tenant: string, updateTourScheduleSurchargeRequest: UpdateTourScheduleSurchargeRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourScheduleSurchargeUpdate(id, tenant, updateTourScheduleSurchargeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TourScheduleSurchargeApi - object-oriented interface
 * @export
 * @class TourScheduleSurchargeApi
 * @extends {BaseAPI}
 */
export class TourScheduleSurchargeApi extends BaseAPI {
    /**
     * 
     * @summary Create a new TourScheduleSurcharge.
     * @param {string} tenant Description
     * @param {CreateTourScheduleSurchargeRequest} createTourScheduleSurchargeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleSurchargeApi
     */
    public tourScheduleSurchargeCreate(tenant: string, createTourScheduleSurchargeRequest: CreateTourScheduleSurchargeRequest, options?: AxiosRequestConfig) {
        return TourScheduleSurchargeApiFp(this.configuration).tourScheduleSurchargeCreate(tenant, createTourScheduleSurchargeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a TourScheduleSurcharge.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleSurchargeApi
     */
    public tourScheduleSurchargeDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourScheduleSurchargeApiFp(this.configuration).tourScheduleSurchargeDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourScheduleSurcharge details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleSurchargeApi
     */
    public tourScheduleSurchargeGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourScheduleSurchargeApiFp(this.configuration).tourScheduleSurchargeGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search TourScheduleSurcharge using available filters.
     * @param {string} tenant Description
     * @param {SearchTourScheduleSurchargesRequest} searchTourScheduleSurchargesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleSurchargeApi
     */
    public tourScheduleSurchargeSearch(tenant: string, searchTourScheduleSurchargesRequest: SearchTourScheduleSurchargesRequest, options?: AxiosRequestConfig) {
        return TourScheduleSurchargeApiFp(this.configuration).tourScheduleSurchargeSearch(tenant, searchTourScheduleSurchargesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a TourScheduleSurcharge.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateTourScheduleSurchargeRequest} updateTourScheduleSurchargeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourScheduleSurchargeApi
     */
    public tourScheduleSurchargeUpdate(id: string, tenant: string, updateTourScheduleSurchargeRequest: UpdateTourScheduleSurchargeRequest, options?: AxiosRequestConfig) {
        return TourScheduleSurchargeApiFp(this.configuration).tourScheduleSurchargeUpdate(id, tenant, updateTourScheduleSurchargeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
