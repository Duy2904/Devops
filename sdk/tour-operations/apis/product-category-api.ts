/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateProductCategoryRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfProductCategoryDto } from '../models';
// @ts-ignore
import { ProductCategoryDto } from '../models';
// @ts-ignore
import { SearchProductCategoryRequest } from '../models';
// @ts-ignore
import { UpdateProductCategoryRequest } from '../models';
/**
 * ProductCategoryApi - axios parameter creator
 * @export
 */
export const ProductCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new ProductCategory.
         * @param {string} tenant Description
         * @param {CreateProductCategoryRequest} createProductCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryCreate: async (tenant: string, createProductCategoryRequest: CreateProductCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productCategoryCreate', 'tenant', tenant)
            // verify required parameter 'createProductCategoryRequest' is not null or undefined
            assertParamExists('productCategoryCreate', 'createProductCategoryRequest', createProductCategoryRequest)
            const localVarPath = `/api/v1/productcategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a ProductCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productCategoryDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productCategoryDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/productcategory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ProductCategory details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productCategoryGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productCategoryGet', 'tenant', tenant)
            const localVarPath = `/api/v1/productcategory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search ProductCategory using available filters.
         * @param {string} tenant Description
         * @param {SearchProductCategoryRequest} searchProductCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategorySearch: async (tenant: string, searchProductCategoryRequest: SearchProductCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productCategorySearch', 'tenant', tenant)
            // verify required parameter 'searchProductCategoryRequest' is not null or undefined
            assertParamExists('productCategorySearch', 'searchProductCategoryRequest', searchProductCategoryRequest)
            const localVarPath = `/api/v1/productcategory/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchProductCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a ProductCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateProductCategoryRequest} updateProductCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryUpdate: async (id: string, tenant: string, updateProductCategoryRequest: UpdateProductCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productCategoryUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('productCategoryUpdate', 'tenant', tenant)
            // verify required parameter 'updateProductCategoryRequest' is not null or undefined
            assertParamExists('productCategoryUpdate', 'updateProductCategoryRequest', updateProductCategoryRequest)
            const localVarPath = `/api/v1/productcategory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductCategoryApi - functional programming interface
 * @export
 */
export const ProductCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new ProductCategory.
         * @param {string} tenant Description
         * @param {CreateProductCategoryRequest} createProductCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCategoryCreate(tenant: string, createProductCategoryRequest: CreateProductCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCategoryCreate(tenant, createProductCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a ProductCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCategoryDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCategoryDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get ProductCategory details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCategoryGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCategoryGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search ProductCategory using available filters.
         * @param {string} tenant Description
         * @param {SearchProductCategoryRequest} searchProductCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCategorySearch(tenant: string, searchProductCategoryRequest: SearchProductCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfProductCategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCategorySearch(tenant, searchProductCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a ProductCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateProductCategoryRequest} updateProductCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCategoryUpdate(id: string, tenant: string, updateProductCategoryRequest: UpdateProductCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCategoryUpdate(id, tenant, updateProductCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductCategoryApi - factory interface
 * @export
 */
export const ProductCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductCategoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new ProductCategory.
         * @param {string} tenant Description
         * @param {CreateProductCategoryRequest} createProductCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryCreate(tenant: string, createProductCategoryRequest: CreateProductCategoryRequest, options?: any): AxiosPromise<string> {
            return localVarFp.productCategoryCreate(tenant, createProductCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a ProductCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.productCategoryDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ProductCategory details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryGet(id: string, tenant: string, options?: any): AxiosPromise<ProductCategoryDto> {
            return localVarFp.productCategoryGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search ProductCategory using available filters.
         * @param {string} tenant Description
         * @param {SearchProductCategoryRequest} searchProductCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategorySearch(tenant: string, searchProductCategoryRequest: SearchProductCategoryRequest, options?: any): AxiosPromise<PaginationResponseOfProductCategoryDto> {
            return localVarFp.productCategorySearch(tenant, searchProductCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a ProductCategory.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateProductCategoryRequest} updateProductCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCategoryUpdate(id: string, tenant: string, updateProductCategoryRequest: UpdateProductCategoryRequest, options?: any): AxiosPromise<string> {
            return localVarFp.productCategoryUpdate(id, tenant, updateProductCategoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductCategoryApi - object-oriented interface
 * @export
 * @class ProductCategoryApi
 * @extends {BaseAPI}
 */
export class ProductCategoryApi extends BaseAPI {
    /**
     * 
     * @summary Create a new ProductCategory.
     * @param {string} tenant Description
     * @param {CreateProductCategoryRequest} createProductCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public productCategoryCreate(tenant: string, createProductCategoryRequest: CreateProductCategoryRequest, options?: AxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).productCategoryCreate(tenant, createProductCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a ProductCategory.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public productCategoryDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).productCategoryDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ProductCategory details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public productCategoryGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).productCategoryGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search ProductCategory using available filters.
     * @param {string} tenant Description
     * @param {SearchProductCategoryRequest} searchProductCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public productCategorySearch(tenant: string, searchProductCategoryRequest: SearchProductCategoryRequest, options?: AxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).productCategorySearch(tenant, searchProductCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a ProductCategory.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateProductCategoryRequest} updateProductCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public productCategoryUpdate(id: string, tenant: string, updateProductCategoryRequest: UpdateProductCategoryRequest, options?: AxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).productCategoryUpdate(id, tenant, updateProductCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
