/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DebtDropdownTourFitRequest } from '../models';
// @ts-ignore
import { DropdownDto } from '../models';
// @ts-ignore
import { DropdownTourFit } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { ExportDebtReportRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { SearchDebtReportViewPaginationDto } from '../models';
// @ts-ignore
import { SearchDebtReportViewRequest } from '../models';
/**
 * DebtReportApi - axios parameter creator
 * @export
 */
export const DebtReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Dropdown TourFit.
         * @param {string} tenant Description
         * @param {DebtDropdownTourFitRequest} debtDropdownTourFitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debtReportDropdown: async (tenant: string, debtDropdownTourFitRequest: DebtDropdownTourFitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('debtReportDropdown', 'tenant', tenant)
            // verify required parameter 'debtDropdownTourFitRequest' is not null or undefined
            assertParamExists('debtReportDropdown', 'debtDropdownTourFitRequest', debtDropdownTourFitRequest)
            const localVarPath = `/api/v1/debtreport/dropdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(debtDropdownTourFitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportDebtReportRequest} exportDebtReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debtReportExport: async (tenant: string, exportDebtReportRequest: ExportDebtReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('debtReportExport', 'tenant', tenant)
            // verify required parameter 'exportDebtReportRequest' is not null or undefined
            assertParamExists('debtReportExport', 'exportDebtReportRequest', exportDebtReportRequest)
            const localVarPath = `/api/v1/debtreport/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportDebtReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list created by SO.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debtReportGetCustomer: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('debtReportGetCustomer', 'tenant', tenant)
            const localVarPath = `/api/v1/debtreport/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get provider.
         * @param {boolean} removeHnh 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debtReportGetSOProviders: async (removeHnh: boolean, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'removeHnh' is not null or undefined
            assertParamExists('debtReportGetSOProviders', 'removeHnh', removeHnh)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('debtReportGetSOProviders', 'tenant', tenant)
            const localVarPath = `/api/v1/debtreport/{removeHnh}/provider`
                .replace(`{${"removeHnh"}}`, encodeURIComponent(String(removeHnh)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Debt Report using available filters.
         * @param {string} tenant Description
         * @param {SearchDebtReportViewRequest} searchDebtReportViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debtReportSearch: async (tenant: string, searchDebtReportViewRequest: SearchDebtReportViewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('debtReportSearch', 'tenant', tenant)
            // verify required parameter 'searchDebtReportViewRequest' is not null or undefined
            assertParamExists('debtReportSearch', 'searchDebtReportViewRequest', searchDebtReportViewRequest)
            const localVarPath = `/api/v1/debtreport/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchDebtReportViewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DebtReportApi - functional programming interface
 * @export
 */
export const DebtReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DebtReportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Dropdown TourFit.
         * @param {string} tenant Description
         * @param {DebtDropdownTourFitRequest} debtDropdownTourFitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async debtReportDropdown(tenant: string, debtDropdownTourFitRequest: DebtDropdownTourFitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownTourFit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.debtReportDropdown(tenant, debtDropdownTourFitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportDebtReportRequest} exportDebtReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async debtReportExport(tenant: string, exportDebtReportRequest: ExportDebtReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.debtReportExport(tenant, exportDebtReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list created by SO.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async debtReportGetCustomer(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.debtReportGetCustomer(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get provider.
         * @param {boolean} removeHnh 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async debtReportGetSOProviders(removeHnh: boolean, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.debtReportGetSOProviders(removeHnh, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Debt Report using available filters.
         * @param {string} tenant Description
         * @param {SearchDebtReportViewRequest} searchDebtReportViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async debtReportSearch(tenant: string, searchDebtReportViewRequest: SearchDebtReportViewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchDebtReportViewPaginationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.debtReportSearch(tenant, searchDebtReportViewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DebtReportApi - factory interface
 * @export
 */
export const DebtReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DebtReportApiFp(configuration)
    return {
        /**
         * 
         * @summary Dropdown TourFit.
         * @param {string} tenant Description
         * @param {DebtDropdownTourFitRequest} debtDropdownTourFitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debtReportDropdown(tenant: string, debtDropdownTourFitRequest: DebtDropdownTourFitRequest, options?: any): AxiosPromise<Array<DropdownTourFit>> {
            return localVarFp.debtReportDropdown(tenant, debtDropdownTourFitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Description
         * @param {ExportDebtReportRequest} exportDebtReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debtReportExport(tenant: string, exportDebtReportRequest: ExportDebtReportRequest, options?: any): AxiosPromise<File> {
            return localVarFp.debtReportExport(tenant, exportDebtReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list created by SO.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debtReportGetCustomer(tenant: string, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.debtReportGetCustomer(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get provider.
         * @param {boolean} removeHnh 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debtReportGetSOProviders(removeHnh: boolean, tenant: string, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.debtReportGetSOProviders(removeHnh, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Debt Report using available filters.
         * @param {string} tenant Description
         * @param {SearchDebtReportViewRequest} searchDebtReportViewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debtReportSearch(tenant: string, searchDebtReportViewRequest: SearchDebtReportViewRequest, options?: any): AxiosPromise<SearchDebtReportViewPaginationDto> {
            return localVarFp.debtReportSearch(tenant, searchDebtReportViewRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DebtReportApi - object-oriented interface
 * @export
 * @class DebtReportApi
 * @extends {BaseAPI}
 */
export class DebtReportApi extends BaseAPI {
    /**
     * 
     * @summary Dropdown TourFit.
     * @param {string} tenant Description
     * @param {DebtDropdownTourFitRequest} debtDropdownTourFitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebtReportApi
     */
    public debtReportDropdown(tenant: string, debtDropdownTourFitRequest: DebtDropdownTourFitRequest, options?: AxiosRequestConfig) {
        return DebtReportApiFp(this.configuration).debtReportDropdown(tenant, debtDropdownTourFitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Description
     * @param {ExportDebtReportRequest} exportDebtReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebtReportApi
     */
    public debtReportExport(tenant: string, exportDebtReportRequest: ExportDebtReportRequest, options?: AxiosRequestConfig) {
        return DebtReportApiFp(this.configuration).debtReportExport(tenant, exportDebtReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list created by SO.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebtReportApi
     */
    public debtReportGetCustomer(tenant: string, options?: AxiosRequestConfig) {
        return DebtReportApiFp(this.configuration).debtReportGetCustomer(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get provider.
     * @param {boolean} removeHnh 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebtReportApi
     */
    public debtReportGetSOProviders(removeHnh: boolean, tenant: string, options?: AxiosRequestConfig) {
        return DebtReportApiFp(this.configuration).debtReportGetSOProviders(removeHnh, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Debt Report using available filters.
     * @param {string} tenant Description
     * @param {SearchDebtReportViewRequest} searchDebtReportViewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebtReportApi
     */
    public debtReportSearch(tenant: string, searchDebtReportViewRequest: SearchDebtReportViewRequest, options?: AxiosRequestConfig) {
        return DebtReportApiFp(this.configuration).debtReportSearch(tenant, searchDebtReportViewRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
