/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApproveReceivableVoucherRequest } from '../models';
// @ts-ignore
import { ApproveRefundVoucherByManagerRequest } from '../models';
// @ts-ignore
import { CreateReceivableVoucherRequest } from '../models';
// @ts-ignore
import { DocumentType } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { ExportReceivableVoucherRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfReceivableVoucherSearchDto } from '../models';
// @ts-ignore
import { ReceivableVoucherDto } from '../models';
// @ts-ignore
import { SearchReceivableVouchersRequest } from '../models';
// @ts-ignore
import { SendForApprovalRequest2 } from '../models';
// @ts-ignore
import { SendForConfirmationRequest } from '../models';
// @ts-ignore
import { UpdateReceivableVoucherRequest } from '../models';
/**
 * RefundVoucherApi - axios parameter creator
 * @export
 */
export const RefundVoucherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approve RefundVoucher.
         * @param {string} tenant Description
         * @param {ApproveRefundVoucherByManagerRequest} approveRefundVoucherByManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherApprove: async (tenant: string, approveRefundVoucherByManagerRequest: ApproveRefundVoucherByManagerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherApprove', 'tenant', tenant)
            // verify required parameter 'approveRefundVoucherByManagerRequest' is not null or undefined
            assertParamExists('refundVoucherApprove', 'approveRefundVoucherByManagerRequest', approveRefundVoucherByManagerRequest)
            const localVarPath = `/api/v1/refundvoucher/approve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approveRefundVoucherByManagerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KT confirm RefundVoucher.
         * @param {string} tenant Description
         * @param {ApproveReceivableVoucherRequest} approveReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherConfirm: async (tenant: string, approveReceivableVoucherRequest: ApproveReceivableVoucherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherConfirm', 'tenant', tenant)
            // verify required parameter 'approveReceivableVoucherRequest' is not null or undefined
            assertParamExists('refundVoucherConfirm', 'approveReceivableVoucherRequest', approveReceivableVoucherRequest)
            const localVarPath = `/api/v1/refundvoucher/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approveReceivableVoucherRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new RefundVoucher.
         * @param {string} tenant Description
         * @param {CreateReceivableVoucherRequest} createReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherCreate: async (tenant: string, createReceivableVoucherRequest: CreateReceivableVoucherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherCreate', 'tenant', tenant)
            // verify required parameter 'createReceivableVoucherRequest' is not null or undefined
            assertParamExists('refundVoucherCreate', 'createReceivableVoucherRequest', createReceivableVoucherRequest)
            const localVarPath = `/api/v1/refundvoucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReceivableVoucherRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a RefundVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refundVoucherDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/refundvoucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download RefundVoucher by id.
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherDownload: async (tenant: string, id?: string, type?: DocumentType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherDownload', 'tenant', tenant)
            const localVarPath = `/api/v1/refundvoucher/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export RefundVoucher using available filters.
         * @param {string} tenant Description
         * @param {ExportReceivableVoucherRequest} exportReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherExport: async (tenant: string, exportReceivableVoucherRequest: ExportReceivableVoucherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherExport', 'tenant', tenant)
            // verify required parameter 'exportReceivableVoucherRequest' is not null or undefined
            assertParamExists('refundVoucherExport', 'exportReceivableVoucherRequest', exportReceivableVoucherRequest)
            const localVarPath = `/api/v1/refundvoucher/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportReceivableVoucherRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get RefundVoucher details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refundVoucherGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherGet', 'tenant', tenant)
            const localVarPath = `/api/v1/refundvoucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Refund VoucherNo .
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherGetRefundVoucherNo: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherGetRefundVoucherNo', 'tenant', tenant)
            const localVarPath = `/api/v1/refundvoucher/gen-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search RefundVoucher using available filters.
         * @param {string} tenant Description
         * @param {SearchReceivableVouchersRequest} searchReceivableVouchersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherSearch: async (tenant: string, searchReceivableVouchersRequest: SearchReceivableVouchersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherSearch', 'tenant', tenant)
            // verify required parameter 'searchReceivableVouchersRequest' is not null or undefined
            assertParamExists('refundVoucherSearch', 'searchReceivableVouchersRequest', searchReceivableVouchersRequest)
            const localVarPath = `/api/v1/refundvoucher/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchReceivableVouchersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send for approval.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForApprovalRequest2} sendForApprovalRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherSendForApproval: async (id: string, tenant: string, sendForApprovalRequest2: SendForApprovalRequest2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refundVoucherSendForApproval', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherSendForApproval', 'tenant', tenant)
            // verify required parameter 'sendForApprovalRequest2' is not null or undefined
            assertParamExists('refundVoucherSendForApproval', 'sendForApprovalRequest2', sendForApprovalRequest2)
            const localVarPath = `/api/v1/refundvoucher/{id}/send-for-approval`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendForApprovalRequest2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send for confirmation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForConfirmationRequest} sendForConfirmationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherSendForConfirmation: async (id: string, tenant: string, sendForConfirmationRequest: SendForConfirmationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refundVoucherSendForConfirmation', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherSendForConfirmation', 'tenant', tenant)
            // verify required parameter 'sendForConfirmationRequest' is not null or undefined
            assertParamExists('refundVoucherSendForConfirmation', 'sendForConfirmationRequest', sendForConfirmationRequest)
            const localVarPath = `/api/v1/refundvoucher/{id}/send-for-confirmation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendForConfirmationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a RefundVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateReceivableVoucherRequest} updateReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherUpdate: async (id: string, tenant: string, updateReceivableVoucherRequest: UpdateReceivableVoucherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refundVoucherUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('refundVoucherUpdate', 'tenant', tenant)
            // verify required parameter 'updateReceivableVoucherRequest' is not null or undefined
            assertParamExists('refundVoucherUpdate', 'updateReceivableVoucherRequest', updateReceivableVoucherRequest)
            const localVarPath = `/api/v1/refundvoucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReceivableVoucherRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefundVoucherApi - functional programming interface
 * @export
 */
export const RefundVoucherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefundVoucherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Approve RefundVoucher.
         * @param {string} tenant Description
         * @param {ApproveRefundVoucherByManagerRequest} approveRefundVoucherByManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherApprove(tenant: string, approveRefundVoucherByManagerRequest: ApproveRefundVoucherByManagerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherApprove(tenant, approveRefundVoucherByManagerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KT confirm RefundVoucher.
         * @param {string} tenant Description
         * @param {ApproveReceivableVoucherRequest} approveReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherConfirm(tenant: string, approveReceivableVoucherRequest: ApproveReceivableVoucherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherConfirm(tenant, approveReceivableVoucherRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new RefundVoucher.
         * @param {string} tenant Description
         * @param {CreateReceivableVoucherRequest} createReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherCreate(tenant: string, createReceivableVoucherRequest: CreateReceivableVoucherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherCreate(tenant, createReceivableVoucherRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a RefundVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Download RefundVoucher by id.
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherDownload(tenant: string, id?: string, type?: DocumentType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherDownload(tenant, id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Export RefundVoucher using available filters.
         * @param {string} tenant Description
         * @param {ExportReceivableVoucherRequest} exportReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherExport(tenant: string, exportReceivableVoucherRequest: ExportReceivableVoucherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherExport(tenant, exportReceivableVoucherRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get RefundVoucher details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceivableVoucherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate Refund VoucherNo .
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherGetRefundVoucherNo(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherGetRefundVoucherNo(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search RefundVoucher using available filters.
         * @param {string} tenant Description
         * @param {SearchReceivableVouchersRequest} searchReceivableVouchersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherSearch(tenant: string, searchReceivableVouchersRequest: SearchReceivableVouchersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfReceivableVoucherSearchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherSearch(tenant, searchReceivableVouchersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send for approval.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForApprovalRequest2} sendForApprovalRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherSendForApproval(id: string, tenant: string, sendForApprovalRequest2: SendForApprovalRequest2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherSendForApproval(id, tenant, sendForApprovalRequest2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send for confirmation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForConfirmationRequest} sendForConfirmationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherSendForConfirmation(id: string, tenant: string, sendForConfirmationRequest: SendForConfirmationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherSendForConfirmation(id, tenant, sendForConfirmationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a RefundVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateReceivableVoucherRequest} updateReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundVoucherUpdate(id: string, tenant: string, updateReceivableVoucherRequest: UpdateReceivableVoucherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundVoucherUpdate(id, tenant, updateReceivableVoucherRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RefundVoucherApi - factory interface
 * @export
 */
export const RefundVoucherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefundVoucherApiFp(configuration)
    return {
        /**
         * 
         * @summary Approve RefundVoucher.
         * @param {string} tenant Description
         * @param {ApproveRefundVoucherByManagerRequest} approveRefundVoucherByManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherApprove(tenant: string, approveRefundVoucherByManagerRequest: ApproveRefundVoucherByManagerRequest, options?: any): AxiosPromise<number> {
            return localVarFp.refundVoucherApprove(tenant, approveRefundVoucherByManagerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KT confirm RefundVoucher.
         * @param {string} tenant Description
         * @param {ApproveReceivableVoucherRequest} approveReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherConfirm(tenant: string, approveReceivableVoucherRequest: ApproveReceivableVoucherRequest, options?: any): AxiosPromise<number> {
            return localVarFp.refundVoucherConfirm(tenant, approveReceivableVoucherRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new RefundVoucher.
         * @param {string} tenant Description
         * @param {CreateReceivableVoucherRequest} createReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherCreate(tenant: string, createReceivableVoucherRequest: CreateReceivableVoucherRequest, options?: any): AxiosPromise<string> {
            return localVarFp.refundVoucherCreate(tenant, createReceivableVoucherRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a RefundVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.refundVoucherDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download RefundVoucher by id.
         * @param {string} tenant Description
         * @param {string} [id] 
         * @param {DocumentType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherDownload(tenant: string, id?: string, type?: DocumentType, options?: any): AxiosPromise<string> {
            return localVarFp.refundVoucherDownload(tenant, id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export RefundVoucher using available filters.
         * @param {string} tenant Description
         * @param {ExportReceivableVoucherRequest} exportReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherExport(tenant: string, exportReceivableVoucherRequest: ExportReceivableVoucherRequest, options?: any): AxiosPromise<File> {
            return localVarFp.refundVoucherExport(tenant, exportReceivableVoucherRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get RefundVoucher details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherGet(id: string, tenant: string, options?: any): AxiosPromise<ReceivableVoucherDto> {
            return localVarFp.refundVoucherGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Refund VoucherNo .
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherGetRefundVoucherNo(tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.refundVoucherGetRefundVoucherNo(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search RefundVoucher using available filters.
         * @param {string} tenant Description
         * @param {SearchReceivableVouchersRequest} searchReceivableVouchersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherSearch(tenant: string, searchReceivableVouchersRequest: SearchReceivableVouchersRequest, options?: any): AxiosPromise<PaginationResponseOfReceivableVoucherSearchDto> {
            return localVarFp.refundVoucherSearch(tenant, searchReceivableVouchersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send for approval.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForApprovalRequest2} sendForApprovalRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherSendForApproval(id: string, tenant: string, sendForApprovalRequest2: SendForApprovalRequest2, options?: any): AxiosPromise<string> {
            return localVarFp.refundVoucherSendForApproval(id, tenant, sendForApprovalRequest2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send for confirmation.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {SendForConfirmationRequest} sendForConfirmationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherSendForConfirmation(id: string, tenant: string, sendForConfirmationRequest: SendForConfirmationRequest, options?: any): AxiosPromise<string> {
            return localVarFp.refundVoucherSendForConfirmation(id, tenant, sendForConfirmationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a RefundVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateReceivableVoucherRequest} updateReceivableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundVoucherUpdate(id: string, tenant: string, updateReceivableVoucherRequest: UpdateReceivableVoucherRequest, options?: any): AxiosPromise<string> {
            return localVarFp.refundVoucherUpdate(id, tenant, updateReceivableVoucherRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefundVoucherApi - object-oriented interface
 * @export
 * @class RefundVoucherApi
 * @extends {BaseAPI}
 */
export class RefundVoucherApi extends BaseAPI {
    /**
     * 
     * @summary Approve RefundVoucher.
     * @param {string} tenant Description
     * @param {ApproveRefundVoucherByManagerRequest} approveRefundVoucherByManagerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherApprove(tenant: string, approveRefundVoucherByManagerRequest: ApproveRefundVoucherByManagerRequest, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherApprove(tenant, approveRefundVoucherByManagerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KT confirm RefundVoucher.
     * @param {string} tenant Description
     * @param {ApproveReceivableVoucherRequest} approveReceivableVoucherRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherConfirm(tenant: string, approveReceivableVoucherRequest: ApproveReceivableVoucherRequest, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherConfirm(tenant, approveReceivableVoucherRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new RefundVoucher.
     * @param {string} tenant Description
     * @param {CreateReceivableVoucherRequest} createReceivableVoucherRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherCreate(tenant: string, createReceivableVoucherRequest: CreateReceivableVoucherRequest, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherCreate(tenant, createReceivableVoucherRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a RefundVoucher.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download RefundVoucher by id.
     * @param {string} tenant Description
     * @param {string} [id] 
     * @param {DocumentType} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherDownload(tenant: string, id?: string, type?: DocumentType, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherDownload(tenant, id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export RefundVoucher using available filters.
     * @param {string} tenant Description
     * @param {ExportReceivableVoucherRequest} exportReceivableVoucherRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherExport(tenant: string, exportReceivableVoucherRequest: ExportReceivableVoucherRequest, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherExport(tenant, exportReceivableVoucherRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get RefundVoucher details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Refund VoucherNo .
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherGetRefundVoucherNo(tenant: string, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherGetRefundVoucherNo(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search RefundVoucher using available filters.
     * @param {string} tenant Description
     * @param {SearchReceivableVouchersRequest} searchReceivableVouchersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherSearch(tenant: string, searchReceivableVouchersRequest: SearchReceivableVouchersRequest, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherSearch(tenant, searchReceivableVouchersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send for approval.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {SendForApprovalRequest2} sendForApprovalRequest2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherSendForApproval(id: string, tenant: string, sendForApprovalRequest2: SendForApprovalRequest2, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherSendForApproval(id, tenant, sendForApprovalRequest2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send for confirmation.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {SendForConfirmationRequest} sendForConfirmationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherSendForConfirmation(id: string, tenant: string, sendForConfirmationRequest: SendForConfirmationRequest, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherSendForConfirmation(id, tenant, sendForConfirmationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a RefundVoucher.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateReceivableVoucherRequest} updateReceivableVoucherRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundVoucherApi
     */
    public refundVoucherUpdate(id: string, tenant: string, updateReceivableVoucherRequest: UpdateReceivableVoucherRequest, options?: AxiosRequestConfig) {
        return RefundVoucherApiFp(this.configuration).refundVoucherUpdate(id, tenant, updateReceivableVoucherRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
