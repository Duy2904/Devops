/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateHotelTourServiceRequest } from '../models';
// @ts-ignore
import { CreateLandTourServiceRequest } from '../models';
// @ts-ignore
import { CreateTourServicesRequest } from '../models';
// @ts-ignore
import { CreateTransportationTourServiceRequest } from '../models';
// @ts-ignore
import { CreateVisaTourServiceRequest } from '../models';
// @ts-ignore
import { DeleteTourServiceRequest } from '../models';
// @ts-ignore
import { DeleteTransportationTourServiceRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { UpdateHotelTourServiceRequest } from '../models';
// @ts-ignore
import { UpdateLandTourServiceRequest } from '../models';
// @ts-ignore
import { UpdateTransportationTourServiceRequest } from '../models';
// @ts-ignore
import { UpdateVisaTourServiceRequest } from '../models';
/**
 * TourServiceApi - axios parameter creator
 * @export
 */
export const TourServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new tour services.
         * @param {string} tenant Description
         * @param {CreateTourServicesRequest} createTourServicesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceCreate: async (tenant: string, createTourServicesRequest: CreateTourServicesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourServiceCreate', 'tenant', tenant)
            // verify required parameter 'createTourServicesRequest' is not null or undefined
            assertParamExists('tourServiceCreate', 'createTourServicesRequest', createTourServicesRequest)
            const localVarPath = `/api/v1/tourservice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTourServicesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new Hotel tour service.
         * @param {string} tenant Description
         * @param {CreateHotelTourServiceRequest} createHotelTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceCreateHotel: async (tenant: string, createHotelTourServiceRequest: CreateHotelTourServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourServiceCreateHotel', 'tenant', tenant)
            // verify required parameter 'createHotelTourServiceRequest' is not null or undefined
            assertParamExists('tourServiceCreateHotel', 'createHotelTourServiceRequest', createHotelTourServiceRequest)
            const localVarPath = `/api/v1/tourservice/hotel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createHotelTourServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new land tour service.
         * @param {string} tenant Description
         * @param {CreateLandTourServiceRequest} createLandTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceCreateLand: async (tenant: string, createLandTourServiceRequest: CreateLandTourServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourServiceCreateLand', 'tenant', tenant)
            // verify required parameter 'createLandTourServiceRequest' is not null or undefined
            assertParamExists('tourServiceCreateLand', 'createLandTourServiceRequest', createLandTourServiceRequest)
            const localVarPath = `/api/v1/tourservice/land`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLandTourServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new Transportation tour service.
         * @param {string} tenant Description
         * @param {CreateTransportationTourServiceRequest} createTransportationTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceCreateTransportation: async (tenant: string, createTransportationTourServiceRequest: CreateTransportationTourServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourServiceCreateTransportation', 'tenant', tenant)
            // verify required parameter 'createTransportationTourServiceRequest' is not null or undefined
            assertParamExists('tourServiceCreateTransportation', 'createTransportationTourServiceRequest', createTransportationTourServiceRequest)
            const localVarPath = `/api/v1/tourservice/transportation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTransportationTourServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new Visa tour service.
         * @param {string} tenant Description
         * @param {CreateVisaTourServiceRequest} createVisaTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceCreateVisa: async (tenant: string, createVisaTourServiceRequest: CreateVisaTourServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourServiceCreateVisa', 'tenant', tenant)
            // verify required parameter 'createVisaTourServiceRequest' is not null or undefined
            assertParamExists('tourServiceCreateVisa', 'createVisaTourServiceRequest', createVisaTourServiceRequest)
            const localVarPath = `/api/v1/tourservice/visa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVisaTourServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete TourServices.
         * @param {string} tenant Description
         * @param {DeleteTourServiceRequest} deleteTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceDelete: async (tenant: string, deleteTourServiceRequest: DeleteTourServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourServiceDelete', 'tenant', tenant)
            // verify required parameter 'deleteTourServiceRequest' is not null or undefined
            assertParamExists('tourServiceDelete', 'deleteTourServiceRequest', deleteTourServiceRequest)
            const localVarPath = `/api/v1/tourservice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTourServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Transportation TourServices.
         * @param {string} tenant Description
         * @param {DeleteTransportationTourServiceRequest} deleteTransportationTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceDeleteTransportation: async (tenant: string, deleteTransportationTourServiceRequest: DeleteTransportationTourServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourServiceDeleteTransportation', 'tenant', tenant)
            // verify required parameter 'deleteTransportationTourServiceRequest' is not null or undefined
            assertParamExists('tourServiceDeleteTransportation', 'deleteTransportationTourServiceRequest', deleteTransportationTourServiceRequest)
            const localVarPath = `/api/v1/tourservice/transportation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTransportationTourServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Hotel tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateHotelTourServiceRequest} updateHotelTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceUpdateHotel: async (id: string, tenant: string, updateHotelTourServiceRequest: UpdateHotelTourServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourServiceUpdateHotel', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourServiceUpdateHotel', 'tenant', tenant)
            // verify required parameter 'updateHotelTourServiceRequest' is not null or undefined
            assertParamExists('tourServiceUpdateHotel', 'updateHotelTourServiceRequest', updateHotelTourServiceRequest)
            const localVarPath = `/api/v1/tourservice/hotel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateHotelTourServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update land tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateLandTourServiceRequest} updateLandTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceUpdateLand: async (id: string, tenant: string, updateLandTourServiceRequest: UpdateLandTourServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourServiceUpdateLand', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourServiceUpdateLand', 'tenant', tenant)
            // verify required parameter 'updateLandTourServiceRequest' is not null or undefined
            assertParamExists('tourServiceUpdateLand', 'updateLandTourServiceRequest', updateLandTourServiceRequest)
            const localVarPath = `/api/v1/tourservice/land/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateLandTourServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Transportation tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTransportationTourServiceRequest} updateTransportationTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceUpdateTransportation: async (id: string, tenant: string, updateTransportationTourServiceRequest: UpdateTransportationTourServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourServiceUpdateTransportation', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourServiceUpdateTransportation', 'tenant', tenant)
            // verify required parameter 'updateTransportationTourServiceRequest' is not null or undefined
            assertParamExists('tourServiceUpdateTransportation', 'updateTransportationTourServiceRequest', updateTransportationTourServiceRequest)
            const localVarPath = `/api/v1/tourservice/transportation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTransportationTourServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Visa tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVisaTourServiceRequest} updateVisaTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceUpdateVisa: async (id: string, tenant: string, updateVisaTourServiceRequest: UpdateVisaTourServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourServiceUpdateVisa', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourServiceUpdateVisa', 'tenant', tenant)
            // verify required parameter 'updateVisaTourServiceRequest' is not null or undefined
            assertParamExists('tourServiceUpdateVisa', 'updateVisaTourServiceRequest', updateVisaTourServiceRequest)
            const localVarPath = `/api/v1/tourservice/visa/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVisaTourServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourServiceApi - functional programming interface
 * @export
 */
export const TourServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new tour services.
         * @param {string} tenant Description
         * @param {CreateTourServicesRequest} createTourServicesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourServiceCreate(tenant: string, createTourServicesRequest: CreateTourServicesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourServiceCreate(tenant, createTourServicesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new Hotel tour service.
         * @param {string} tenant Description
         * @param {CreateHotelTourServiceRequest} createHotelTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourServiceCreateHotel(tenant: string, createHotelTourServiceRequest: CreateHotelTourServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourServiceCreateHotel(tenant, createHotelTourServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new land tour service.
         * @param {string} tenant Description
         * @param {CreateLandTourServiceRequest} createLandTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourServiceCreateLand(tenant: string, createLandTourServiceRequest: CreateLandTourServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourServiceCreateLand(tenant, createLandTourServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new Transportation tour service.
         * @param {string} tenant Description
         * @param {CreateTransportationTourServiceRequest} createTransportationTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourServiceCreateTransportation(tenant: string, createTransportationTourServiceRequest: CreateTransportationTourServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourServiceCreateTransportation(tenant, createTransportationTourServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new Visa tour service.
         * @param {string} tenant Description
         * @param {CreateVisaTourServiceRequest} createVisaTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourServiceCreateVisa(tenant: string, createVisaTourServiceRequest: CreateVisaTourServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourServiceCreateVisa(tenant, createVisaTourServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete TourServices.
         * @param {string} tenant Description
         * @param {DeleteTourServiceRequest} deleteTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourServiceDelete(tenant: string, deleteTourServiceRequest: DeleteTourServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourServiceDelete(tenant, deleteTourServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Transportation TourServices.
         * @param {string} tenant Description
         * @param {DeleteTransportationTourServiceRequest} deleteTransportationTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourServiceDeleteTransportation(tenant: string, deleteTransportationTourServiceRequest: DeleteTransportationTourServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourServiceDeleteTransportation(tenant, deleteTransportationTourServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Hotel tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateHotelTourServiceRequest} updateHotelTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourServiceUpdateHotel(id: string, tenant: string, updateHotelTourServiceRequest: UpdateHotelTourServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourServiceUpdateHotel(id, tenant, updateHotelTourServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update land tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateLandTourServiceRequest} updateLandTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourServiceUpdateLand(id: string, tenant: string, updateLandTourServiceRequest: UpdateLandTourServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourServiceUpdateLand(id, tenant, updateLandTourServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Transportation tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTransportationTourServiceRequest} updateTransportationTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourServiceUpdateTransportation(id: string, tenant: string, updateTransportationTourServiceRequest: UpdateTransportationTourServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourServiceUpdateTransportation(id, tenant, updateTransportationTourServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Visa tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVisaTourServiceRequest} updateVisaTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourServiceUpdateVisa(id: string, tenant: string, updateVisaTourServiceRequest: UpdateVisaTourServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourServiceUpdateVisa(id, tenant, updateVisaTourServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourServiceApi - factory interface
 * @export
 */
export const TourServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new tour services.
         * @param {string} tenant Description
         * @param {CreateTourServicesRequest} createTourServicesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceCreate(tenant: string, createTourServicesRequest: CreateTourServicesRequest, options?: any): AxiosPromise<number> {
            return localVarFp.tourServiceCreate(tenant, createTourServicesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new Hotel tour service.
         * @param {string} tenant Description
         * @param {CreateHotelTourServiceRequest} createHotelTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceCreateHotel(tenant: string, createHotelTourServiceRequest: CreateHotelTourServiceRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourServiceCreateHotel(tenant, createHotelTourServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new land tour service.
         * @param {string} tenant Description
         * @param {CreateLandTourServiceRequest} createLandTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceCreateLand(tenant: string, createLandTourServiceRequest: CreateLandTourServiceRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourServiceCreateLand(tenant, createLandTourServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new Transportation tour service.
         * @param {string} tenant Description
         * @param {CreateTransportationTourServiceRequest} createTransportationTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceCreateTransportation(tenant: string, createTransportationTourServiceRequest: CreateTransportationTourServiceRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourServiceCreateTransportation(tenant, createTransportationTourServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new Visa tour service.
         * @param {string} tenant Description
         * @param {CreateVisaTourServiceRequest} createVisaTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceCreateVisa(tenant: string, createVisaTourServiceRequest: CreateVisaTourServiceRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourServiceCreateVisa(tenant, createVisaTourServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete TourServices.
         * @param {string} tenant Description
         * @param {DeleteTourServiceRequest} deleteTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceDelete(tenant: string, deleteTourServiceRequest: DeleteTourServiceRequest, options?: any): AxiosPromise<number> {
            return localVarFp.tourServiceDelete(tenant, deleteTourServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Transportation TourServices.
         * @param {string} tenant Description
         * @param {DeleteTransportationTourServiceRequest} deleteTransportationTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceDeleteTransportation(tenant: string, deleteTransportationTourServiceRequest: DeleteTransportationTourServiceRequest, options?: any): AxiosPromise<number> {
            return localVarFp.tourServiceDeleteTransportation(tenant, deleteTransportationTourServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Hotel tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateHotelTourServiceRequest} updateHotelTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceUpdateHotel(id: string, tenant: string, updateHotelTourServiceRequest: UpdateHotelTourServiceRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourServiceUpdateHotel(id, tenant, updateHotelTourServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update land tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateLandTourServiceRequest} updateLandTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceUpdateLand(id: string, tenant: string, updateLandTourServiceRequest: UpdateLandTourServiceRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourServiceUpdateLand(id, tenant, updateLandTourServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Transportation tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTransportationTourServiceRequest} updateTransportationTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceUpdateTransportation(id: string, tenant: string, updateTransportationTourServiceRequest: UpdateTransportationTourServiceRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourServiceUpdateTransportation(id, tenant, updateTransportationTourServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Visa tour service.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVisaTourServiceRequest} updateVisaTourServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourServiceUpdateVisa(id: string, tenant: string, updateVisaTourServiceRequest: UpdateVisaTourServiceRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourServiceUpdateVisa(id, tenant, updateVisaTourServiceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TourServiceApi - object-oriented interface
 * @export
 * @class TourServiceApi
 * @extends {BaseAPI}
 */
export class TourServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create new tour services.
     * @param {string} tenant Description
     * @param {CreateTourServicesRequest} createTourServicesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourServiceApi
     */
    public tourServiceCreate(tenant: string, createTourServicesRequest: CreateTourServicesRequest, options?: AxiosRequestConfig) {
        return TourServiceApiFp(this.configuration).tourServiceCreate(tenant, createTourServicesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new Hotel tour service.
     * @param {string} tenant Description
     * @param {CreateHotelTourServiceRequest} createHotelTourServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourServiceApi
     */
    public tourServiceCreateHotel(tenant: string, createHotelTourServiceRequest: CreateHotelTourServiceRequest, options?: AxiosRequestConfig) {
        return TourServiceApiFp(this.configuration).tourServiceCreateHotel(tenant, createHotelTourServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new land tour service.
     * @param {string} tenant Description
     * @param {CreateLandTourServiceRequest} createLandTourServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourServiceApi
     */
    public tourServiceCreateLand(tenant: string, createLandTourServiceRequest: CreateLandTourServiceRequest, options?: AxiosRequestConfig) {
        return TourServiceApiFp(this.configuration).tourServiceCreateLand(tenant, createLandTourServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new Transportation tour service.
     * @param {string} tenant Description
     * @param {CreateTransportationTourServiceRequest} createTransportationTourServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourServiceApi
     */
    public tourServiceCreateTransportation(tenant: string, createTransportationTourServiceRequest: CreateTransportationTourServiceRequest, options?: AxiosRequestConfig) {
        return TourServiceApiFp(this.configuration).tourServiceCreateTransportation(tenant, createTransportationTourServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new Visa tour service.
     * @param {string} tenant Description
     * @param {CreateVisaTourServiceRequest} createVisaTourServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourServiceApi
     */
    public tourServiceCreateVisa(tenant: string, createVisaTourServiceRequest: CreateVisaTourServiceRequest, options?: AxiosRequestConfig) {
        return TourServiceApiFp(this.configuration).tourServiceCreateVisa(tenant, createVisaTourServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete TourServices.
     * @param {string} tenant Description
     * @param {DeleteTourServiceRequest} deleteTourServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourServiceApi
     */
    public tourServiceDelete(tenant: string, deleteTourServiceRequest: DeleteTourServiceRequest, options?: AxiosRequestConfig) {
        return TourServiceApiFp(this.configuration).tourServiceDelete(tenant, deleteTourServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Transportation TourServices.
     * @param {string} tenant Description
     * @param {DeleteTransportationTourServiceRequest} deleteTransportationTourServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourServiceApi
     */
    public tourServiceDeleteTransportation(tenant: string, deleteTransportationTourServiceRequest: DeleteTransportationTourServiceRequest, options?: AxiosRequestConfig) {
        return TourServiceApiFp(this.configuration).tourServiceDeleteTransportation(tenant, deleteTransportationTourServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Hotel tour service.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateHotelTourServiceRequest} updateHotelTourServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourServiceApi
     */
    public tourServiceUpdateHotel(id: string, tenant: string, updateHotelTourServiceRequest: UpdateHotelTourServiceRequest, options?: AxiosRequestConfig) {
        return TourServiceApiFp(this.configuration).tourServiceUpdateHotel(id, tenant, updateHotelTourServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update land tour service.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateLandTourServiceRequest} updateLandTourServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourServiceApi
     */
    public tourServiceUpdateLand(id: string, tenant: string, updateLandTourServiceRequest: UpdateLandTourServiceRequest, options?: AxiosRequestConfig) {
        return TourServiceApiFp(this.configuration).tourServiceUpdateLand(id, tenant, updateLandTourServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Transportation tour service.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateTransportationTourServiceRequest} updateTransportationTourServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourServiceApi
     */
    public tourServiceUpdateTransportation(id: string, tenant: string, updateTransportationTourServiceRequest: UpdateTransportationTourServiceRequest, options?: AxiosRequestConfig) {
        return TourServiceApiFp(this.configuration).tourServiceUpdateTransportation(id, tenant, updateTransportationTourServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Visa tour service.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateVisaTourServiceRequest} updateVisaTourServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourServiceApi
     */
    public tourServiceUpdateVisa(id: string, tenant: string, updateVisaTourServiceRequest: UpdateVisaTourServiceRequest, options?: AxiosRequestConfig) {
        return TourServiceApiFp(this.configuration).tourServiceUpdateVisa(id, tenant, updateVisaTourServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
