/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateSaleOrderLinePassengerRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfSaleOrderLinePassengerDto } from '../models';
// @ts-ignore
import { SaleOrderLinePassengerDto } from '../models';
// @ts-ignore
import { SearchSaleOrderLinePassengersRequest } from '../models';
// @ts-ignore
import { UpdateSaleOrderLinePassengerRequest } from '../models';
/**
 * SaleOrderLinePassengerApi - axios parameter creator
 * @export
 */
export const SaleOrderLinePassengerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new SaleOrderLinePassenger.
         * @param {string} tenant Description
         * @param {CreateSaleOrderLinePassengerRequest} createSaleOrderLinePassengerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderLinePassengerCreate: async (tenant: string, createSaleOrderLinePassengerRequest: CreateSaleOrderLinePassengerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderLinePassengerCreate', 'tenant', tenant)
            // verify required parameter 'createSaleOrderLinePassengerRequest' is not null or undefined
            assertParamExists('saleOrderLinePassengerCreate', 'createSaleOrderLinePassengerRequest', createSaleOrderLinePassengerRequest)
            const localVarPath = `/api/v1/saleorderlinepassenger`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSaleOrderLinePassengerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a SaleOrderLinePassenger.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderLinePassengerDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saleOrderLinePassengerDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderLinePassengerDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorderlinepassenger/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get SaleOrderLinePassenger details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderLinePassengerGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saleOrderLinePassengerGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderLinePassengerGet', 'tenant', tenant)
            const localVarPath = `/api/v1/saleorderlinepassenger/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search SaleOrderLinePassenger using available filters.
         * @param {string} tenant Description
         * @param {SearchSaleOrderLinePassengersRequest} searchSaleOrderLinePassengersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderLinePassengerSearch: async (tenant: string, searchSaleOrderLinePassengersRequest: SearchSaleOrderLinePassengersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderLinePassengerSearch', 'tenant', tenant)
            // verify required parameter 'searchSaleOrderLinePassengersRequest' is not null or undefined
            assertParamExists('saleOrderLinePassengerSearch', 'searchSaleOrderLinePassengersRequest', searchSaleOrderLinePassengersRequest)
            const localVarPath = `/api/v1/saleorderlinepassenger/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchSaleOrderLinePassengersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a SaleOrderLinePassenger.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateSaleOrderLinePassengerRequest} updateSaleOrderLinePassengerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderLinePassengerUpdate: async (id: string, tenant: string, updateSaleOrderLinePassengerRequest: UpdateSaleOrderLinePassengerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saleOrderLinePassengerUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('saleOrderLinePassengerUpdate', 'tenant', tenant)
            // verify required parameter 'updateSaleOrderLinePassengerRequest' is not null or undefined
            assertParamExists('saleOrderLinePassengerUpdate', 'updateSaleOrderLinePassengerRequest', updateSaleOrderLinePassengerRequest)
            const localVarPath = `/api/v1/saleorderlinepassenger/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSaleOrderLinePassengerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SaleOrderLinePassengerApi - functional programming interface
 * @export
 */
export const SaleOrderLinePassengerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SaleOrderLinePassengerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new SaleOrderLinePassenger.
         * @param {string} tenant Description
         * @param {CreateSaleOrderLinePassengerRequest} createSaleOrderLinePassengerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderLinePassengerCreate(tenant: string, createSaleOrderLinePassengerRequest: CreateSaleOrderLinePassengerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderLinePassengerCreate(tenant, createSaleOrderLinePassengerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a SaleOrderLinePassenger.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderLinePassengerDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderLinePassengerDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get SaleOrderLinePassenger details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderLinePassengerGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleOrderLinePassengerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderLinePassengerGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search SaleOrderLinePassenger using available filters.
         * @param {string} tenant Description
         * @param {SearchSaleOrderLinePassengersRequest} searchSaleOrderLinePassengersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderLinePassengerSearch(tenant: string, searchSaleOrderLinePassengersRequest: SearchSaleOrderLinePassengersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfSaleOrderLinePassengerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderLinePassengerSearch(tenant, searchSaleOrderLinePassengersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a SaleOrderLinePassenger.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateSaleOrderLinePassengerRequest} updateSaleOrderLinePassengerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleOrderLinePassengerUpdate(id: string, tenant: string, updateSaleOrderLinePassengerRequest: UpdateSaleOrderLinePassengerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleOrderLinePassengerUpdate(id, tenant, updateSaleOrderLinePassengerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SaleOrderLinePassengerApi - factory interface
 * @export
 */
export const SaleOrderLinePassengerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SaleOrderLinePassengerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new SaleOrderLinePassenger.
         * @param {string} tenant Description
         * @param {CreateSaleOrderLinePassengerRequest} createSaleOrderLinePassengerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderLinePassengerCreate(tenant: string, createSaleOrderLinePassengerRequest: CreateSaleOrderLinePassengerRequest, options?: any): AxiosPromise<string> {
            return localVarFp.saleOrderLinePassengerCreate(tenant, createSaleOrderLinePassengerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a SaleOrderLinePassenger.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderLinePassengerDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.saleOrderLinePassengerDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get SaleOrderLinePassenger details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderLinePassengerGet(id: string, tenant: string, options?: any): AxiosPromise<SaleOrderLinePassengerDto> {
            return localVarFp.saleOrderLinePassengerGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search SaleOrderLinePassenger using available filters.
         * @param {string} tenant Description
         * @param {SearchSaleOrderLinePassengersRequest} searchSaleOrderLinePassengersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderLinePassengerSearch(tenant: string, searchSaleOrderLinePassengersRequest: SearchSaleOrderLinePassengersRequest, options?: any): AxiosPromise<PaginationResponseOfSaleOrderLinePassengerDto> {
            return localVarFp.saleOrderLinePassengerSearch(tenant, searchSaleOrderLinePassengersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a SaleOrderLinePassenger.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateSaleOrderLinePassengerRequest} updateSaleOrderLinePassengerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleOrderLinePassengerUpdate(id: string, tenant: string, updateSaleOrderLinePassengerRequest: UpdateSaleOrderLinePassengerRequest, options?: any): AxiosPromise<string> {
            return localVarFp.saleOrderLinePassengerUpdate(id, tenant, updateSaleOrderLinePassengerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SaleOrderLinePassengerApi - object-oriented interface
 * @export
 * @class SaleOrderLinePassengerApi
 * @extends {BaseAPI}
 */
export class SaleOrderLinePassengerApi extends BaseAPI {
    /**
     * 
     * @summary Create a new SaleOrderLinePassenger.
     * @param {string} tenant Description
     * @param {CreateSaleOrderLinePassengerRequest} createSaleOrderLinePassengerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderLinePassengerApi
     */
    public saleOrderLinePassengerCreate(tenant: string, createSaleOrderLinePassengerRequest: CreateSaleOrderLinePassengerRequest, options?: AxiosRequestConfig) {
        return SaleOrderLinePassengerApiFp(this.configuration).saleOrderLinePassengerCreate(tenant, createSaleOrderLinePassengerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a SaleOrderLinePassenger.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderLinePassengerApi
     */
    public saleOrderLinePassengerDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return SaleOrderLinePassengerApiFp(this.configuration).saleOrderLinePassengerDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get SaleOrderLinePassenger details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderLinePassengerApi
     */
    public saleOrderLinePassengerGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return SaleOrderLinePassengerApiFp(this.configuration).saleOrderLinePassengerGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search SaleOrderLinePassenger using available filters.
     * @param {string} tenant Description
     * @param {SearchSaleOrderLinePassengersRequest} searchSaleOrderLinePassengersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderLinePassengerApi
     */
    public saleOrderLinePassengerSearch(tenant: string, searchSaleOrderLinePassengersRequest: SearchSaleOrderLinePassengersRequest, options?: AxiosRequestConfig) {
        return SaleOrderLinePassengerApiFp(this.configuration).saleOrderLinePassengerSearch(tenant, searchSaleOrderLinePassengersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a SaleOrderLinePassenger.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateSaleOrderLinePassengerRequest} updateSaleOrderLinePassengerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleOrderLinePassengerApi
     */
    public saleOrderLinePassengerUpdate(id: string, tenant: string, updateSaleOrderLinePassengerRequest: UpdateSaleOrderLinePassengerRequest, options?: AxiosRequestConfig) {
        return SaleOrderLinePassengerApiFp(this.configuration).saleOrderLinePassengerUpdate(id, tenant, updateSaleOrderLinePassengerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
