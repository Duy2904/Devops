/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateEmployeeRequest } from '../models';
// @ts-ignore
import { EmployeeDetailsDto } from '../models';
// @ts-ignore
import { EmployeeDropdownDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfEmployeeDto } from '../models';
// @ts-ignore
import { SearchEmployeesRequest } from '../models';
// @ts-ignore
import { UpdateEmployeeRequest } from '../models';
/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Employee.
         * @param {string} tenant Description
         * @param {CreateEmployeeRequest} createEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeCreate: async (tenant: string, createEmployeeRequest: CreateEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('employeeCreate', 'tenant', tenant)
            // verify required parameter 'createEmployeeRequest' is not null or undefined
            assertParamExists('employeeCreate', 'createEmployeeRequest', createEmployeeRequest)
            const localVarPath = `/api/v1/employee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEmployeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Employee.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('employeeDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('employeeDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Employee details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('employeeGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('employeeGet', 'tenant', tenant)
            const localVarPath = `/api/v1/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get employee dropdown.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeGetDropdown: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('employeeGetDropdown', 'tenant', tenant)
            const localVarPath = `/api/v1/employee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Employee using available filters.
         * @param {string} tenant Description
         * @param {SearchEmployeesRequest} searchEmployeesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeSearch: async (tenant: string, searchEmployeesRequest: SearchEmployeesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('employeeSearch', 'tenant', tenant)
            // verify required parameter 'searchEmployeesRequest' is not null or undefined
            assertParamExists('employeeSearch', 'searchEmployeesRequest', searchEmployeesRequest)
            const localVarPath = `/api/v1/employee/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchEmployeesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Employee.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateEmployeeRequest} updateEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeUpdate: async (id: string, tenant: string, updateEmployeeRequest: UpdateEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('employeeUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('employeeUpdate', 'tenant', tenant)
            // verify required parameter 'updateEmployeeRequest' is not null or undefined
            assertParamExists('employeeUpdate', 'updateEmployeeRequest', updateEmployeeRequest)
            const localVarPath = `/api/v1/employee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmployeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Employee.
         * @param {string} tenant Description
         * @param {CreateEmployeeRequest} createEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeCreate(tenant: string, createEmployeeRequest: CreateEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeCreate(tenant, createEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Employee.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Employee details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get employee dropdown.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeGetDropdown(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeDropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeGetDropdown(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Employee using available filters.
         * @param {string} tenant Description
         * @param {SearchEmployeesRequest} searchEmployeesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeSearch(tenant: string, searchEmployeesRequest: SearchEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfEmployeeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeSearch(tenant, searchEmployeesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Employee.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateEmployeeRequest} updateEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeUpdate(id: string, tenant: string, updateEmployeeRequest: UpdateEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeUpdate(id, tenant, updateEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Employee.
         * @param {string} tenant Description
         * @param {CreateEmployeeRequest} createEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeCreate(tenant: string, createEmployeeRequest: CreateEmployeeRequest, options?: any): AxiosPromise<string> {
            return localVarFp.employeeCreate(tenant, createEmployeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Employee.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.employeeDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Employee details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeGet(id: string, tenant: string, options?: any): AxiosPromise<EmployeeDetailsDto> {
            return localVarFp.employeeGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get employee dropdown.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeGetDropdown(tenant: string, options?: any): AxiosPromise<Array<EmployeeDropdownDto>> {
            return localVarFp.employeeGetDropdown(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Employee using available filters.
         * @param {string} tenant Description
         * @param {SearchEmployeesRequest} searchEmployeesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeSearch(tenant: string, searchEmployeesRequest: SearchEmployeesRequest, options?: any): AxiosPromise<PaginationResponseOfEmployeeDto> {
            return localVarFp.employeeSearch(tenant, searchEmployeesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Employee.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateEmployeeRequest} updateEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeUpdate(id: string, tenant: string, updateEmployeeRequest: UpdateEmployeeRequest, options?: any): AxiosPromise<string> {
            return localVarFp.employeeUpdate(id, tenant, updateEmployeeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Employee.
     * @param {string} tenant Description
     * @param {CreateEmployeeRequest} createEmployeeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeCreate(tenant: string, createEmployeeRequest: CreateEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeCreate(tenant, createEmployeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Employee.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Employee details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get employee dropdown.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeGetDropdown(tenant: string, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeGetDropdown(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Employee using available filters.
     * @param {string} tenant Description
     * @param {SearchEmployeesRequest} searchEmployeesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeSearch(tenant: string, searchEmployeesRequest: SearchEmployeesRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeSearch(tenant, searchEmployeesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Employee.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateEmployeeRequest} updateEmployeeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeUpdate(id: string, tenant: string, updateEmployeeRequest: UpdateEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeUpdate(id, tenant, updateEmployeeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
