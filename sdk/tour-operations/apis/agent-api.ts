/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Agent } from '../models';
// @ts-ignore
import { CreateAgentRequest } from '../models';
// @ts-ignore
import { DropdownDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { ExportAgentRequest } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfIdentityAgentResult } from '../models';
// @ts-ignore
import { SearchAgentsRequest } from '../models';
// @ts-ignore
import { UpdateAgentRequest } from '../models';
/**
 * AgentApi - axios parameter creator
 * @export
 */
export const AgentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new info Agent.
         * @param {string} tenant Description
         * @param {CreateAgentRequest} createAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentCreate: async (tenant: string, createAgentRequest: CreateAgentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('agentCreate', 'tenant', tenant)
            // verify required parameter 'createAgentRequest' is not null or undefined
            assertParamExists('agentCreate', 'createAgentRequest', createAgentRequest)
            const localVarPath = `/api/v1/agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAgentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete info Agent.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('agentDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/agent/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dropdown Agent.
         * @param {string} tenant Description
         * @param {SearchAgentsRequest} searchAgentsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentDropdown: async (tenant: string, searchAgentsRequest: SearchAgentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('agentDropdown', 'tenant', tenant)
            // verify required parameter 'searchAgentsRequest' is not null or undefined
            assertParamExists('agentDropdown', 'searchAgentsRequest', searchAgentsRequest)
            const localVarPath = `/api/v1/agent/dropdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchAgentsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export info Agents.
         * @param {string} tenant Description
         * @param {ExportAgentRequest} exportAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentExport: async (tenant: string, exportAgentRequest: ExportAgentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('agentExport', 'tenant', tenant)
            // verify required parameter 'exportAgentRequest' is not null or undefined
            assertParamExists('agentExport', 'exportAgentRequest', exportAgentRequest)
            const localVarPath = `/api/v1/agent/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportAgentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get info Agent.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('agentGet', 'tenant', tenant)
            const localVarPath = `/api/v1/agent/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get List details.
         * @param {string} tenant Description
         * @param {SearchAgentsRequest} searchAgentsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentSearch: async (tenant: string, searchAgentsRequest: SearchAgentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('agentSearch', 'tenant', tenant)
            // verify required parameter 'searchAgentsRequest' is not null or undefined
            assertParamExists('agentSearch', 'searchAgentsRequest', searchAgentsRequest)
            const localVarPath = `/api/v1/agent/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchAgentsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update info Agent.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateAgentRequest} updateAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentUpdate: async (id: string, tenant: string, updateAgentRequest: UpdateAgentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('agentUpdate', 'tenant', tenant)
            // verify required parameter 'updateAgentRequest' is not null or undefined
            assertParamExists('agentUpdate', 'updateAgentRequest', updateAgentRequest)
            const localVarPath = `/api/v1/agent/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAgentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentApi - functional programming interface
 * @export
 */
export const AgentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new info Agent.
         * @param {string} tenant Description
         * @param {CreateAgentRequest} createAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentCreate(tenant: string, createAgentRequest: CreateAgentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentCreate(tenant, createAgentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete info Agent.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Dropdown Agent.
         * @param {string} tenant Description
         * @param {SearchAgentsRequest} searchAgentsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentDropdown(tenant: string, searchAgentsRequest: SearchAgentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DropdownDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentDropdown(tenant, searchAgentsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Export info Agents.
         * @param {string} tenant Description
         * @param {ExportAgentRequest} exportAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentExport(tenant: string, exportAgentRequest: ExportAgentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentExport(tenant, exportAgentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get info Agent.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Agent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get List details.
         * @param {string} tenant Description
         * @param {SearchAgentsRequest} searchAgentsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentSearch(tenant: string, searchAgentsRequest: SearchAgentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfIdentityAgentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentSearch(tenant, searchAgentsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update info Agent.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateAgentRequest} updateAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentUpdate(id: string, tenant: string, updateAgentRequest: UpdateAgentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentUpdate(id, tenant, updateAgentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AgentApi - factory interface
 * @export
 */
export const AgentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgentApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new info Agent.
         * @param {string} tenant Description
         * @param {CreateAgentRequest} createAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentCreate(tenant: string, createAgentRequest: CreateAgentRequest, options?: any): AxiosPromise<string> {
            return localVarFp.agentCreate(tenant, createAgentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete info Agent.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.agentDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Dropdown Agent.
         * @param {string} tenant Description
         * @param {SearchAgentsRequest} searchAgentsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentDropdown(tenant: string, searchAgentsRequest: SearchAgentsRequest, options?: any): AxiosPromise<Array<DropdownDto>> {
            return localVarFp.agentDropdown(tenant, searchAgentsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export info Agents.
         * @param {string} tenant Description
         * @param {ExportAgentRequest} exportAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentExport(tenant: string, exportAgentRequest: ExportAgentRequest, options?: any): AxiosPromise<File> {
            return localVarFp.agentExport(tenant, exportAgentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get info Agent.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentGet(id: string, tenant: string, options?: any): AxiosPromise<Agent> {
            return localVarFp.agentGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get List details.
         * @param {string} tenant Description
         * @param {SearchAgentsRequest} searchAgentsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentSearch(tenant: string, searchAgentsRequest: SearchAgentsRequest, options?: any): AxiosPromise<PaginationResponseOfIdentityAgentResult> {
            return localVarFp.agentSearch(tenant, searchAgentsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update info Agent.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateAgentRequest} updateAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentUpdate(id: string, tenant: string, updateAgentRequest: UpdateAgentRequest, options?: any): AxiosPromise<string> {
            return localVarFp.agentUpdate(id, tenant, updateAgentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgentApi - object-oriented interface
 * @export
 * @class AgentApi
 * @extends {BaseAPI}
 */
export class AgentApi extends BaseAPI {
    /**
     * 
     * @summary Create a new info Agent.
     * @param {string} tenant Description
     * @param {CreateAgentRequest} createAgentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentCreate(tenant: string, createAgentRequest: CreateAgentRequest, options?: AxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentCreate(tenant, createAgentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete info Agent.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Dropdown Agent.
     * @param {string} tenant Description
     * @param {SearchAgentsRequest} searchAgentsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentDropdown(tenant: string, searchAgentsRequest: SearchAgentsRequest, options?: AxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentDropdown(tenant, searchAgentsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export info Agents.
     * @param {string} tenant Description
     * @param {ExportAgentRequest} exportAgentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentExport(tenant: string, exportAgentRequest: ExportAgentRequest, options?: AxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentExport(tenant, exportAgentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get info Agent.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get List details.
     * @param {string} tenant Description
     * @param {SearchAgentsRequest} searchAgentsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentSearch(tenant: string, searchAgentsRequest: SearchAgentsRequest, options?: AxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentSearch(tenant, searchAgentsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update info Agent.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateAgentRequest} updateAgentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentUpdate(id: string, tenant: string, updateAgentRequest: UpdateAgentRequest, options?: AxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentUpdate(id, tenant, updateAgentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
