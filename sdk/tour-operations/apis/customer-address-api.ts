/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateCustomerAddressRequest } from '../models';
// @ts-ignore
import { CustomerAddressDto } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfCustomerAddressDto } from '../models';
// @ts-ignore
import { SearchCustomerAddressesRequest } from '../models';
// @ts-ignore
import { UpdateCustomerAddressRequest } from '../models';
/**
 * CustomerAddressApi - axios parameter creator
 * @export
 */
export const CustomerAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new CustomerAddress.
         * @param {string} tenant Description
         * @param {CreateCustomerAddressRequest} createCustomerAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressCreate: async (tenant: string, createCustomerAddressRequest: CreateCustomerAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerAddressCreate', 'tenant', tenant)
            // verify required parameter 'createCustomerAddressRequest' is not null or undefined
            assertParamExists('customerAddressCreate', 'createCustomerAddressRequest', createCustomerAddressRequest)
            const localVarPath = `/api/v1/customeraddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomerAddressRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a CustomerAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerAddressDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerAddressDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/customeraddress/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get CustomerAddress details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerAddressGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerAddressGet', 'tenant', tenant)
            const localVarPath = `/api/v1/customeraddress/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search CustomerAddress using available filters.
         * @param {string} tenant Description
         * @param {SearchCustomerAddressesRequest} searchCustomerAddressesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressSearch: async (tenant: string, searchCustomerAddressesRequest: SearchCustomerAddressesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerAddressSearch', 'tenant', tenant)
            // verify required parameter 'searchCustomerAddressesRequest' is not null or undefined
            assertParamExists('customerAddressSearch', 'searchCustomerAddressesRequest', searchCustomerAddressesRequest)
            const localVarPath = `/api/v1/customeraddress/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchCustomerAddressesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a CustomerAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCustomerAddressRequest} updateCustomerAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressUpdate: async (id: string, tenant: string, updateCustomerAddressRequest: UpdateCustomerAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerAddressUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('customerAddressUpdate', 'tenant', tenant)
            // verify required parameter 'updateCustomerAddressRequest' is not null or undefined
            assertParamExists('customerAddressUpdate', 'updateCustomerAddressRequest', updateCustomerAddressRequest)
            const localVarPath = `/api/v1/customeraddress/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomerAddressRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerAddressApi - functional programming interface
 * @export
 */
export const CustomerAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new CustomerAddress.
         * @param {string} tenant Description
         * @param {CreateCustomerAddressRequest} createCustomerAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddressCreate(tenant: string, createCustomerAddressRequest: CreateCustomerAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddressCreate(tenant, createCustomerAddressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a CustomerAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddressDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddressDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get CustomerAddress details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddressGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddressGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search CustomerAddress using available filters.
         * @param {string} tenant Description
         * @param {SearchCustomerAddressesRequest} searchCustomerAddressesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddressSearch(tenant: string, searchCustomerAddressesRequest: SearchCustomerAddressesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfCustomerAddressDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddressSearch(tenant, searchCustomerAddressesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a CustomerAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCustomerAddressRequest} updateCustomerAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAddressUpdate(id: string, tenant: string, updateCustomerAddressRequest: UpdateCustomerAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAddressUpdate(id, tenant, updateCustomerAddressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerAddressApi - factory interface
 * @export
 */
export const CustomerAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerAddressApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new CustomerAddress.
         * @param {string} tenant Description
         * @param {CreateCustomerAddressRequest} createCustomerAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressCreate(tenant: string, createCustomerAddressRequest: CreateCustomerAddressRequest, options?: any): AxiosPromise<string> {
            return localVarFp.customerAddressCreate(tenant, createCustomerAddressRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a CustomerAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.customerAddressDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get CustomerAddress details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressGet(id: string, tenant: string, options?: any): AxiosPromise<CustomerAddressDto> {
            return localVarFp.customerAddressGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search CustomerAddress using available filters.
         * @param {string} tenant Description
         * @param {SearchCustomerAddressesRequest} searchCustomerAddressesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressSearch(tenant: string, searchCustomerAddressesRequest: SearchCustomerAddressesRequest, options?: any): AxiosPromise<PaginationResponseOfCustomerAddressDto> {
            return localVarFp.customerAddressSearch(tenant, searchCustomerAddressesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a CustomerAddress.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCustomerAddressRequest} updateCustomerAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAddressUpdate(id: string, tenant: string, updateCustomerAddressRequest: UpdateCustomerAddressRequest, options?: any): AxiosPromise<string> {
            return localVarFp.customerAddressUpdate(id, tenant, updateCustomerAddressRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerAddressApi - object-oriented interface
 * @export
 * @class CustomerAddressApi
 * @extends {BaseAPI}
 */
export class CustomerAddressApi extends BaseAPI {
    /**
     * 
     * @summary Create a new CustomerAddress.
     * @param {string} tenant Description
     * @param {CreateCustomerAddressRequest} createCustomerAddressRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAddressApi
     */
    public customerAddressCreate(tenant: string, createCustomerAddressRequest: CreateCustomerAddressRequest, options?: AxiosRequestConfig) {
        return CustomerAddressApiFp(this.configuration).customerAddressCreate(tenant, createCustomerAddressRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a CustomerAddress.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAddressApi
     */
    public customerAddressDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return CustomerAddressApiFp(this.configuration).customerAddressDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get CustomerAddress details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAddressApi
     */
    public customerAddressGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return CustomerAddressApiFp(this.configuration).customerAddressGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search CustomerAddress using available filters.
     * @param {string} tenant Description
     * @param {SearchCustomerAddressesRequest} searchCustomerAddressesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAddressApi
     */
    public customerAddressSearch(tenant: string, searchCustomerAddressesRequest: SearchCustomerAddressesRequest, options?: AxiosRequestConfig) {
        return CustomerAddressApiFp(this.configuration).customerAddressSearch(tenant, searchCustomerAddressesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a CustomerAddress.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateCustomerAddressRequest} updateCustomerAddressRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAddressApi
     */
    public customerAddressUpdate(id: string, tenant: string, updateCustomerAddressRequest: UpdateCustomerAddressRequest, options?: AxiosRequestConfig) {
        return CustomerAddressApiFp(this.configuration).customerAddressUpdate(id, tenant, updateCustomerAddressRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
