/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTourInforRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfTourInforDto } from '../models';
// @ts-ignore
import { SearchTourInforsRequest } from '../models';
// @ts-ignore
import { TourInforDto } from '../models';
// @ts-ignore
import { UpdateTourInforRequest } from '../models';
/**
 * TourInforApi - axios parameter creator
 * @export
 */
export const TourInforApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new TourInfor.
         * @param {string} tenant Description
         * @param {CreateTourInforRequest} createTourInforRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourInforCreate: async (tenant: string, createTourInforRequest: CreateTourInforRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourInforCreate', 'tenant', tenant)
            // verify required parameter 'createTourInforRequest' is not null or undefined
            assertParamExists('tourInforCreate', 'createTourInforRequest', createTourInforRequest)
            const localVarPath = `/api/v1/tourinfor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTourInforRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a TourInfor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourInforDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourInforDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourInforDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/tourinfor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TourInfor details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourInforGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourInforGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourInforGet', 'tenant', tenant)
            const localVarPath = `/api/v1/tourinfor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search TourInfor using available filters.
         * @param {string} tenant Description
         * @param {SearchTourInforsRequest} searchTourInforsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourInforSearch: async (tenant: string, searchTourInforsRequest: SearchTourInforsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourInforSearch', 'tenant', tenant)
            // verify required parameter 'searchTourInforsRequest' is not null or undefined
            assertParamExists('tourInforSearch', 'searchTourInforsRequest', searchTourInforsRequest)
            const localVarPath = `/api/v1/tourinfor/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchTourInforsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a TourInfor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourInforRequest} updateTourInforRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourInforUpdate: async (id: string, tenant: string, updateTourInforRequest: UpdateTourInforRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tourInforUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('tourInforUpdate', 'tenant', tenant)
            // verify required parameter 'updateTourInforRequest' is not null or undefined
            assertParamExists('tourInforUpdate', 'updateTourInforRequest', updateTourInforRequest)
            const localVarPath = `/api/v1/tourinfor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTourInforRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourInforApi - functional programming interface
 * @export
 */
export const TourInforApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourInforApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new TourInfor.
         * @param {string} tenant Description
         * @param {CreateTourInforRequest} createTourInforRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourInforCreate(tenant: string, createTourInforRequest: CreateTourInforRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourInforCreate(tenant, createTourInforRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a TourInfor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourInforDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourInforDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TourInfor details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourInforGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TourInforDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourInforGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search TourInfor using available filters.
         * @param {string} tenant Description
         * @param {SearchTourInforsRequest} searchTourInforsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourInforSearch(tenant: string, searchTourInforsRequest: SearchTourInforsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfTourInforDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourInforSearch(tenant, searchTourInforsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a TourInfor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourInforRequest} updateTourInforRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tourInforUpdate(id: string, tenant: string, updateTourInforRequest: UpdateTourInforRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tourInforUpdate(id, tenant, updateTourInforRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourInforApi - factory interface
 * @export
 */
export const TourInforApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourInforApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new TourInfor.
         * @param {string} tenant Description
         * @param {CreateTourInforRequest} createTourInforRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourInforCreate(tenant: string, createTourInforRequest: CreateTourInforRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourInforCreate(tenant, createTourInforRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a TourInfor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourInforDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.tourInforDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TourInfor details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourInforGet(id: string, tenant: string, options?: any): AxiosPromise<TourInforDto> {
            return localVarFp.tourInforGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search TourInfor using available filters.
         * @param {string} tenant Description
         * @param {SearchTourInforsRequest} searchTourInforsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourInforSearch(tenant: string, searchTourInforsRequest: SearchTourInforsRequest, options?: any): AxiosPromise<PaginationResponseOfTourInforDto> {
            return localVarFp.tourInforSearch(tenant, searchTourInforsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a TourInfor.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateTourInforRequest} updateTourInforRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tourInforUpdate(id: string, tenant: string, updateTourInforRequest: UpdateTourInforRequest, options?: any): AxiosPromise<string> {
            return localVarFp.tourInforUpdate(id, tenant, updateTourInforRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TourInforApi - object-oriented interface
 * @export
 * @class TourInforApi
 * @extends {BaseAPI}
 */
export class TourInforApi extends BaseAPI {
    /**
     * 
     * @summary Create a new TourInfor.
     * @param {string} tenant Description
     * @param {CreateTourInforRequest} createTourInforRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourInforApi
     */
    public tourInforCreate(tenant: string, createTourInforRequest: CreateTourInforRequest, options?: AxiosRequestConfig) {
        return TourInforApiFp(this.configuration).tourInforCreate(tenant, createTourInforRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a TourInfor.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourInforApi
     */
    public tourInforDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourInforApiFp(this.configuration).tourInforDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TourInfor details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourInforApi
     */
    public tourInforGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return TourInforApiFp(this.configuration).tourInforGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search TourInfor using available filters.
     * @param {string} tenant Description
     * @param {SearchTourInforsRequest} searchTourInforsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourInforApi
     */
    public tourInforSearch(tenant: string, searchTourInforsRequest: SearchTourInforsRequest, options?: AxiosRequestConfig) {
        return TourInforApiFp(this.configuration).tourInforSearch(tenant, searchTourInforsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a TourInfor.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateTourInforRequest} updateTourInforRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourInforApi
     */
    public tourInforUpdate(id: string, tenant: string, updateTourInforRequest: UpdateTourInforRequest, options?: AxiosRequestConfig) {
        return TourInforApiFp(this.configuration).tourInforUpdate(id, tenant, updateTourInforRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
