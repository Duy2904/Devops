/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommissionTypeDto } from '../models';
// @ts-ignore
import { CreateCommissionTypeRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { UpdateCommissionTypeRequest } from '../models';
/**
 * CommissionTypeApi - axios parameter creator
 * @export
 */
export const CommissionTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new CommissionType.
         * @param {string} tenant Description
         * @param {CreateCommissionTypeRequest} createCommissionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionTypeCreate: async (tenant: string, createCommissionTypeRequest: CreateCommissionTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionTypeCreate', 'tenant', tenant)
            // verify required parameter 'createCommissionTypeRequest' is not null or undefined
            assertParamExists('commissionTypeCreate', 'createCommissionTypeRequest', createCommissionTypeRequest)
            const localVarPath = `/api/v1/commissiontype`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommissionTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get CommissionType Agent.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionTypeGetAgentTypes: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionTypeGetAgentTypes', 'tenant', tenant)
            const localVarPath = `/api/v1/commissiontype/agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get CommissionType Referrer.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionTypeGetReferrerTypes: async (tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionTypeGetReferrerTypes', 'tenant', tenant)
            const localVarPath = `/api/v1/commissiontype/referrer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a CommissionType.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCommissionTypeRequest} updateCommissionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionTypeUpdate: async (id: string, tenant: string, updateCommissionTypeRequest: UpdateCommissionTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commissionTypeUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('commissionTypeUpdate', 'tenant', tenant)
            // verify required parameter 'updateCommissionTypeRequest' is not null or undefined
            assertParamExists('commissionTypeUpdate', 'updateCommissionTypeRequest', updateCommissionTypeRequest)
            const localVarPath = `/api/v1/commissiontype/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCommissionTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommissionTypeApi - functional programming interface
 * @export
 */
export const CommissionTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommissionTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new CommissionType.
         * @param {string} tenant Description
         * @param {CreateCommissionTypeRequest} createCommissionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionTypeCreate(tenant: string, createCommissionTypeRequest: CreateCommissionTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionTypeCreate(tenant, createCommissionTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get CommissionType Agent.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionTypeGetAgentTypes(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommissionTypeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionTypeGetAgentTypes(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get CommissionType Referrer.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionTypeGetReferrerTypes(tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommissionTypeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionTypeGetReferrerTypes(tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a CommissionType.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCommissionTypeRequest} updateCommissionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commissionTypeUpdate(id: string, tenant: string, updateCommissionTypeRequest: UpdateCommissionTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commissionTypeUpdate(id, tenant, updateCommissionTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommissionTypeApi - factory interface
 * @export
 */
export const CommissionTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommissionTypeApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new CommissionType.
         * @param {string} tenant Description
         * @param {CreateCommissionTypeRequest} createCommissionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionTypeCreate(tenant: string, createCommissionTypeRequest: CreateCommissionTypeRequest, options?: any): AxiosPromise<string> {
            return localVarFp.commissionTypeCreate(tenant, createCommissionTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get CommissionType Agent.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionTypeGetAgentTypes(tenant: string, options?: any): AxiosPromise<Array<CommissionTypeDto>> {
            return localVarFp.commissionTypeGetAgentTypes(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get CommissionType Referrer.
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionTypeGetReferrerTypes(tenant: string, options?: any): AxiosPromise<Array<CommissionTypeDto>> {
            return localVarFp.commissionTypeGetReferrerTypes(tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a CommissionType.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateCommissionTypeRequest} updateCommissionTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commissionTypeUpdate(id: string, tenant: string, updateCommissionTypeRequest: UpdateCommissionTypeRequest, options?: any): AxiosPromise<string> {
            return localVarFp.commissionTypeUpdate(id, tenant, updateCommissionTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommissionTypeApi - object-oriented interface
 * @export
 * @class CommissionTypeApi
 * @extends {BaseAPI}
 */
export class CommissionTypeApi extends BaseAPI {
    /**
     * 
     * @summary Create a new CommissionType.
     * @param {string} tenant Description
     * @param {CreateCommissionTypeRequest} createCommissionTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionTypeApi
     */
    public commissionTypeCreate(tenant: string, createCommissionTypeRequest: CreateCommissionTypeRequest, options?: AxiosRequestConfig) {
        return CommissionTypeApiFp(this.configuration).commissionTypeCreate(tenant, createCommissionTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get CommissionType Agent.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionTypeApi
     */
    public commissionTypeGetAgentTypes(tenant: string, options?: AxiosRequestConfig) {
        return CommissionTypeApiFp(this.configuration).commissionTypeGetAgentTypes(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get CommissionType Referrer.
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionTypeApi
     */
    public commissionTypeGetReferrerTypes(tenant: string, options?: AxiosRequestConfig) {
        return CommissionTypeApiFp(this.configuration).commissionTypeGetReferrerTypes(tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a CommissionType.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateCommissionTypeRequest} updateCommissionTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommissionTypeApi
     */
    public commissionTypeUpdate(id: string, tenant: string, updateCommissionTypeRequest: UpdateCommissionTypeRequest, options?: AxiosRequestConfig) {
        return CommissionTypeApiFp(this.configuration).commissionTypeUpdate(id, tenant, updateCommissionTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
