/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePayableVoucherRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfPayableVoucherDto } from '../models';
// @ts-ignore
import { PayableVoucherDto } from '../models';
// @ts-ignore
import { SearchPayableVouchersRequest } from '../models';
// @ts-ignore
import { UpdatePayableVoucherRequest } from '../models';
/**
 * PayableVoucherApi - axios parameter creator
 * @export
 */
export const PayableVoucherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new PayableVoucher.
         * @param {string} tenant Description
         * @param {CreatePayableVoucherRequest} createPayableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payableVoucherCreate: async (tenant: string, createPayableVoucherRequest: CreatePayableVoucherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('payableVoucherCreate', 'tenant', tenant)
            // verify required parameter 'createPayableVoucherRequest' is not null or undefined
            assertParamExists('payableVoucherCreate', 'createPayableVoucherRequest', createPayableVoucherRequest)
            const localVarPath = `/api/v1/payablevoucher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPayableVoucherRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a PayableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payableVoucherDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payableVoucherDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('payableVoucherDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/payablevoucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get PayableVoucher details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payableVoucherGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payableVoucherGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('payableVoucherGet', 'tenant', tenant)
            const localVarPath = `/api/v1/payablevoucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search PayableVoucher using available filters.
         * @param {string} tenant Description
         * @param {SearchPayableVouchersRequest} searchPayableVouchersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payableVoucherSearch: async (tenant: string, searchPayableVouchersRequest: SearchPayableVouchersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('payableVoucherSearch', 'tenant', tenant)
            // verify required parameter 'searchPayableVouchersRequest' is not null or undefined
            assertParamExists('payableVoucherSearch', 'searchPayableVouchersRequest', searchPayableVouchersRequest)
            const localVarPath = `/api/v1/payablevoucher/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchPayableVouchersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a PayableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdatePayableVoucherRequest} updatePayableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payableVoucherUpdate: async (id: string, tenant: string, updatePayableVoucherRequest: UpdatePayableVoucherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payableVoucherUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('payableVoucherUpdate', 'tenant', tenant)
            // verify required parameter 'updatePayableVoucherRequest' is not null or undefined
            assertParamExists('payableVoucherUpdate', 'updatePayableVoucherRequest', updatePayableVoucherRequest)
            const localVarPath = `/api/v1/payablevoucher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePayableVoucherRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayableVoucherApi - functional programming interface
 * @export
 */
export const PayableVoucherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayableVoucherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new PayableVoucher.
         * @param {string} tenant Description
         * @param {CreatePayableVoucherRequest} createPayableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payableVoucherCreate(tenant: string, createPayableVoucherRequest: CreatePayableVoucherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payableVoucherCreate(tenant, createPayableVoucherRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a PayableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payableVoucherDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payableVoucherDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get PayableVoucher details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payableVoucherGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayableVoucherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payableVoucherGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search PayableVoucher using available filters.
         * @param {string} tenant Description
         * @param {SearchPayableVouchersRequest} searchPayableVouchersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payableVoucherSearch(tenant: string, searchPayableVouchersRequest: SearchPayableVouchersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfPayableVoucherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payableVoucherSearch(tenant, searchPayableVouchersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a PayableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdatePayableVoucherRequest} updatePayableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payableVoucherUpdate(id: string, tenant: string, updatePayableVoucherRequest: UpdatePayableVoucherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payableVoucherUpdate(id, tenant, updatePayableVoucherRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayableVoucherApi - factory interface
 * @export
 */
export const PayableVoucherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayableVoucherApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new PayableVoucher.
         * @param {string} tenant Description
         * @param {CreatePayableVoucherRequest} createPayableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payableVoucherCreate(tenant: string, createPayableVoucherRequest: CreatePayableVoucherRequest, options?: any): AxiosPromise<string> {
            return localVarFp.payableVoucherCreate(tenant, createPayableVoucherRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a PayableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payableVoucherDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.payableVoucherDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get PayableVoucher details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payableVoucherGet(id: string, tenant: string, options?: any): AxiosPromise<PayableVoucherDto> {
            return localVarFp.payableVoucherGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search PayableVoucher using available filters.
         * @param {string} tenant Description
         * @param {SearchPayableVouchersRequest} searchPayableVouchersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payableVoucherSearch(tenant: string, searchPayableVouchersRequest: SearchPayableVouchersRequest, options?: any): AxiosPromise<PaginationResponseOfPayableVoucherDto> {
            return localVarFp.payableVoucherSearch(tenant, searchPayableVouchersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a PayableVoucher.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdatePayableVoucherRequest} updatePayableVoucherRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payableVoucherUpdate(id: string, tenant: string, updatePayableVoucherRequest: UpdatePayableVoucherRequest, options?: any): AxiosPromise<string> {
            return localVarFp.payableVoucherUpdate(id, tenant, updatePayableVoucherRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PayableVoucherApi - object-oriented interface
 * @export
 * @class PayableVoucherApi
 * @extends {BaseAPI}
 */
export class PayableVoucherApi extends BaseAPI {
    /**
     * 
     * @summary Create a new PayableVoucher.
     * @param {string} tenant Description
     * @param {CreatePayableVoucherRequest} createPayableVoucherRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayableVoucherApi
     */
    public payableVoucherCreate(tenant: string, createPayableVoucherRequest: CreatePayableVoucherRequest, options?: AxiosRequestConfig) {
        return PayableVoucherApiFp(this.configuration).payableVoucherCreate(tenant, createPayableVoucherRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a PayableVoucher.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayableVoucherApi
     */
    public payableVoucherDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return PayableVoucherApiFp(this.configuration).payableVoucherDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get PayableVoucher details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayableVoucherApi
     */
    public payableVoucherGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return PayableVoucherApiFp(this.configuration).payableVoucherGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search PayableVoucher using available filters.
     * @param {string} tenant Description
     * @param {SearchPayableVouchersRequest} searchPayableVouchersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayableVoucherApi
     */
    public payableVoucherSearch(tenant: string, searchPayableVouchersRequest: SearchPayableVouchersRequest, options?: AxiosRequestConfig) {
        return PayableVoucherApiFp(this.configuration).payableVoucherSearch(tenant, searchPayableVouchersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a PayableVoucher.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdatePayableVoucherRequest} updatePayableVoucherRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayableVoucherApi
     */
    public payableVoucherUpdate(id: string, tenant: string, updatePayableVoucherRequest: UpdatePayableVoucherRequest, options?: AxiosRequestConfig) {
        return PayableVoucherApiFp(this.configuration).payableVoucherUpdate(id, tenant, updatePayableVoucherRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
