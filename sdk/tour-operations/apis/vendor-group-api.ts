/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateVendorGroupRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfVendorGroupDto } from '../models';
// @ts-ignore
import { SearchVendorGroupsRequest } from '../models';
// @ts-ignore
import { UpdateVendorGroupRequest } from '../models';
// @ts-ignore
import { VendorGroupDto } from '../models';
/**
 * VendorGroupApi - axios parameter creator
 * @export
 */
export const VendorGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new vendorgroup.
         * @param {string} tenant Description
         * @param {CreateVendorGroupRequest} createVendorGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGroupCreate: async (tenant: string, createVendorGroupRequest: CreateVendorGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorGroupCreate', 'tenant', tenant)
            // verify required parameter 'createVendorGroupRequest' is not null or undefined
            assertParamExists('vendorGroupCreate', 'createVendorGroupRequest', createVendorGroupRequest)
            const localVarPath = `/api/v1/vendorgroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVendorGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a vendorgroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGroupDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorGroupDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorGroupDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/vendorgroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get vendorgroup details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGroupGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorGroupGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorGroupGet', 'tenant', tenant)
            const localVarPath = `/api/v1/vendorgroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search vendorgroup using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorGroupsRequest} searchVendorGroupsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGroupSearch: async (tenant: string, searchVendorGroupsRequest: SearchVendorGroupsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorGroupSearch', 'tenant', tenant)
            // verify required parameter 'searchVendorGroupsRequest' is not null or undefined
            assertParamExists('vendorGroupSearch', 'searchVendorGroupsRequest', searchVendorGroupsRequest)
            const localVarPath = `/api/v1/vendorgroup/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchVendorGroupsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a vendorgroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorGroupRequest} updateVendorGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGroupUpdate: async (id: string, tenant: string, updateVendorGroupRequest: UpdateVendorGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorGroupUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('vendorGroupUpdate', 'tenant', tenant)
            // verify required parameter 'updateVendorGroupRequest' is not null or undefined
            assertParamExists('vendorGroupUpdate', 'updateVendorGroupRequest', updateVendorGroupRequest)
            const localVarPath = `/api/v1/vendorgroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVendorGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorGroupApi - functional programming interface
 * @export
 */
export const VendorGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new vendorgroup.
         * @param {string} tenant Description
         * @param {CreateVendorGroupRequest} createVendorGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorGroupCreate(tenant: string, createVendorGroupRequest: CreateVendorGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorGroupCreate(tenant, createVendorGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a vendorgroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorGroupDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorGroupDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get vendorgroup details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorGroupGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorGroupGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search vendorgroup using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorGroupsRequest} searchVendorGroupsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorGroupSearch(tenant: string, searchVendorGroupsRequest: SearchVendorGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfVendorGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorGroupSearch(tenant, searchVendorGroupsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a vendorgroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorGroupRequest} updateVendorGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorGroupUpdate(id: string, tenant: string, updateVendorGroupRequest: UpdateVendorGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorGroupUpdate(id, tenant, updateVendorGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorGroupApi - factory interface
 * @export
 */
export const VendorGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorGroupApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new vendorgroup.
         * @param {string} tenant Description
         * @param {CreateVendorGroupRequest} createVendorGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGroupCreate(tenant: string, createVendorGroupRequest: CreateVendorGroupRequest, options?: any): AxiosPromise<string> {
            return localVarFp.vendorGroupCreate(tenant, createVendorGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a vendorgroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGroupDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.vendorGroupDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get vendorgroup details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGroupGet(id: string, tenant: string, options?: any): AxiosPromise<VendorGroupDto> {
            return localVarFp.vendorGroupGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search vendorgroup using available filters.
         * @param {string} tenant Description
         * @param {SearchVendorGroupsRequest} searchVendorGroupsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGroupSearch(tenant: string, searchVendorGroupsRequest: SearchVendorGroupsRequest, options?: any): AxiosPromise<PaginationResponseOfVendorGroupDto> {
            return localVarFp.vendorGroupSearch(tenant, searchVendorGroupsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a vendorgroup.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateVendorGroupRequest} updateVendorGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorGroupUpdate(id: string, tenant: string, updateVendorGroupRequest: UpdateVendorGroupRequest, options?: any): AxiosPromise<string> {
            return localVarFp.vendorGroupUpdate(id, tenant, updateVendorGroupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VendorGroupApi - object-oriented interface
 * @export
 * @class VendorGroupApi
 * @extends {BaseAPI}
 */
export class VendorGroupApi extends BaseAPI {
    /**
     * 
     * @summary Create a new vendorgroup.
     * @param {string} tenant Description
     * @param {CreateVendorGroupRequest} createVendorGroupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorGroupApi
     */
    public vendorGroupCreate(tenant: string, createVendorGroupRequest: CreateVendorGroupRequest, options?: AxiosRequestConfig) {
        return VendorGroupApiFp(this.configuration).vendorGroupCreate(tenant, createVendorGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a vendorgroup.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorGroupApi
     */
    public vendorGroupDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VendorGroupApiFp(this.configuration).vendorGroupDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get vendorgroup details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorGroupApi
     */
    public vendorGroupGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return VendorGroupApiFp(this.configuration).vendorGroupGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search vendorgroup using available filters.
     * @param {string} tenant Description
     * @param {SearchVendorGroupsRequest} searchVendorGroupsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorGroupApi
     */
    public vendorGroupSearch(tenant: string, searchVendorGroupsRequest: SearchVendorGroupsRequest, options?: AxiosRequestConfig) {
        return VendorGroupApiFp(this.configuration).vendorGroupSearch(tenant, searchVendorGroupsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a vendorgroup.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateVendorGroupRequest} updateVendorGroupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorGroupApi
     */
    public vendorGroupUpdate(id: string, tenant: string, updateVendorGroupRequest: UpdateVendorGroupRequest, options?: AxiosRequestConfig) {
        return VendorGroupApiFp(this.configuration).vendorGroupUpdate(id, tenant, updateVendorGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
