/* tslint:disable */
/* eslint-disable */
/**
 * WebAPI - Tour Operation
 * Clean Architecture Tour Operation for .NET 7 WebApi built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateUnitOfMeasureRequest } from '../models';
// @ts-ignore
import { ErrorResult } from '../models';
// @ts-ignore
import { HttpValidationProblemDetails } from '../models';
// @ts-ignore
import { PaginationResponseOfUnitOfMeasureDto } from '../models';
// @ts-ignore
import { SearchUnitOfMeasuresRequest } from '../models';
// @ts-ignore
import { UnitOfMeasureDto } from '../models';
// @ts-ignore
import { UpdateUnitOfMeasureRequest } from '../models';
/**
 * UnitOfMeasureApi - axios parameter creator
 * @export
 */
export const UnitOfMeasureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new UnitOfMeasure.
         * @param {string} tenant Description
         * @param {CreateUnitOfMeasureRequest} createUnitOfMeasureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitOfMeasureCreate: async (tenant: string, createUnitOfMeasureRequest: CreateUnitOfMeasureRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('unitOfMeasureCreate', 'tenant', tenant)
            // verify required parameter 'createUnitOfMeasureRequest' is not null or undefined
            assertParamExists('unitOfMeasureCreate', 'createUnitOfMeasureRequest', createUnitOfMeasureRequest)
            const localVarPath = `/api/v1/unitofmeasure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUnitOfMeasureRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a UnitOfMeasure.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitOfMeasureDelete: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unitOfMeasureDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('unitOfMeasureDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/unitofmeasure/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get UnitOfMeasure details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitOfMeasureGet: async (id: string, tenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unitOfMeasureGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('unitOfMeasureGet', 'tenant', tenant)
            const localVarPath = `/api/v1/unitofmeasure/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search UnitOfMeasure using available filters.
         * @param {string} tenant Description
         * @param {SearchUnitOfMeasuresRequest} searchUnitOfMeasuresRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitOfMeasureSearch: async (tenant: string, searchUnitOfMeasuresRequest: SearchUnitOfMeasuresRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('unitOfMeasureSearch', 'tenant', tenant)
            // verify required parameter 'searchUnitOfMeasuresRequest' is not null or undefined
            assertParamExists('unitOfMeasureSearch', 'searchUnitOfMeasuresRequest', searchUnitOfMeasuresRequest)
            const localVarPath = `/api/v1/unitofmeasure/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchUnitOfMeasuresRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a UnitOfMeasure.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateUnitOfMeasureRequest} updateUnitOfMeasureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitOfMeasureUpdate: async (id: string, tenant: string, updateUnitOfMeasureRequest: UpdateUnitOfMeasureRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unitOfMeasureUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('unitOfMeasureUpdate', 'tenant', tenant)
            // verify required parameter 'updateUnitOfMeasureRequest' is not null or undefined
            assertParamExists('unitOfMeasureUpdate', 'updateUnitOfMeasureRequest', updateUnitOfMeasureRequest)
            const localVarPath = `/api/v1/unitofmeasure/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Bearer", [], configuration)

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUnitOfMeasureRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnitOfMeasureApi - functional programming interface
 * @export
 */
export const UnitOfMeasureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnitOfMeasureApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new UnitOfMeasure.
         * @param {string} tenant Description
         * @param {CreateUnitOfMeasureRequest} createUnitOfMeasureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unitOfMeasureCreate(tenant: string, createUnitOfMeasureRequest: CreateUnitOfMeasureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unitOfMeasureCreate(tenant, createUnitOfMeasureRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a UnitOfMeasure.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unitOfMeasureDelete(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unitOfMeasureDelete(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get UnitOfMeasure details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unitOfMeasureGet(id: string, tenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnitOfMeasureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unitOfMeasureGet(id, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search UnitOfMeasure using available filters.
         * @param {string} tenant Description
         * @param {SearchUnitOfMeasuresRequest} searchUnitOfMeasuresRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unitOfMeasureSearch(tenant: string, searchUnitOfMeasuresRequest: SearchUnitOfMeasuresRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfUnitOfMeasureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unitOfMeasureSearch(tenant, searchUnitOfMeasuresRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a UnitOfMeasure.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateUnitOfMeasureRequest} updateUnitOfMeasureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unitOfMeasureUpdate(id: string, tenant: string, updateUnitOfMeasureRequest: UpdateUnitOfMeasureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unitOfMeasureUpdate(id, tenant, updateUnitOfMeasureRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UnitOfMeasureApi - factory interface
 * @export
 */
export const UnitOfMeasureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnitOfMeasureApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new UnitOfMeasure.
         * @param {string} tenant Description
         * @param {CreateUnitOfMeasureRequest} createUnitOfMeasureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitOfMeasureCreate(tenant: string, createUnitOfMeasureRequest: CreateUnitOfMeasureRequest, options?: any): AxiosPromise<string> {
            return localVarFp.unitOfMeasureCreate(tenant, createUnitOfMeasureRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a UnitOfMeasure.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitOfMeasureDelete(id: string, tenant: string, options?: any): AxiosPromise<string> {
            return localVarFp.unitOfMeasureDelete(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get UnitOfMeasure details.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitOfMeasureGet(id: string, tenant: string, options?: any): AxiosPromise<UnitOfMeasureDto> {
            return localVarFp.unitOfMeasureGet(id, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search UnitOfMeasure using available filters.
         * @param {string} tenant Description
         * @param {SearchUnitOfMeasuresRequest} searchUnitOfMeasuresRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitOfMeasureSearch(tenant: string, searchUnitOfMeasuresRequest: SearchUnitOfMeasuresRequest, options?: any): AxiosPromise<PaginationResponseOfUnitOfMeasureDto> {
            return localVarFp.unitOfMeasureSearch(tenant, searchUnitOfMeasuresRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a UnitOfMeasure.
         * @param {string} id 
         * @param {string} tenant Description
         * @param {UpdateUnitOfMeasureRequest} updateUnitOfMeasureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitOfMeasureUpdate(id: string, tenant: string, updateUnitOfMeasureRequest: UpdateUnitOfMeasureRequest, options?: any): AxiosPromise<string> {
            return localVarFp.unitOfMeasureUpdate(id, tenant, updateUnitOfMeasureRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UnitOfMeasureApi - object-oriented interface
 * @export
 * @class UnitOfMeasureApi
 * @extends {BaseAPI}
 */
export class UnitOfMeasureApi extends BaseAPI {
    /**
     * 
     * @summary Create a new UnitOfMeasure.
     * @param {string} tenant Description
     * @param {CreateUnitOfMeasureRequest} createUnitOfMeasureRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitOfMeasureApi
     */
    public unitOfMeasureCreate(tenant: string, createUnitOfMeasureRequest: CreateUnitOfMeasureRequest, options?: AxiosRequestConfig) {
        return UnitOfMeasureApiFp(this.configuration).unitOfMeasureCreate(tenant, createUnitOfMeasureRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a UnitOfMeasure.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitOfMeasureApi
     */
    public unitOfMeasureDelete(id: string, tenant: string, options?: AxiosRequestConfig) {
        return UnitOfMeasureApiFp(this.configuration).unitOfMeasureDelete(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get UnitOfMeasure details.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitOfMeasureApi
     */
    public unitOfMeasureGet(id: string, tenant: string, options?: AxiosRequestConfig) {
        return UnitOfMeasureApiFp(this.configuration).unitOfMeasureGet(id, tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search UnitOfMeasure using available filters.
     * @param {string} tenant Description
     * @param {SearchUnitOfMeasuresRequest} searchUnitOfMeasuresRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitOfMeasureApi
     */
    public unitOfMeasureSearch(tenant: string, searchUnitOfMeasuresRequest: SearchUnitOfMeasuresRequest, options?: AxiosRequestConfig) {
        return UnitOfMeasureApiFp(this.configuration).unitOfMeasureSearch(tenant, searchUnitOfMeasuresRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a UnitOfMeasure.
     * @param {string} id 
     * @param {string} tenant Description
     * @param {UpdateUnitOfMeasureRequest} updateUnitOfMeasureRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitOfMeasureApi
     */
    public unitOfMeasureUpdate(id: string, tenant: string, updateUnitOfMeasureRequest: UpdateUnitOfMeasureRequest, options?: AxiosRequestConfig) {
        return UnitOfMeasureApiFp(this.configuration).unitOfMeasureUpdate(id, tenant, updateUnitOfMeasureRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
