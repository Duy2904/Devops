/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA Identity Next
 * TripOTA Identity Next built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChangePasswordRequest } from '../models';
// @ts-ignore
import { SignUpSignInRequest } from '../models';
// @ts-ignore
import { UpdateProfileRequest } from '../models';
// @ts-ignore
import { UserClaimsDto } from '../models';
// @ts-ignore
import { UserDetailsDto } from '../models';
/**
 * PersonalApi - axios parameter creator
 * @export
 */
export const PersonalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change password of currently logged in user.
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalChangePassword: async (changePasswordRequest: ChangePasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordRequest' is not null or undefined
            assertParamExists('personalChangePassword', 'changePasswordRequest', changePasswordRequest)
            const localVarPath = `/api/v1/Personal/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SignUpSignInRequest} signUpSignInRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalEnrichUserAccessToken: async (tenant: string, signUpSignInRequest: SignUpSignInRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('personalEnrichUserAccessToken', 'tenant', tenant)
            // verify required parameter 'signUpSignInRequest' is not null or undefined
            assertParamExists('personalEnrichUserAccessToken', 'signUpSignInRequest', signUpSignInRequest)
            const localVarPath = `/api/v1/Personal/b2c/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpSignInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get permissions of currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalGetPermissions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Personal/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get profile details of currently logged in user.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {number} [app] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalGetProfile: async (tenant: string, app?: number, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('personalGetProfile', 'tenant', tenant)
            const localVarPath = `/api/v1/Personal/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign out currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalSignOut: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Personal/sign-out`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update profile details of currently logged in user.
         * @param {UpdateProfileRequest} updateProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalUpdateProfile: async (updateProfileRequest: UpdateProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProfileRequest' is not null or undefined
            assertParamExists('personalUpdateProfile', 'updateProfileRequest', updateProfileRequest)
            const localVarPath = `/api/v1/Personal/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonalApi - functional programming interface
 * @export
 */
export const PersonalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change password of currently logged in user.
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personalChangePassword(changePasswordRequest: ChangePasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personalChangePassword(changePasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SignUpSignInRequest} signUpSignInRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personalEnrichUserAccessToken(tenant: string, signUpSignInRequest: SignUpSignInRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserClaimsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personalEnrichUserAccessToken(tenant, signUpSignInRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get permissions of currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personalGetPermissions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personalGetPermissions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get profile details of currently logged in user.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {number} [app] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personalGetProfile(tenant: string, app?: number, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personalGetProfile(tenant, app, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign out currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personalSignOut(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personalSignOut(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update profile details of currently logged in user.
         * @param {UpdateProfileRequest} updateProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personalUpdateProfile(updateProfileRequest: UpdateProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personalUpdateProfile(updateProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PersonalApi - factory interface
 * @export
 */
export const PersonalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonalApiFp(configuration)
    return {
        /**
         * 
         * @summary Change password of currently logged in user.
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalChangePassword(changePasswordRequest: ChangePasswordRequest, options?: any): AxiosPromise<UserDetailsDto> {
            return localVarFp.personalChangePassword(changePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SignUpSignInRequest} signUpSignInRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalEnrichUserAccessToken(tenant: string, signUpSignInRequest: SignUpSignInRequest, xApiRm?: string, options?: any): AxiosPromise<UserClaimsDto> {
            return localVarFp.personalEnrichUserAccessToken(tenant, signUpSignInRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get permissions of currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalGetPermissions(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.personalGetPermissions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get profile details of currently logged in user.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {number} [app] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalGetProfile(tenant: string, app?: number, xApiRm?: string, options?: any): AxiosPromise<UserDetailsDto> {
            return localVarFp.personalGetProfile(tenant, app, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign out currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalSignOut(options?: any): AxiosPromise<UserDetailsDto> {
            return localVarFp.personalSignOut(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update profile details of currently logged in user.
         * @param {UpdateProfileRequest} updateProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalUpdateProfile(updateProfileRequest: UpdateProfileRequest, options?: any): AxiosPromise<UserDetailsDto> {
            return localVarFp.personalUpdateProfile(updateProfileRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonalApi - object-oriented interface
 * @export
 * @class PersonalApi
 * @extends {BaseAPI}
 */
export class PersonalApi extends BaseAPI {
    /**
     * 
     * @summary Change password of currently logged in user.
     * @param {ChangePasswordRequest} changePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalApi
     */
    public personalChangePassword(changePasswordRequest: ChangePasswordRequest, options?: AxiosRequestConfig) {
        return PersonalApiFp(this.configuration).personalChangePassword(changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SignUpSignInRequest} signUpSignInRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalApi
     */
    public personalEnrichUserAccessToken(tenant: string, signUpSignInRequest: SignUpSignInRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return PersonalApiFp(this.configuration).personalEnrichUserAccessToken(tenant, signUpSignInRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get permissions of currently logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalApi
     */
    public personalGetPermissions(options?: AxiosRequestConfig) {
        return PersonalApiFp(this.configuration).personalGetPermissions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get profile details of currently logged in user.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {number} [app] 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalApi
     */
    public personalGetProfile(tenant: string, app?: number, xApiRm?: string, options?: AxiosRequestConfig) {
        return PersonalApiFp(this.configuration).personalGetProfile(tenant, app, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign out currently logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalApi
     */
    public personalSignOut(options?: AxiosRequestConfig) {
        return PersonalApiFp(this.configuration).personalSignOut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update profile details of currently logged in user.
     * @param {UpdateProfileRequest} updateProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalApi
     */
    public personalUpdateProfile(updateProfileRequest: UpdateProfileRequest, options?: AxiosRequestConfig) {
        return PersonalApiFp(this.configuration).personalUpdateProfile(updateProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
