/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA Identity Next
 * TripOTA Identity Next built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateRoleRequest } from '../models';
// @ts-ignore
import { GroupRoleDto } from '../models';
// @ts-ignore
import { JsonDocument } from '../models';
// @ts-ignore
import { PaginationResponseOfGroupRoleDto } from '../models';
// @ts-ignore
import { PaginationResponseOfRoleDto } from '../models';
// @ts-ignore
import { RemoveRolePermissionsRequest } from '../models';
// @ts-ignore
import { RoleDto } from '../models';
// @ts-ignore
import { RolePermissionsDto } from '../models';
// @ts-ignore
import { SearchRolesRequest } from '../models';
// @ts-ignore
import { TourSearchRolesRequest } from '../models';
// @ts-ignore
import { UpdateRolePermissionsRequest } from '../models';
// @ts-ignore
import { UpdateRoleRequest } from '../models';
// @ts-ignore
import { UserDetailsDto } from '../models';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesDelete: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable a role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesDisableRole: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesDisableRole', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesDisableRole', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/{id}/disable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get role details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetById: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesGetById', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesGetById', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get default tour agent role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultAgentPermissions: async (tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesGetDefaultAgentPermissions', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/agent/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get default tour accountant role permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultTourAccountantPermissions: async (tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesGetDefaultTourAccountantPermissions', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/accountant/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get default administrator role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultTourAdminPermissions: async (tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesGetDefaultTourAdminPermissions', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/admin/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get default tour employee role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultTourEmployeePermissions: async (tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesGetDefaultTourEmployeePermissions', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/employee/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get default tour manager role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultTourManagerPermissions: async (tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesGetDefaultTourManagerPermissions', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/manager/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get default tour seller role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultTourSellerPermissions: async (tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesGetDefaultTourSellerPermissions', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/seller/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get role details with usage.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetRoleDetails: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesGetRoleDetails', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesGetRoleDetails', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/{id}/details`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get role permissions.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetRolePermissions: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesGetRolePermissions', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesGetRolePermissions', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/{id}/permissions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users belong to the selected role.
         * @param {string} roleName 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetUsersByRoleName: async (roleName: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('rolesGetUsersByRoleName', 'roleName', roleName)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesGetUsersByRoleName', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/{roleName}/users`
                .replace(`{${"roleName"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a role.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateRoleRequest} createRoleRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRegisterRole: async (tenant: string, createRoleRequest: CreateRoleRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesRegisterRole', 'tenant', tenant)
            // verify required parameter 'createRoleRequest' is not null or undefined
            assertParamExists('rolesRegisterRole', 'createRoleRequest', createRoleRequest)
            const localVarPath = `/api/v1/Roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a role\'s permission.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {RemoveRolePermissionsRequest} removeRolePermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRemovePermission: async (id: string, tenant: string, removeRolePermissionsRequest: RemoveRolePermissionsRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesRemovePermission', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesRemovePermission', 'tenant', tenant)
            // verify required parameter 'removeRolePermissionsRequest' is not null or undefined
            assertParamExists('rolesRemovePermission', 'removeRolePermissionsRequest', removeRolePermissionsRequest)
            const localVarPath = `/api/v1/Roles/{id}/remove-permission`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeRolePermissionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get role histories.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleHistories: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesRoleHistories', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesRoleHistories', 'tenant', tenant)
            const localVarPath = `/api/v1/Roles/{id}/histories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of all roles.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchRolesRequest} searchRolesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesSearch: async (tenant: string, searchRolesRequest: SearchRolesRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesSearch', 'tenant', tenant)
            // verify required parameter 'searchRolesRequest' is not null or undefined
            assertParamExists('rolesSearch', 'searchRolesRequest', searchRolesRequest)
            const localVarPath = `/api/v1/Roles/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchRolesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of all roles.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {TourSearchRolesRequest} tourSearchRolesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesTourSearch: async (tenant: string, tourSearchRolesRequest: TourSearchRolesRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesTourSearch', 'tenant', tenant)
            // verify required parameter 'tourSearchRolesRequest' is not null or undefined
            assertParamExists('rolesTourSearch', 'tourSearchRolesRequest', tourSearchRolesRequest)
            const localVarPath = `/api/v1/Roles/tour/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tourSearchRolesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add permissions to the selected role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateRolePermissionsRequest} updateRolePermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesUpdatePermission: async (id: string, tenant: string, updateRolePermissionsRequest: UpdateRolePermissionsRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesUpdatePermission', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesUpdatePermission', 'tenant', tenant)
            // verify required parameter 'updateRolePermissionsRequest' is not null or undefined
            assertParamExists('rolesUpdatePermission', 'updateRolePermissionsRequest', updateRolePermissionsRequest)
            const localVarPath = `/api/v1/Roles/{id}/update-permission`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRolePermissionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateRoleRequest} updateRoleRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesUpdateRole: async (id: string, tenant: string, updateRoleRequest: UpdateRoleRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesUpdateRole', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('rolesUpdateRole', 'tenant', tenant)
            // verify required parameter 'updateRoleRequest' is not null or undefined
            assertParamExists('rolesUpdateRole', 'updateRoleRequest', updateRoleRequest)
            const localVarPath = `/api/v1/Roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesDelete(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesDelete(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Disable a role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesDisableRole(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesDisableRole(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get role details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGetById(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesGetById(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get default tour agent role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGetDefaultAgentPermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermissionsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesGetDefaultAgentPermissions(tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get default tour accountant role permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGetDefaultTourAccountantPermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermissionsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesGetDefaultTourAccountantPermissions(tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get default administrator role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGetDefaultTourAdminPermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermissionsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesGetDefaultTourAdminPermissions(tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get default tour employee role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGetDefaultTourEmployeePermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermissionsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesGetDefaultTourEmployeePermissions(tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get default tour manager role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGetDefaultTourManagerPermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermissionsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesGetDefaultTourManagerPermissions(tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get default tour seller role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGetDefaultTourSellerPermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermissionsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesGetDefaultTourSellerPermissions(tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get role details with usage.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGetRoleDetails(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupRoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesGetRoleDetails(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get role permissions.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGetRolePermissions(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermissionsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesGetRolePermissions(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get users belong to the selected role.
         * @param {string} roleName 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGetUsersByRoleName(roleName: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDetailsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesGetUsersByRoleName(roleName, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a role.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateRoleRequest} createRoleRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesRegisterRole(tenant: string, createRoleRequest: CreateRoleRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesRegisterRole(tenant, createRoleRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a role\'s permission.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {RemoveRolePermissionsRequest} removeRolePermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesRemovePermission(id: string, tenant: string, removeRolePermissionsRequest: RemoveRolePermissionsRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesRemovePermission(id, tenant, removeRolePermissionsRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get role histories.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesRoleHistories(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesRoleHistories(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of all roles.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchRolesRequest} searchRolesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesSearch(tenant: string, searchRolesRequest: SearchRolesRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfRoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesSearch(tenant, searchRolesRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of all roles.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {TourSearchRolesRequest} tourSearchRolesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesTourSearch(tenant: string, tourSearchRolesRequest: TourSearchRolesRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfGroupRoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesTourSearch(tenant, tourSearchRolesRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add permissions to the selected role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateRolePermissionsRequest} updateRolePermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesUpdatePermission(id: string, tenant: string, updateRolePermissionsRequest: UpdateRolePermissionsRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesUpdatePermission(id, tenant, updateRolePermissionsRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateRoleRequest} updateRoleRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesUpdateRole(id: string, tenant: string, updateRoleRequest: UpdateRoleRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesUpdateRole(id, tenant, updateRoleRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesDelete(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<string> {
            return localVarFp.rolesDelete(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disable a role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesDisableRole(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<RoleDto> {
            return localVarFp.rolesDisableRole(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get role details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetById(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<RoleDto> {
            return localVarFp.rolesGetById(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get default tour agent role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultAgentPermissions(tenant: string, xApiRm?: string, options?: any): AxiosPromise<RolePermissionsDto> {
            return localVarFp.rolesGetDefaultAgentPermissions(tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get default tour accountant role permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultTourAccountantPermissions(tenant: string, xApiRm?: string, options?: any): AxiosPromise<RolePermissionsDto> {
            return localVarFp.rolesGetDefaultTourAccountantPermissions(tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get default administrator role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultTourAdminPermissions(tenant: string, xApiRm?: string, options?: any): AxiosPromise<RolePermissionsDto> {
            return localVarFp.rolesGetDefaultTourAdminPermissions(tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get default tour employee role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultTourEmployeePermissions(tenant: string, xApiRm?: string, options?: any): AxiosPromise<RolePermissionsDto> {
            return localVarFp.rolesGetDefaultTourEmployeePermissions(tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get default tour manager role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultTourManagerPermissions(tenant: string, xApiRm?: string, options?: any): AxiosPromise<RolePermissionsDto> {
            return localVarFp.rolesGetDefaultTourManagerPermissions(tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get default tour seller role\'s permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetDefaultTourSellerPermissions(tenant: string, xApiRm?: string, options?: any): AxiosPromise<RolePermissionsDto> {
            return localVarFp.rolesGetDefaultTourSellerPermissions(tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get role details with usage.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetRoleDetails(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<GroupRoleDto> {
            return localVarFp.rolesGetRoleDetails(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get role permissions.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetRolePermissions(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<RolePermissionsDto> {
            return localVarFp.rolesGetRolePermissions(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get users belong to the selected role.
         * @param {string} roleName 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGetUsersByRoleName(roleName: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<Array<UserDetailsDto>> {
            return localVarFp.rolesGetUsersByRoleName(roleName, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a role.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateRoleRequest} createRoleRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRegisterRole(tenant: string, createRoleRequest: CreateRoleRequest, xApiRm?: string, options?: any): AxiosPromise<RoleDto> {
            return localVarFp.rolesRegisterRole(tenant, createRoleRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a role\'s permission.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {RemoveRolePermissionsRequest} removeRolePermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRemovePermission(id: string, tenant: string, removeRolePermissionsRequest: RemoveRolePermissionsRequest, xApiRm?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.rolesRemovePermission(id, tenant, removeRolePermissionsRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get role histories.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleHistories(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<JsonDocument> {
            return localVarFp.rolesRoleHistories(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of all roles.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchRolesRequest} searchRolesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesSearch(tenant: string, searchRolesRequest: SearchRolesRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfRoleDto> {
            return localVarFp.rolesSearch(tenant, searchRolesRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of all roles.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {TourSearchRolesRequest} tourSearchRolesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesTourSearch(tenant: string, tourSearchRolesRequest: TourSearchRolesRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfGroupRoleDto> {
            return localVarFp.rolesTourSearch(tenant, tourSearchRolesRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add permissions to the selected role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateRolePermissionsRequest} updateRolePermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesUpdatePermission(id: string, tenant: string, updateRolePermissionsRequest: UpdateRolePermissionsRequest, xApiRm?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.rolesUpdatePermission(id, tenant, updateRolePermissionsRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a role.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateRoleRequest} updateRoleRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesUpdateRole(id: string, tenant: string, updateRoleRequest: UpdateRoleRequest, xApiRm?: string, options?: any): AxiosPromise<RoleDto> {
            return localVarFp.rolesUpdateRole(id, tenant, updateRoleRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * 
     * @summary Delete a role.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesDelete(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesDelete(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disable a role.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesDisableRole(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesDisableRole(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get role details.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesGetById(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesGetById(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get default tour agent role\'s permissions.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesGetDefaultAgentPermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesGetDefaultAgentPermissions(tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get default tour accountant role permissions.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesGetDefaultTourAccountantPermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesGetDefaultTourAccountantPermissions(tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get default administrator role\'s permissions.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesGetDefaultTourAdminPermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesGetDefaultTourAdminPermissions(tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get default tour employee role\'s permissions.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesGetDefaultTourEmployeePermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesGetDefaultTourEmployeePermissions(tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get default tour manager role\'s permissions.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesGetDefaultTourManagerPermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesGetDefaultTourManagerPermissions(tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get default tour seller role\'s permissions.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesGetDefaultTourSellerPermissions(tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesGetDefaultTourSellerPermissions(tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get role details with usage.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesGetRoleDetails(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesGetRoleDetails(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get role permissions.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesGetRolePermissions(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesGetRolePermissions(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get users belong to the selected role.
     * @param {string} roleName 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesGetUsersByRoleName(roleName: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesGetUsersByRoleName(roleName, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a role.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {CreateRoleRequest} createRoleRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesRegisterRole(tenant: string, createRoleRequest: CreateRoleRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesRegisterRole(tenant, createRoleRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a role\'s permission.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {RemoveRolePermissionsRequest} removeRolePermissionsRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesRemovePermission(id: string, tenant: string, removeRolePermissionsRequest: RemoveRolePermissionsRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesRemovePermission(id, tenant, removeRolePermissionsRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get role histories.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesRoleHistories(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesRoleHistories(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of all roles.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SearchRolesRequest} searchRolesRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesSearch(tenant: string, searchRolesRequest: SearchRolesRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesSearch(tenant, searchRolesRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of all roles.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {TourSearchRolesRequest} tourSearchRolesRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesTourSearch(tenant: string, tourSearchRolesRequest: TourSearchRolesRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesTourSearch(tenant, tourSearchRolesRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add permissions to the selected role.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateRolePermissionsRequest} updateRolePermissionsRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesUpdatePermission(id: string, tenant: string, updateRolePermissionsRequest: UpdateRolePermissionsRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesUpdatePermission(id, tenant, updateRolePermissionsRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a role.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateRoleRequest} updateRoleRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesUpdateRole(id: string, tenant: string, updateRoleRequest: UpdateRoleRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesUpdateRole(id, tenant, updateRoleRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }
}
