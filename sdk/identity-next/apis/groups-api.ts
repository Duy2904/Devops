/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA Identity Next
 * TripOTA Identity Next built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AgentDto } from '../models';
// @ts-ignore
import { AssignGroupRolesRequest } from '../models';
// @ts-ignore
import { AssignRolesGroupRequest } from '../models';
// @ts-ignore
import { AssignUsersGroupRequest } from '../models';
// @ts-ignore
import { BranchDto } from '../models';
// @ts-ignore
import { CreateAgentPermissionsRequest } from '../models';
// @ts-ignore
import { CreateAgentRequest } from '../models';
// @ts-ignore
import { CreateBranchRequest } from '../models';
// @ts-ignore
import { CreateGroupRequest } from '../models';
// @ts-ignore
import { Document } from '../models';
// @ts-ignore
import { EmployeeDto } from '../models';
// @ts-ignore
import { GroupDto } from '../models';
// @ts-ignore
import { GroupFilterDto } from '../models';
// @ts-ignore
import { GroupPositionDto } from '../models';
// @ts-ignore
import { JsonDocument } from '../models';
// @ts-ignore
import { KeyValuePairOfStringAndString } from '../models';
// @ts-ignore
import { PaginationResponseOfBasicGroupDto } from '../models';
// @ts-ignore
import { PaginationResponseOfGroupDto } from '../models';
// @ts-ignore
import { PaginationResponseOfLiteAgentDto } from '../models';
// @ts-ignore
import { RoleDto } from '../models';
// @ts-ignore
import { SearchAgentsRequest } from '../models';
// @ts-ignore
import { SearchBasicAgentsRequest } from '../models';
// @ts-ignore
import { SearchBranchesRequest } from '../models';
// @ts-ignore
import { SearchGroupsRequest } from '../models';
// @ts-ignore
import { ToggleAgentStatusRequest } from '../models';
// @ts-ignore
import { ToggleBranchStatusRequest } from '../models';
// @ts-ignore
import { UpdateAgentPermissionsRequest } from '../models';
// @ts-ignore
import { UpdateAgentRequest } from '../models';
// @ts-ignore
import { UpdateBranchRequest } from '../models';
// @ts-ignore
import { UpdateGroupRequest } from '../models';
// @ts-ignore
import { UpdateGroupStateRequest } from '../models';
// @ts-ignore
import { UserDto } from '../models';
// @ts-ignore
import { ViewBranchDetailDto } from '../models';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a agent.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateAgentRequest} createAgentRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAddAgent: async (tenant: string, createAgentRequest: CreateAgentRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsAddAgent', 'tenant', tenant)
            // verify required parameter 'createAgentRequest' is not null or undefined
            assertParamExists('groupsAddAgent', 'createAgentRequest', createAgentRequest)
            const localVarPath = `/api/v1/Groups/tour/add-agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAgentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add agent permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateAgentPermissionsRequest} createAgentPermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAddAgentPermissions: async (tenant: string, createAgentPermissionsRequest: CreateAgentPermissionsRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsAddAgentPermissions', 'tenant', tenant)
            // verify required parameter 'createAgentPermissionsRequest' is not null or undefined
            assertParamExists('groupsAddAgentPermissions', 'createAgentPermissionsRequest', createAgentPermissionsRequest)
            const localVarPath = `/api/v1/Groups/tour/add-agent/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAgentPermissionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a branch.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateBranchRequest} createBranchRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAddBranch: async (tenant: string, createBranchRequest: CreateBranchRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsAddBranch', 'tenant', tenant)
            // verify required parameter 'createBranchRequest' is not null or undefined
            assertParamExists('groupsAddBranch', 'createBranchRequest', createBranchRequest)
            const localVarPath = `/api/v1/Groups/tour/add-branch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBranchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a group.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateGroupRequest} createGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAddGroup: async (tenant: string, createGroupRequest: CreateGroupRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsAddGroup', 'tenant', tenant)
            // verify required parameter 'createGroupRequest' is not null or undefined
            assertParamExists('groupsAddGroup', 'createGroupRequest', createGroupRequest)
            const localVarPath = `/api/v1/Groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Toggle agent status.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleAgentStatusRequest} toggleAgentStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAgentToggleStatus: async (tenant: string, toggleAgentStatusRequest: ToggleAgentStatusRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsAgentToggleStatus', 'tenant', tenant)
            // verify required parameter 'toggleAgentStatusRequest' is not null or undefined
            assertParamExists('groupsAgentToggleStatus', 'toggleAgentStatusRequest', toggleAgentStatusRequest)
            const localVarPath = `/api/v1/Groups/tour/agent/toggle-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toggleAgentStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign roles for a group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AssignGroupRolesRequest} assignGroupRolesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAssignGroupRoles: async (id: string, tenant: string, assignGroupRolesRequest: AssignGroupRolesRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsAssignGroupRoles', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsAssignGroupRoles', 'tenant', tenant)
            // verify required parameter 'assignGroupRolesRequest' is not null or undefined
            assertParamExists('groupsAssignGroupRoles', 'assignGroupRolesRequest', assignGroupRolesRequest)
            const localVarPath = `/api/v1/Groups/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignGroupRolesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign roles for a group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AssignRolesGroupRequest} assignRolesGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAssignRoles: async (id: string, tenant: string, assignRolesGroupRequest: AssignRolesGroupRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsAssignRoles', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsAssignRoles', 'tenant', tenant)
            // verify required parameter 'assignRolesGroupRequest' is not null or undefined
            assertParamExists('groupsAssignRoles', 'assignRolesGroupRequest', assignRolesGroupRequest)
            const localVarPath = `/api/v1/Groups/{id}/assign-roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignRolesGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign user to the group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AssignUsersGroupRequest} assignUsersGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAssignUserGroup: async (id: string, tenant: string, assignUsersGroupRequest: AssignUsersGroupRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsAssignUserGroup', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsAssignUserGroup', 'tenant', tenant)
            // verify required parameter 'assignUsersGroupRequest' is not null or undefined
            assertParamExists('groupsAssignUserGroup', 'assignUsersGroupRequest', assignUsersGroupRequest)
            const localVarPath = `/api/v1/Groups/{id}/assign-user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignUsersGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Toggle branch status.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleBranchStatusRequest} toggleBranchStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsBranchToggleStatus: async (tenant: string, toggleBranchStatusRequest: ToggleBranchStatusRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsBranchToggleStatus', 'tenant', tenant)
            // verify required parameter 'toggleBranchStatusRequest' is not null or undefined
            assertParamExists('groupsBranchToggleStatus', 'toggleBranchStatusRequest', toggleBranchStatusRequest)
            const localVarPath = `/api/v1/Groups/tour/branch/toggle-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toggleBranchStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDelete: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a agent.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDeleteAgent: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsDeleteAgent', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsDeleteAgent', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/tour/{id}/agent`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a branch.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDeleteBranch: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsDeleteBranch', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsDeleteBranch', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/tour/{id}/branch`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete uploaded document.
         * @param {string} groupId 
         * @param {string} url 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDeleteDocuments: async (groupId: string, url: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('groupsDeleteDocuments', 'groupId', groupId)
            // verify required parameter 'url' is not null or undefined
            assertParamExists('groupsDeleteDocuments', 'url', url)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsDeleteDocuments', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/tour/{groupId}/doc/{url}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the agent info.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetAgent: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsGetAgent', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetAgent', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/tour/{id}/agent`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get agent states.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetAgentStates: async (tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetAgentStates', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/agent/states`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get agents.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [groupId] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetAgents: async (tenant: string, groupId?: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetAgents', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/tour/agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (groupId !== undefined) {
                localVarQueryParameter['GroupId'] = groupId;
            }

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the branch info.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetBranch: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsGetBranch', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetBranch', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/tour/{id}/branch`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get branch states.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetBranchStates: async (tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetBranchStates', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/branch/states`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get branches.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [groupId] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetBranches: async (tenant: string, groupId?: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetBranches', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/tour/branches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (groupId !== undefined) {
                localVarQueryParameter['GroupId'] = groupId;
            }

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get group details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetById: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsGetById', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetById', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get group details with its positions.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetByIdWithPosition: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsGetByIdWithPosition', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetByIdWithPosition', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/{id}/positions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get group employees.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetDefaultGroupEmployees: async (tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetDefaultGroupEmployees', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/tour/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of all groups.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetList: async (tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetList', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get roles by group id.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetRolesByGroup: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsGetRolesByGroup', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetRolesByGroup', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get group users.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetUsersById: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsGetUsersById', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGetUsersById', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check email group existing.
         * @param {string} email 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupEmailExisting: async (email: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('groupsGroupEmailExisting', 'email', email)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGroupEmailExisting', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/tour/{email}/email-existing`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get group histories.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupHistories: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsGroupHistories', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsGroupHistories', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/{id}/histories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search lite agents for dropdown list only.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchBasicAgentsRequest} searchBasicAgentsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchBasicAgents: async (tenant: string, searchBasicAgentsRequest: SearchBasicAgentsRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsSearchBasicAgents', 'tenant', tenant)
            // verify required parameter 'searchBasicAgentsRequest' is not null or undefined
            assertParamExists('groupsSearchBasicAgents', 'searchBasicAgentsRequest', searchBasicAgentsRequest)
            const localVarPath = `/api/v1/Groups/basic-agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchBasicAgentsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search branches for tour operations.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchBranchesRequest} searchBranchesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchBranch: async (tenant: string, searchBranchesRequest: SearchBranchesRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsSearchBranch', 'tenant', tenant)
            // verify required parameter 'searchBranchesRequest' is not null or undefined
            assertParamExists('groupsSearchBranch', 'searchBranchesRequest', searchBranchesRequest)
            const localVarPath = `/api/v1/Groups/search-branch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchBranchesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search groups by name and id
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchGroupsRequest} searchGroupsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchGroups: async (tenant: string, searchGroupsRequest: SearchGroupsRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsSearchGroups', 'tenant', tenant)
            // verify required parameter 'searchGroupsRequest' is not null or undefined
            assertParamExists('groupsSearchGroups', 'searchGroupsRequest', searchGroupsRequest)
            const localVarPath = `/api/v1/Groups/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchGroupsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search agents for tour operations.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchAgentsRequest} searchAgentsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchGroupsForTourOperations: async (tenant: string, searchAgentsRequest: SearchAgentsRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsSearchGroupsForTourOperations', 'tenant', tenant)
            // verify required parameter 'searchAgentsRequest' is not null or undefined
            assertParamExists('groupsSearchGroupsForTourOperations', 'searchAgentsRequest', searchAgentsRequest)
            const localVarPath = `/api/v1/Groups/search-agent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchAgentsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a agent.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateAgentRequest} updateAgentRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateAgent: async (id: string, tenant: string, updateAgentRequest: UpdateAgentRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsUpdateAgent', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsUpdateAgent', 'tenant', tenant)
            // verify required parameter 'updateAgentRequest' is not null or undefined
            assertParamExists('groupsUpdateAgent', 'updateAgentRequest', updateAgentRequest)
            const localVarPath = `/api/v1/Groups/tour/{id}/update-agent`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAgentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload documents.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {Array<File>} [documents] 
         * @param {string} [groupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateAgentDocuments: async (id: string, tenant: string, xApiRm?: string, documents?: Array<File>, groupId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsUpdateAgentDocuments', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsUpdateAgentDocuments', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/tour/{id}/documents`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }

            if (documents) {
                documents.forEach((element) => {
                    localVarFormParams.append('Documents', element as any);
                })
            }

    
            if (groupId !== undefined) { 
                localVarFormParams.append('GroupId', groupId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update agent permissions.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateAgentPermissionsRequest} updateAgentPermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateAgentPermissions: async (id: string, tenant: string, updateAgentPermissionsRequest: UpdateAgentPermissionsRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsUpdateAgentPermissions', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsUpdateAgentPermissions', 'tenant', tenant)
            // verify required parameter 'updateAgentPermissionsRequest' is not null or undefined
            assertParamExists('groupsUpdateAgentPermissions', 'updateAgentPermissionsRequest', updateAgentPermissionsRequest)
            const localVarPath = `/api/v1/Groups/tour/{id}/update-agent/permissions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAgentPermissionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update an agent state.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateGroupStateRequest} updateGroupStateRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateAgentState: async (id: string, tenant: string, updateGroupStateRequest: UpdateGroupStateRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsUpdateAgentState', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsUpdateAgentState', 'tenant', tenant)
            // verify required parameter 'updateGroupStateRequest' is not null or undefined
            assertParamExists('groupsUpdateAgentState', 'updateGroupStateRequest', updateGroupStateRequest)
            const localVarPath = `/api/v1/Groups/tour/{id}/update-agent-state`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupStateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update a branch.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateBranchRequest} updateBranchRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateBranch: async (id: string, tenant: string, updateBranchRequest: UpdateBranchRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsUpdateBranch', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsUpdateBranch', 'tenant', tenant)
            // verify required parameter 'updateBranchRequest' is not null or undefined
            assertParamExists('groupsUpdateBranch', 'updateBranchRequest', updateBranchRequest)
            const localVarPath = `/api/v1/Groups/tour/{id}/update-branch`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBranchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update a branch state.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateGroupStateRequest} updateGroupStateRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateBranchState: async (id: string, tenant: string, updateGroupStateRequest: UpdateGroupStateRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsUpdateBranchState', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsUpdateBranchState', 'tenant', tenant)
            // verify required parameter 'updateGroupStateRequest' is not null or undefined
            assertParamExists('groupsUpdateBranchState', 'updateGroupStateRequest', updateGroupStateRequest)
            const localVarPath = `/api/v1/Groups/tour/{id}/update-branch-state`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupStateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a existing group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateGroupRequest} updateGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateGroup: async (id: string, tenant: string, updateGroupRequest: UpdateGroupRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsUpdateGroup', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsUpdateGroup', 'tenant', tenant)
            // verify required parameter 'updateGroupRequest' is not null or undefined
            assertParamExists('groupsUpdateGroup', 'updateGroupRequest', updateGroupRequest)
            const localVarPath = `/api/v1/Groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update group logo.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {File} [imageFile] 
         * @param {string} [groupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateLogo: async (id: string, tenant: string, xApiRm?: string, imageFile?: File, groupId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupsUpdateLogo', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsUpdateLogo', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/{id}/logo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


            if (imageFile !== undefined) { 
                localVarFormParams.append('Image.File', imageFile as any);
            }
    
            if (groupId !== undefined) { 
                localVarFormParams.append('GroupId', groupId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View document.
         * @param {string} url 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsViewDocuments: async (url: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('groupsViewDocuments', 'url', url)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('groupsViewDocuments', 'tenant', tenant)
            const localVarPath = `/api/v1/Groups/tour/{url}/document`
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a agent.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateAgentRequest} createAgentRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsAddAgent(tenant: string, createAgentRequest: CreateAgentRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsAddAgent(tenant, createAgentRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add agent permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateAgentPermissionsRequest} createAgentPermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsAddAgentPermissions(tenant: string, createAgentPermissionsRequest: CreateAgentPermissionsRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsAddAgentPermissions(tenant, createAgentPermissionsRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a branch.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateBranchRequest} createBranchRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsAddBranch(tenant: string, createBranchRequest: CreateBranchRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsAddBranch(tenant, createBranchRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a group.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateGroupRequest} createGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsAddGroup(tenant: string, createGroupRequest: CreateGroupRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsAddGroup(tenant, createGroupRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Toggle agent status.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleAgentStatusRequest} toggleAgentStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsAgentToggleStatus(tenant: string, toggleAgentStatusRequest: ToggleAgentStatusRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsAgentToggleStatus(tenant, toggleAgentStatusRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Assign roles for a group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AssignGroupRolesRequest} assignGroupRolesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsAssignGroupRoles(id: string, tenant: string, assignGroupRolesRequest: AssignGroupRolesRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsAssignGroupRoles(id, tenant, assignGroupRolesRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Assign roles for a group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AssignRolesGroupRequest} assignRolesGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsAssignRoles(id: string, tenant: string, assignRolesGroupRequest: AssignRolesGroupRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsAssignRoles(id, tenant, assignRolesGroupRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Assign user to the group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AssignUsersGroupRequest} assignUsersGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsAssignUserGroup(id: string, tenant: string, assignUsersGroupRequest: AssignUsersGroupRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsAssignUserGroup(id, tenant, assignUsersGroupRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Toggle branch status.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleBranchStatusRequest} toggleBranchStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsBranchToggleStatus(tenant: string, toggleBranchStatusRequest: ToggleBranchStatusRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsBranchToggleStatus(tenant, toggleBranchStatusRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsDelete(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsDelete(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a agent.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsDeleteAgent(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsDeleteAgent(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a branch.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsDeleteBranch(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsDeleteBranch(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete uploaded document.
         * @param {string} groupId 
         * @param {string} url 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsDeleteDocuments(groupId: string, url: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsDeleteDocuments(groupId, url, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the agent info.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetAgent(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetAgent(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get agent states.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetAgentStates(tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValuePairOfStringAndString>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetAgentStates(tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get agents.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [groupId] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetAgents(tenant: string, groupId?: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupFilterDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetAgents(tenant, groupId, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the branch info.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetBranch(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewBranchDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetBranch(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get branch states.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetBranchStates(tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyValuePairOfStringAndString>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetBranchStates(tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get branches.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [groupId] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetBranches(tenant: string, groupId?: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupFilterDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetBranches(tenant, groupId, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get group details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetById(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetById(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get group details with its positions.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetByIdWithPosition(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupPositionDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetByIdWithPosition(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get group employees.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetDefaultGroupEmployees(tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetDefaultGroupEmployees(tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of all groups.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetList(tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetList(tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get roles by group id.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetRolesByGroup(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetRolesByGroup(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get group users.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGetUsersById(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGetUsersById(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check email group existing.
         * @param {string} email 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGroupEmailExisting(email: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGroupEmailExisting(email, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get group histories.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGroupHistories(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGroupHistories(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search lite agents for dropdown list only.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchBasicAgentsRequest} searchBasicAgentsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsSearchBasicAgents(tenant: string, searchBasicAgentsRequest: SearchBasicAgentsRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfBasicGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsSearchBasicAgents(tenant, searchBasicAgentsRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search branches for tour operations.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchBranchesRequest} searchBranchesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsSearchBranch(tenant: string, searchBranchesRequest: SearchBranchesRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfLiteAgentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsSearchBranch(tenant, searchBranchesRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search groups by name and id
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchGroupsRequest} searchGroupsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsSearchGroups(tenant: string, searchGroupsRequest: SearchGroupsRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsSearchGroups(tenant, searchGroupsRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search agents for tour operations.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchAgentsRequest} searchAgentsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsSearchGroupsForTourOperations(tenant: string, searchAgentsRequest: SearchAgentsRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfLiteAgentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsSearchGroupsForTourOperations(tenant, searchAgentsRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a agent.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateAgentRequest} updateAgentRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsUpdateAgent(id: string, tenant: string, updateAgentRequest: UpdateAgentRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsUpdateAgent(id, tenant, updateAgentRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload documents.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {Array<File>} [documents] 
         * @param {string} [groupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsUpdateAgentDocuments(id: string, tenant: string, xApiRm?: string, documents?: Array<File>, groupId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Document>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsUpdateAgentDocuments(id, tenant, xApiRm, documents, groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update agent permissions.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateAgentPermissionsRequest} updateAgentPermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsUpdateAgentPermissions(id: string, tenant: string, updateAgentPermissionsRequest: UpdateAgentPermissionsRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsUpdateAgentPermissions(id, tenant, updateAgentPermissionsRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update an agent state.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateGroupStateRequest} updateGroupStateRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsUpdateAgentState(id: string, tenant: string, updateGroupStateRequest: UpdateGroupStateRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsUpdateAgentState(id, tenant, updateGroupStateRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update a branch.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateBranchRequest} updateBranchRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsUpdateBranch(id: string, tenant: string, updateBranchRequest: UpdateBranchRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsUpdateBranch(id, tenant, updateBranchRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update a branch state.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateGroupStateRequest} updateGroupStateRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsUpdateBranchState(id: string, tenant: string, updateGroupStateRequest: UpdateGroupStateRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsUpdateBranchState(id, tenant, updateGroupStateRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a existing group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateGroupRequest} updateGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsUpdateGroup(id: string, tenant: string, updateGroupRequest: UpdateGroupRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsUpdateGroup(id, tenant, updateGroupRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update group logo.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {File} [imageFile] 
         * @param {string} [groupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsUpdateLogo(id: string, tenant: string, xApiRm?: string, imageFile?: File, groupId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsUpdateLogo(id, tenant, xApiRm, imageFile, groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary View document.
         * @param {string} url 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsViewDocuments(url: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsViewDocuments(url, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a agent.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateAgentRequest} createAgentRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAddAgent(tenant: string, createAgentRequest: CreateAgentRequest, xApiRm?: string, options?: any): AxiosPromise<AgentDto> {
            return localVarFp.groupsAddAgent(tenant, createAgentRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add agent permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateAgentPermissionsRequest} createAgentPermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAddAgentPermissions(tenant: string, createAgentPermissionsRequest: CreateAgentPermissionsRequest, xApiRm?: string, options?: any): AxiosPromise<File> {
            return localVarFp.groupsAddAgentPermissions(tenant, createAgentPermissionsRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a branch.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateBranchRequest} createBranchRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAddBranch(tenant: string, createBranchRequest: CreateBranchRequest, xApiRm?: string, options?: any): AxiosPromise<BranchDto> {
            return localVarFp.groupsAddBranch(tenant, createBranchRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a group.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateGroupRequest} createGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAddGroup(tenant: string, createGroupRequest: CreateGroupRequest, xApiRm?: string, options?: any): AxiosPromise<File> {
            return localVarFp.groupsAddGroup(tenant, createGroupRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Toggle agent status.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleAgentStatusRequest} toggleAgentStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAgentToggleStatus(tenant: string, toggleAgentStatusRequest: ToggleAgentStatusRequest, xApiRm?: string, options?: any): AxiosPromise<File> {
            return localVarFp.groupsAgentToggleStatus(tenant, toggleAgentStatusRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign roles for a group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AssignGroupRolesRequest} assignGroupRolesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAssignGroupRoles(id: string, tenant: string, assignGroupRolesRequest: AssignGroupRolesRequest, xApiRm?: string, options?: any): AxiosPromise<GroupDto> {
            return localVarFp.groupsAssignGroupRoles(id, tenant, assignGroupRolesRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign roles for a group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AssignRolesGroupRequest} assignRolesGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAssignRoles(id: string, tenant: string, assignRolesGroupRequest: AssignRolesGroupRequest, xApiRm?: string, options?: any): AxiosPromise<GroupDto> {
            return localVarFp.groupsAssignRoles(id, tenant, assignRolesGroupRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign user to the group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AssignUsersGroupRequest} assignUsersGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsAssignUserGroup(id: string, tenant: string, assignUsersGroupRequest: AssignUsersGroupRequest, xApiRm?: string, options?: any): AxiosPromise<GroupDto> {
            return localVarFp.groupsAssignUserGroup(id, tenant, assignUsersGroupRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Toggle branch status.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleBranchStatusRequest} toggleBranchStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsBranchToggleStatus(tenant: string, toggleBranchStatusRequest: ToggleBranchStatusRequest, xApiRm?: string, options?: any): AxiosPromise<File> {
            return localVarFp.groupsBranchToggleStatus(tenant, toggleBranchStatusRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDelete(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<File> {
            return localVarFp.groupsDelete(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a agent.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDeleteAgent(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<File> {
            return localVarFp.groupsDeleteAgent(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a branch.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDeleteBranch(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<File> {
            return localVarFp.groupsDeleteBranch(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete uploaded document.
         * @param {string} groupId 
         * @param {string} url 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDeleteDocuments(groupId: string, url: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.groupsDeleteDocuments(groupId, url, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the agent info.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetAgent(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<AgentDto> {
            return localVarFp.groupsGetAgent(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get agent states.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetAgentStates(tenant: string, xApiRm?: string, options?: any): AxiosPromise<Array<KeyValuePairOfStringAndString>> {
            return localVarFp.groupsGetAgentStates(tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get agents.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [groupId] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetAgents(tenant: string, groupId?: string, xApiRm?: string, options?: any): AxiosPromise<Array<GroupFilterDto>> {
            return localVarFp.groupsGetAgents(tenant, groupId, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the branch info.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetBranch(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<ViewBranchDetailDto> {
            return localVarFp.groupsGetBranch(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get branch states.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetBranchStates(tenant: string, xApiRm?: string, options?: any): AxiosPromise<Array<KeyValuePairOfStringAndString>> {
            return localVarFp.groupsGetBranchStates(tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get branches.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [groupId] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetBranches(tenant: string, groupId?: string, xApiRm?: string, options?: any): AxiosPromise<Array<GroupFilterDto>> {
            return localVarFp.groupsGetBranches(tenant, groupId, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get group details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetById(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<GroupDto> {
            return localVarFp.groupsGetById(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get group details with its positions.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetByIdWithPosition(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<Array<GroupPositionDto>> {
            return localVarFp.groupsGetByIdWithPosition(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get group employees.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetDefaultGroupEmployees(tenant: string, xApiRm?: string, options?: any): AxiosPromise<Array<EmployeeDto>> {
            return localVarFp.groupsGetDefaultGroupEmployees(tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of all groups.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetList(tenant: string, xApiRm?: string, options?: any): AxiosPromise<Array<GroupDto>> {
            return localVarFp.groupsGetList(tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get roles by group id.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetRolesByGroup(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<Array<RoleDto>> {
            return localVarFp.groupsGetRolesByGroup(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get group users.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGetUsersById(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<Array<UserDto>> {
            return localVarFp.groupsGetUsersById(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check email group existing.
         * @param {string} email 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupEmailExisting(email: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.groupsGroupEmailExisting(email, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get group histories.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupHistories(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<JsonDocument> {
            return localVarFp.groupsGroupHistories(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search lite agents for dropdown list only.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchBasicAgentsRequest} searchBasicAgentsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchBasicAgents(tenant: string, searchBasicAgentsRequest: SearchBasicAgentsRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfBasicGroupDto> {
            return localVarFp.groupsSearchBasicAgents(tenant, searchBasicAgentsRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search branches for tour operations.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchBranchesRequest} searchBranchesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchBranch(tenant: string, searchBranchesRequest: SearchBranchesRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfLiteAgentDto> {
            return localVarFp.groupsSearchBranch(tenant, searchBranchesRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search groups by name and id
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchGroupsRequest} searchGroupsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchGroups(tenant: string, searchGroupsRequest: SearchGroupsRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfGroupDto> {
            return localVarFp.groupsSearchGroups(tenant, searchGroupsRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search agents for tour operations.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchAgentsRequest} searchAgentsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchGroupsForTourOperations(tenant: string, searchAgentsRequest: SearchAgentsRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfLiteAgentDto> {
            return localVarFp.groupsSearchGroupsForTourOperations(tenant, searchAgentsRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a agent.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateAgentRequest} updateAgentRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateAgent(id: string, tenant: string, updateAgentRequest: UpdateAgentRequest, xApiRm?: string, options?: any): AxiosPromise<AgentDto> {
            return localVarFp.groupsUpdateAgent(id, tenant, updateAgentRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload documents.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {Array<File>} [documents] 
         * @param {string} [groupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateAgentDocuments(id: string, tenant: string, xApiRm?: string, documents?: Array<File>, groupId?: string, options?: any): AxiosPromise<Array<Document>> {
            return localVarFp.groupsUpdateAgentDocuments(id, tenant, xApiRm, documents, groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update agent permissions.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateAgentPermissionsRequest} updateAgentPermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateAgentPermissions(id: string, tenant: string, updateAgentPermissionsRequest: UpdateAgentPermissionsRequest, xApiRm?: string, options?: any): AxiosPromise<File> {
            return localVarFp.groupsUpdateAgentPermissions(id, tenant, updateAgentPermissionsRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update an agent state.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateGroupStateRequest} updateGroupStateRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateAgentState(id: string, tenant: string, updateGroupStateRequest: UpdateGroupStateRequest, xApiRm?: string, options?: any): AxiosPromise<string> {
            return localVarFp.groupsUpdateAgentState(id, tenant, updateGroupStateRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update a branch.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateBranchRequest} updateBranchRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateBranch(id: string, tenant: string, updateBranchRequest: UpdateBranchRequest, xApiRm?: string, options?: any): AxiosPromise<BranchDto> {
            return localVarFp.groupsUpdateBranch(id, tenant, updateBranchRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update a branch state.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateGroupStateRequest} updateGroupStateRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateBranchState(id: string, tenant: string, updateGroupStateRequest: UpdateGroupStateRequest, xApiRm?: string, options?: any): AxiosPromise<string> {
            return localVarFp.groupsUpdateBranchState(id, tenant, updateGroupStateRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a existing group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateGroupRequest} updateGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateGroup(id: string, tenant: string, updateGroupRequest: UpdateGroupRequest, xApiRm?: string, options?: any): AxiosPromise<GroupDto> {
            return localVarFp.groupsUpdateGroup(id, tenant, updateGroupRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update group logo.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {File} [imageFile] 
         * @param {string} [groupId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsUpdateLogo(id: string, tenant: string, xApiRm?: string, imageFile?: File, groupId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.groupsUpdateLogo(id, tenant, xApiRm, imageFile, groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View document.
         * @param {string} url 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsViewDocuments(url: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<string> {
            return localVarFp.groupsViewDocuments(url, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * 
     * @summary Create a agent.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {CreateAgentRequest} createAgentRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsAddAgent(tenant: string, createAgentRequest: CreateAgentRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsAddAgent(tenant, createAgentRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add agent permissions.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {CreateAgentPermissionsRequest} createAgentPermissionsRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsAddAgentPermissions(tenant: string, createAgentPermissionsRequest: CreateAgentPermissionsRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsAddAgentPermissions(tenant, createAgentPermissionsRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a branch.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {CreateBranchRequest} createBranchRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsAddBranch(tenant: string, createBranchRequest: CreateBranchRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsAddBranch(tenant, createBranchRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a group.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {CreateGroupRequest} createGroupRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsAddGroup(tenant: string, createGroupRequest: CreateGroupRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsAddGroup(tenant, createGroupRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Toggle agent status.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {ToggleAgentStatusRequest} toggleAgentStatusRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsAgentToggleStatus(tenant: string, toggleAgentStatusRequest: ToggleAgentStatusRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsAgentToggleStatus(tenant, toggleAgentStatusRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign roles for a group.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {AssignGroupRolesRequest} assignGroupRolesRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsAssignGroupRoles(id: string, tenant: string, assignGroupRolesRequest: AssignGroupRolesRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsAssignGroupRoles(id, tenant, assignGroupRolesRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign roles for a group.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {AssignRolesGroupRequest} assignRolesGroupRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsAssignRoles(id: string, tenant: string, assignRolesGroupRequest: AssignRolesGroupRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsAssignRoles(id, tenant, assignRolesGroupRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign user to the group.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {AssignUsersGroupRequest} assignUsersGroupRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsAssignUserGroup(id: string, tenant: string, assignUsersGroupRequest: AssignUsersGroupRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsAssignUserGroup(id, tenant, assignUsersGroupRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Toggle branch status.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {ToggleBranchStatusRequest} toggleBranchStatusRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsBranchToggleStatus(tenant: string, toggleBranchStatusRequest: ToggleBranchStatusRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsBranchToggleStatus(tenant, toggleBranchStatusRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a group.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsDelete(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsDelete(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a agent.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsDeleteAgent(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsDeleteAgent(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a branch.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsDeleteBranch(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsDeleteBranch(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete uploaded document.
     * @param {string} groupId 
     * @param {string} url 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsDeleteDocuments(groupId: string, url: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsDeleteDocuments(groupId, url, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the agent info.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetAgent(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetAgent(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get agent states.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetAgentStates(tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetAgentStates(tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get agents.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [groupId] 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetAgents(tenant: string, groupId?: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetAgents(tenant, groupId, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the branch info.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetBranch(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetBranch(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get branch states.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetBranchStates(tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetBranchStates(tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get branches.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [groupId] 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetBranches(tenant: string, groupId?: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetBranches(tenant, groupId, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get group details.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetById(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetById(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get group details with its positions.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetByIdWithPosition(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetByIdWithPosition(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get group employees.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetDefaultGroupEmployees(tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetDefaultGroupEmployees(tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of all groups.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetList(tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetList(tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get roles by group id.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetRolesByGroup(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetRolesByGroup(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get group users.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGetUsersById(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGetUsersById(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check email group existing.
     * @param {string} email 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupEmailExisting(email: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupEmailExisting(email, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get group histories.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupHistories(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupHistories(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search lite agents for dropdown list only.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SearchBasicAgentsRequest} searchBasicAgentsRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsSearchBasicAgents(tenant: string, searchBasicAgentsRequest: SearchBasicAgentsRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsSearchBasicAgents(tenant, searchBasicAgentsRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search branches for tour operations.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SearchBranchesRequest} searchBranchesRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsSearchBranch(tenant: string, searchBranchesRequest: SearchBranchesRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsSearchBranch(tenant, searchBranchesRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search groups by name and id
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SearchGroupsRequest} searchGroupsRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsSearchGroups(tenant: string, searchGroupsRequest: SearchGroupsRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsSearchGroups(tenant, searchGroupsRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search agents for tour operations.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SearchAgentsRequest} searchAgentsRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsSearchGroupsForTourOperations(tenant: string, searchAgentsRequest: SearchAgentsRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsSearchGroupsForTourOperations(tenant, searchAgentsRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a agent.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateAgentRequest} updateAgentRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsUpdateAgent(id: string, tenant: string, updateAgentRequest: UpdateAgentRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsUpdateAgent(id, tenant, updateAgentRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload documents.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {Array<File>} [documents] 
     * @param {string} [groupId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsUpdateAgentDocuments(id: string, tenant: string, xApiRm?: string, documents?: Array<File>, groupId?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsUpdateAgentDocuments(id, tenant, xApiRm, documents, groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update agent permissions.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateAgentPermissionsRequest} updateAgentPermissionsRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsUpdateAgentPermissions(id: string, tenant: string, updateAgentPermissionsRequest: UpdateAgentPermissionsRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsUpdateAgentPermissions(id, tenant, updateAgentPermissionsRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update an agent state.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateGroupStateRequest} updateGroupStateRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsUpdateAgentState(id: string, tenant: string, updateGroupStateRequest: UpdateGroupStateRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsUpdateAgentState(id, tenant, updateGroupStateRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update a branch.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateBranchRequest} updateBranchRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsUpdateBranch(id: string, tenant: string, updateBranchRequest: UpdateBranchRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsUpdateBranch(id, tenant, updateBranchRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update a branch state.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateGroupStateRequest} updateGroupStateRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsUpdateBranchState(id: string, tenant: string, updateGroupStateRequest: UpdateGroupStateRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsUpdateBranchState(id, tenant, updateGroupStateRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a existing group.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateGroupRequest} updateGroupRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsUpdateGroup(id: string, tenant: string, updateGroupRequest: UpdateGroupRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsUpdateGroup(id, tenant, updateGroupRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update group logo.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {File} [imageFile] 
     * @param {string} [groupId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsUpdateLogo(id: string, tenant: string, xApiRm?: string, imageFile?: File, groupId?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsUpdateLogo(id, tenant, xApiRm, imageFile, groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary View document.
     * @param {string} url 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsViewDocuments(url: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsViewDocuments(url, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }
}
