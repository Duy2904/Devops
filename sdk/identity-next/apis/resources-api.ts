/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA Identity Next
 * TripOTA Identity Next built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApplicationResourceDto } from '../models';
// @ts-ignore
import { CreateResourceRequest } from '../models';
// @ts-ignore
import { ImportResourceRequest } from '../models';
// @ts-ignore
import { PaginationResponseOfApplicationResourceDto } from '../models';
// @ts-ignore
import { SearchResourcesRequest } from '../models';
// @ts-ignore
import { UpdateResourceRequest } from '../models';
/**
 * ResourcesApi - axios parameter creator
 * @export
 */
export const ResourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a resource.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateResourceRequest} createResourceRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesAddResource: async (tenant: string, createResourceRequest: CreateResourceRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('resourcesAddResource', 'tenant', tenant)
            // verify required parameter 'createResourceRequest' is not null or undefined
            assertParamExists('resourcesAddResource', 'createResourceRequest', createResourceRequest)
            const localVarPath = `/api/v1/Resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a resource.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesDeleteResource: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resourcesDeleteResource', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('resourcesDeleteResource', 'tenant', tenant)
            const localVarPath = `/api/v1/Resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get resource details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesGetById: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resourcesGetById', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('resourcesGetById', 'tenant', tenant)
            const localVarPath = `/api/v1/Resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesGetList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Resources/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of all resources.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesGetListAll: async (tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('resourcesGetListAll', 'tenant', tenant)
            const localVarPath = `/api/v1/Resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import resources.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ImportResourceRequest} importResourceRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesImportResource: async (tenant: string, importResourceRequest: ImportResourceRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('resourcesImportResource', 'tenant', tenant)
            // verify required parameter 'importResourceRequest' is not null or undefined
            assertParamExists('resourcesImportResource', 'importResourceRequest', importResourceRequest)
            const localVarPath = `/api/v1/Resources/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(importResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search resources by name and id
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchResourcesRequest} searchResourcesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesSearchResources: async (tenant: string, searchResourcesRequest: SearchResourcesRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('resourcesSearchResources', 'tenant', tenant)
            // verify required parameter 'searchResourcesRequest' is not null or undefined
            assertParamExists('resourcesSearchResources', 'searchResourcesRequest', searchResourcesRequest)
            const localVarPath = `/api/v1/Resources/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchResourcesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a resource.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateResourceRequest} updateResourceRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesUpdateResource: async (id: string, tenant: string, updateResourceRequest: UpdateResourceRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resourcesUpdateResource', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('resourcesUpdateResource', 'tenant', tenant)
            // verify required parameter 'updateResourceRequest' is not null or undefined
            assertParamExists('resourcesUpdateResource', 'updateResourceRequest', updateResourceRequest)
            const localVarPath = `/api/v1/Resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourcesApi - functional programming interface
 * @export
 */
export const ResourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a resource.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateResourceRequest} createResourceRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesAddResource(tenant: string, createResourceRequest: CreateResourceRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesAddResource(tenant, createResourceRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a resource.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesDeleteResource(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesDeleteResource(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get resource details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesGetById(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationResourceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesGetById(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesGetList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesGetList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of all resources.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesGetListAll(tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationResourceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesGetListAll(tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Import resources.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ImportResourceRequest} importResourceRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesImportResource(tenant: string, importResourceRequest: ImportResourceRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationResourceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesImportResource(tenant, importResourceRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search resources by name and id
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchResourcesRequest} searchResourcesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesSearchResources(tenant: string, searchResourcesRequest: SearchResourcesRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfApplicationResourceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesSearchResources(tenant, searchResourcesRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a resource.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateResourceRequest} updateResourceRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesUpdateResource(id: string, tenant: string, updateResourceRequest: UpdateResourceRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesUpdateResource(id, tenant, updateResourceRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResourcesApi - factory interface
 * @export
 */
export const ResourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResourcesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a resource.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateResourceRequest} createResourceRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesAddResource(tenant: string, createResourceRequest: CreateResourceRequest, xApiRm?: string, options?: any): AxiosPromise<File> {
            return localVarFp.resourcesAddResource(tenant, createResourceRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a resource.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesDeleteResource(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<File> {
            return localVarFp.resourcesDeleteResource(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get resource details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesGetById(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<ApplicationResourceDto> {
            return localVarFp.resourcesGetById(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesGetList(options?: any): AxiosPromise<File> {
            return localVarFp.resourcesGetList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of all resources.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesGetListAll(tenant: string, xApiRm?: string, options?: any): AxiosPromise<Array<ApplicationResourceDto>> {
            return localVarFp.resourcesGetListAll(tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import resources.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ImportResourceRequest} importResourceRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesImportResource(tenant: string, importResourceRequest: ImportResourceRequest, xApiRm?: string, options?: any): AxiosPromise<Array<ApplicationResourceDto>> {
            return localVarFp.resourcesImportResource(tenant, importResourceRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search resources by name and id
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchResourcesRequest} searchResourcesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesSearchResources(tenant: string, searchResourcesRequest: SearchResourcesRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfApplicationResourceDto> {
            return localVarFp.resourcesSearchResources(tenant, searchResourcesRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a resource.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateResourceRequest} updateResourceRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesUpdateResource(id: string, tenant: string, updateResourceRequest: UpdateResourceRequest, xApiRm?: string, options?: any): AxiosPromise<File> {
            return localVarFp.resourcesUpdateResource(id, tenant, updateResourceRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResourcesApi - object-oriented interface
 * @export
 * @class ResourcesApi
 * @extends {BaseAPI}
 */
export class ResourcesApi extends BaseAPI {
    /**
     * 
     * @summary Create a resource.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {CreateResourceRequest} createResourceRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public resourcesAddResource(tenant: string, createResourceRequest: CreateResourceRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).resourcesAddResource(tenant, createResourceRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a resource.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public resourcesDeleteResource(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).resourcesDeleteResource(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get resource details.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public resourcesGetById(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).resourcesGetById(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public resourcesGetList(options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).resourcesGetList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of all resources.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public resourcesGetListAll(tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).resourcesGetListAll(tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import resources.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {ImportResourceRequest} importResourceRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public resourcesImportResource(tenant: string, importResourceRequest: ImportResourceRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).resourcesImportResource(tenant, importResourceRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search resources by name and id
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SearchResourcesRequest} searchResourcesRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public resourcesSearchResources(tenant: string, searchResourcesRequest: SearchResourcesRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).resourcesSearchResources(tenant, searchResourcesRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a resource.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateResourceRequest} updateResourceRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public resourcesUpdateResource(id: string, tenant: string, updateResourceRequest: UpdateResourceRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).resourcesUpdateResource(id, tenant, updateResourceRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }
}
