/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA Identity Next
 * TripOTA Identity Next built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTitleLevelRequest } from '../models';
// @ts-ignore
import { TitleLevelDto } from '../models';
/**
 * TitleLevelsApi - axios parameter creator
 * @export
 */
export const TitleLevelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Title level.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateTitleLevelRequest} createTitleLevelRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        titleLevelsAdd: async (tenant: string, createTitleLevelRequest: CreateTitleLevelRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('titleLevelsAdd', 'tenant', tenant)
            // verify required parameter 'createTitleLevelRequest' is not null or undefined
            assertParamExists('titleLevelsAdd', 'createTitleLevelRequest', createTitleLevelRequest)
            const localVarPath = `/api/v1/TitleLevels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTitleLevelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of all title level.
         * @param {string} groupId 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        titleLevelsGetList: async (groupId: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('titleLevelsGetList', 'groupId', groupId)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('titleLevelsGetList', 'tenant', tenant)
            const localVarPath = `/api/v1/TitleLevels/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TitleLevelsApi - functional programming interface
 * @export
 */
export const TitleLevelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TitleLevelsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a Title level.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateTitleLevelRequest} createTitleLevelRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async titleLevelsAdd(tenant: string, createTitleLevelRequest: CreateTitleLevelRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TitleLevelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.titleLevelsAdd(tenant, createTitleLevelRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of all title level.
         * @param {string} groupId 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async titleLevelsGetList(groupId: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TitleLevelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.titleLevelsGetList(groupId, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TitleLevelsApi - factory interface
 * @export
 */
export const TitleLevelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TitleLevelsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a Title level.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateTitleLevelRequest} createTitleLevelRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        titleLevelsAdd(tenant: string, createTitleLevelRequest: CreateTitleLevelRequest, xApiRm?: string, options?: any): AxiosPromise<TitleLevelDto> {
            return localVarFp.titleLevelsAdd(tenant, createTitleLevelRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of all title level.
         * @param {string} groupId 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        titleLevelsGetList(groupId: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<Array<TitleLevelDto>> {
            return localVarFp.titleLevelsGetList(groupId, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TitleLevelsApi - object-oriented interface
 * @export
 * @class TitleLevelsApi
 * @extends {BaseAPI}
 */
export class TitleLevelsApi extends BaseAPI {
    /**
     * 
     * @summary Create a Title level.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {CreateTitleLevelRequest} createTitleLevelRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleLevelsApi
     */
    public titleLevelsAdd(tenant: string, createTitleLevelRequest: CreateTitleLevelRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return TitleLevelsApiFp(this.configuration).titleLevelsAdd(tenant, createTitleLevelRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of all title level.
     * @param {string} groupId 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleLevelsApi
     */
    public titleLevelsGetList(groupId: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return TitleLevelsApiFp(this.configuration).titleLevelsGetList(groupId, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }
}
