/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA Identity Next
 * TripOTA Identity Next built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApplicationDto } from '../models';
// @ts-ignore
import { ApplicationResourceDto } from '../models';
// @ts-ignore
import { CreateApplicationRequest } from '../models';
// @ts-ignore
import { InsertResourcesRequest } from '../models';
// @ts-ignore
import { PaginationResponseOfApplicationDto } from '../models';
// @ts-ignore
import { RemoveResourcesRequest } from '../models';
// @ts-ignore
import { SearchApplicationsRequest } from '../models';
// @ts-ignore
import { UpdateApplicationRequest } from '../models';
/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Application.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateApplicationRequest} createApplicationRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsCreate: async (tenant: string, createApplicationRequest: CreateApplicationRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('applicationsCreate', 'tenant', tenant)
            // verify required parameter 'createApplicationRequest' is not null or undefined
            assertParamExists('applicationsCreate', 'createApplicationRequest', createApplicationRequest)
            const localVarPath = `/api/v1/Applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createApplicationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsDelete: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('applicationsDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('applicationsDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/Applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Application details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsGet: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('applicationsGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('applicationsGet', 'tenant', tenant)
            const localVarPath = `/api/v1/Applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get resouce list by application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsGetResourceList: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('applicationsGetResourceList', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('applicationsGetResourceList', 'tenant', tenant)
            const localVarPath = `/api/v1/Applications/{id}/resources`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove resouce list into application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {RemoveResourcesRequest} removeResourcesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsRemoveResources: async (id: string, tenant: string, removeResourcesRequest: RemoveResourcesRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('applicationsRemoveResources', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('applicationsRemoveResources', 'tenant', tenant)
            // verify required parameter 'removeResourcesRequest' is not null or undefined
            assertParamExists('applicationsRemoveResources', 'removeResourcesRequest', removeResourcesRequest)
            const localVarPath = `/api/v1/Applications/{id}/remove-resources`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeResourcesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Application using available filters.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchApplicationsRequest} searchApplicationsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsSearch: async (tenant: string, searchApplicationsRequest: SearchApplicationsRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('applicationsSearch', 'tenant', tenant)
            // verify required parameter 'searchApplicationsRequest' is not null or undefined
            assertParamExists('applicationsSearch', 'searchApplicationsRequest', searchApplicationsRequest)
            const localVarPath = `/api/v1/Applications/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchApplicationsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateApplicationRequest} updateApplicationRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsUpdate: async (id: string, tenant: string, updateApplicationRequest: UpdateApplicationRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('applicationsUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('applicationsUpdate', 'tenant', tenant)
            // verify required parameter 'updateApplicationRequest' is not null or undefined
            assertParamExists('applicationsUpdate', 'updateApplicationRequest', updateApplicationRequest)
            const localVarPath = `/api/v1/Applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateApplicationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update resouce list into application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {InsertResourcesRequest} insertResourcesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsUpdateResources: async (id: string, tenant: string, insertResourcesRequest: InsertResourcesRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('applicationsUpdateResources', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('applicationsUpdateResources', 'tenant', tenant)
            // verify required parameter 'insertResourcesRequest' is not null or undefined
            assertParamExists('applicationsUpdateResources', 'insertResourcesRequest', insertResourcesRequest)
            const localVarPath = `/api/v1/Applications/{id}/update-resources`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertResourcesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Application.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateApplicationRequest} createApplicationRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsCreate(tenant: string, createApplicationRequest: CreateApplicationRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsCreate(tenant, createApplicationRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsDelete(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsDelete(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Application details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsGet(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsGet(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get resouce list by application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsGetResourceList(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationResourceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsGetResourceList(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove resouce list into application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {RemoveResourcesRequest} removeResourcesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsRemoveResources(id: string, tenant: string, removeResourcesRequest: RemoveResourcesRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsRemoveResources(id, tenant, removeResourcesRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Application using available filters.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchApplicationsRequest} searchApplicationsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsSearch(tenant: string, searchApplicationsRequest: SearchApplicationsRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfApplicationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsSearch(tenant, searchApplicationsRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateApplicationRequest} updateApplicationRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsUpdate(id: string, tenant: string, updateApplicationRequest: UpdateApplicationRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsUpdate(id, tenant, updateApplicationRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update resouce list into application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {InsertResourcesRequest} insertResourcesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsUpdateResources(id: string, tenant: string, insertResourcesRequest: InsertResourcesRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsUpdateResources(id, tenant, insertResourcesRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Application.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateApplicationRequest} createApplicationRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsCreate(tenant: string, createApplicationRequest: CreateApplicationRequest, xApiRm?: string, options?: any): AxiosPromise<ApplicationDto> {
            return localVarFp.applicationsCreate(tenant, createApplicationRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsDelete(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<string> {
            return localVarFp.applicationsDelete(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Application details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsGet(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<ApplicationDto> {
            return localVarFp.applicationsGet(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get resouce list by application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsGetResourceList(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<Array<ApplicationResourceDto>> {
            return localVarFp.applicationsGetResourceList(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove resouce list into application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {RemoveResourcesRequest} removeResourcesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsRemoveResources(id: string, tenant: string, removeResourcesRequest: RemoveResourcesRequest, xApiRm?: string, options?: any): AxiosPromise<ApplicationDto> {
            return localVarFp.applicationsRemoveResources(id, tenant, removeResourcesRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Application using available filters.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchApplicationsRequest} searchApplicationsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsSearch(tenant: string, searchApplicationsRequest: SearchApplicationsRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfApplicationDto> {
            return localVarFp.applicationsSearch(tenant, searchApplicationsRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateApplicationRequest} updateApplicationRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsUpdate(id: string, tenant: string, updateApplicationRequest: UpdateApplicationRequest, xApiRm?: string, options?: any): AxiosPromise<ApplicationDto> {
            return localVarFp.applicationsUpdate(id, tenant, updateApplicationRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update resouce list into application.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {InsertResourcesRequest} insertResourcesRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsUpdateResources(id: string, tenant: string, insertResourcesRequest: InsertResourcesRequest, xApiRm?: string, options?: any): AxiosPromise<ApplicationDto> {
            return localVarFp.applicationsUpdateResources(id, tenant, insertResourcesRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export class ApplicationsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Application.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {CreateApplicationRequest} createApplicationRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsCreate(tenant: string, createApplicationRequest: CreateApplicationRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).applicationsCreate(tenant, createApplicationRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Application.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsDelete(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).applicationsDelete(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Application details.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsGet(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).applicationsGet(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get resouce list by application.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsGetResourceList(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).applicationsGetResourceList(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove resouce list into application.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {RemoveResourcesRequest} removeResourcesRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsRemoveResources(id: string, tenant: string, removeResourcesRequest: RemoveResourcesRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).applicationsRemoveResources(id, tenant, removeResourcesRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Application using available filters.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SearchApplicationsRequest} searchApplicationsRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsSearch(tenant: string, searchApplicationsRequest: SearchApplicationsRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).applicationsSearch(tenant, searchApplicationsRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Application.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateApplicationRequest} updateApplicationRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsUpdate(id: string, tenant: string, updateApplicationRequest: UpdateApplicationRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).applicationsUpdate(id, tenant, updateApplicationRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update resouce list into application.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {InsertResourcesRequest} insertResourcesRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsUpdateResources(id: string, tenant: string, insertResourcesRequest: InsertResourcesRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).applicationsUpdateResources(id, tenant, insertResourcesRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }
}
