/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA Identity Next
 * TripOTA Identity Next built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientDto } from '../models';
// @ts-ignore
import { CreateClientRequest } from '../models';
// @ts-ignore
import { GetClientSecretRequest } from '../models';
// @ts-ignore
import { PaginationResponseOfClientDto } from '../models';
// @ts-ignore
import { RevokeClientSecretRequest } from '../models';
// @ts-ignore
import { SearchClientRequest } from '../models';
// @ts-ignore
import { UpdateClientRequest } from '../models';
// @ts-ignore
import { ValidateClientSecretRequest } from '../models';
/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Client.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateClientRequest} createClientRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsCreate: async (tenant: string, createClientRequest: CreateClientRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('clientsCreate', 'tenant', tenant)
            // verify required parameter 'createClientRequest' is not null or undefined
            assertParamExists('clientsCreate', 'createClientRequest', createClientRequest)
            const localVarPath = `/api/v1/Clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Client.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsDelete: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsDelete', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('clientsDelete', 'tenant', tenant)
            const localVarPath = `/api/v1/Clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Client details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsGet: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsGet', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('clientsGet', 'tenant', tenant)
            const localVarPath = `/api/v1/Clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get api client secret.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {GetClientSecretRequest} getClientSecretRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsGetResourceList: async (tenant: string, getClientSecretRequest: GetClientSecretRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('clientsGetResourceList', 'tenant', tenant)
            // verify required parameter 'getClientSecretRequest' is not null or undefined
            assertParamExists('clientsGetResourceList', 'getClientSecretRequest', getClientSecretRequest)
            const localVarPath = `/api/v1/Clients/get-client-secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getClientSecretRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revoke client secret.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {RevokeClientSecretRequest} revokeClientSecretRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsRevokeClientSecret: async (id: string, tenant: string, revokeClientSecretRequest: RevokeClientSecretRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsRevokeClientSecret', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('clientsRevokeClientSecret', 'tenant', tenant)
            // verify required parameter 'revokeClientSecretRequest' is not null or undefined
            assertParamExists('clientsRevokeClientSecret', 'revokeClientSecretRequest', revokeClientSecretRequest)
            const localVarPath = `/api/v1/Clients/{id}/revoke-client-secret`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(revokeClientSecretRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Client using available filters.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchClientRequest} searchClientRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsSearch: async (tenant: string, searchClientRequest: SearchClientRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('clientsSearch', 'tenant', tenant)
            // verify required parameter 'searchClientRequest' is not null or undefined
            assertParamExists('clientsSearch', 'searchClientRequest', searchClientRequest)
            const localVarPath = `/api/v1/Clients/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchClientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Client.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateClientRequest} updateClientRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsUpdate: async (id: string, tenant: string, updateClientRequest: UpdateClientRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsUpdate', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('clientsUpdate', 'tenant', tenant)
            // verify required parameter 'updateClientRequest' is not null or undefined
            assertParamExists('clientsUpdate', 'updateClientRequest', updateClientRequest)
            const localVarPath = `/api/v1/Clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateClientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate client secret.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ValidateClientSecretRequest} validateClientSecretRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsValidateClientSecret: async (tenant: string, validateClientSecretRequest: ValidateClientSecretRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('clientsValidateClientSecret', 'tenant', tenant)
            // verify required parameter 'validateClientSecretRequest' is not null or undefined
            assertParamExists('clientsValidateClientSecret', 'validateClientSecretRequest', validateClientSecretRequest)
            const localVarPath = `/api/v1/Clients/validate-client-secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(validateClientSecretRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Client.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateClientRequest} createClientRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsCreate(tenant: string, createClientRequest: CreateClientRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsCreate(tenant, createClientRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Client.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsDelete(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsDelete(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Client details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsGet(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsGet(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get api client secret.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {GetClientSecretRequest} getClientSecretRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsGetResourceList(tenant: string, getClientSecretRequest: GetClientSecretRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsGetResourceList(tenant, getClientSecretRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Revoke client secret.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {RevokeClientSecretRequest} revokeClientSecretRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsRevokeClientSecret(id: string, tenant: string, revokeClientSecretRequest: RevokeClientSecretRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsRevokeClientSecret(id, tenant, revokeClientSecretRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Client using available filters.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchClientRequest} searchClientRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsSearch(tenant: string, searchClientRequest: SearchClientRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfClientDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsSearch(tenant, searchClientRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Client.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateClientRequest} updateClientRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsUpdate(id: string, tenant: string, updateClientRequest: UpdateClientRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsUpdate(id, tenant, updateClientRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Validate client secret.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ValidateClientSecretRequest} validateClientSecretRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsValidateClientSecret(tenant: string, validateClientSecretRequest: ValidateClientSecretRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsValidateClientSecret(tenant, validateClientSecretRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Client.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateClientRequest} createClientRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsCreate(tenant: string, createClientRequest: CreateClientRequest, xApiRm?: string, options?: any): AxiosPromise<ClientDto> {
            return localVarFp.clientsCreate(tenant, createClientRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Client.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsDelete(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<string> {
            return localVarFp.clientsDelete(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Client details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsGet(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<ClientDto> {
            return localVarFp.clientsGet(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get api client secret.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {GetClientSecretRequest} getClientSecretRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsGetResourceList(tenant: string, getClientSecretRequest: GetClientSecretRequest, xApiRm?: string, options?: any): AxiosPromise<string> {
            return localVarFp.clientsGetResourceList(tenant, getClientSecretRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revoke client secret.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {RevokeClientSecretRequest} revokeClientSecretRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsRevokeClientSecret(id: string, tenant: string, revokeClientSecretRequest: RevokeClientSecretRequest, xApiRm?: string, options?: any): AxiosPromise<ClientDto> {
            return localVarFp.clientsRevokeClientSecret(id, tenant, revokeClientSecretRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Client using available filters.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchClientRequest} searchClientRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsSearch(tenant: string, searchClientRequest: SearchClientRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfClientDto> {
            return localVarFp.clientsSearch(tenant, searchClientRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Client.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateClientRequest} updateClientRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsUpdate(id: string, tenant: string, updateClientRequest: UpdateClientRequest, xApiRm?: string, options?: any): AxiosPromise<ClientDto> {
            return localVarFp.clientsUpdate(id, tenant, updateClientRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate client secret.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ValidateClientSecretRequest} validateClientSecretRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsValidateClientSecret(tenant: string, validateClientSecretRequest: ValidateClientSecretRequest, xApiRm?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.clientsValidateClientSecret(tenant, validateClientSecretRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Client.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {CreateClientRequest} createClientRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsCreate(tenant: string, createClientRequest: CreateClientRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsCreate(tenant, createClientRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Client.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsDelete(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsDelete(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Client details.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsGet(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsGet(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get api client secret.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {GetClientSecretRequest} getClientSecretRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsGetResourceList(tenant: string, getClientSecretRequest: GetClientSecretRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsGetResourceList(tenant, getClientSecretRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revoke client secret.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {RevokeClientSecretRequest} revokeClientSecretRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsRevokeClientSecret(id: string, tenant: string, revokeClientSecretRequest: RevokeClientSecretRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsRevokeClientSecret(id, tenant, revokeClientSecretRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Client using available filters.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SearchClientRequest} searchClientRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsSearch(tenant: string, searchClientRequest: SearchClientRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsSearch(tenant, searchClientRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Client.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateClientRequest} updateClientRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsUpdate(id: string, tenant: string, updateClientRequest: UpdateClientRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsUpdate(id, tenant, updateClientRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate client secret.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {ValidateClientSecretRequest} validateClientSecretRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsValidateClientSecret(tenant: string, validateClientSecretRequest: ValidateClientSecretRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsValidateClientSecret(tenant, validateClientSecretRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }
}
