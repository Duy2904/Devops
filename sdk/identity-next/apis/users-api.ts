/* tslint:disable */
/* eslint-disable */
/**
 * TripOTA Identity Next
 * TripOTA Identity Next built with Multitenancy Support.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: touch@tripota.com.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountInvitationDto } from '../models';
// @ts-ignore
import { AccountInvitationRequest } from '../models';
// @ts-ignore
import { AdvancedSearchUserRequest } from '../models';
// @ts-ignore
import { CreateLocalAccountRequest } from '../models';
// @ts-ignore
import { CreateLocalAccountStandaloneRequest } from '../models';
// @ts-ignore
import { GetLiteUsersRequest } from '../models';
// @ts-ignore
import { JsonDocument } from '../models';
// @ts-ignore
import { LiteUserDto } from '../models';
// @ts-ignore
import { PaginationResponseOfUserDto } from '../models';
// @ts-ignore
import { PaginationResponseOfViewUserGroupWithPrivilegeDto } from '../models';
// @ts-ignore
import { PaginationResponseOfViewUserHasPermissions } from '../models';
// @ts-ignore
import { PaginationResponseOfViewUserWithGroupDto } from '../models';
// @ts-ignore
import { PaginationResponseOfViewUserWithRoleGroupDto } from '../models';
// @ts-ignore
import { RoleDto } from '../models';
// @ts-ignore
import { SearchUserWithPermissionsRequest } from '../models';
// @ts-ignore
import { SearchUserWithRoleGroupRequest } from '../models';
// @ts-ignore
import { SearchUsersRequest } from '../models';
// @ts-ignore
import { SimpleUserDto } from '../models';
// @ts-ignore
import { SyncLocalAccountStandaloneRequest } from '../models';
// @ts-ignore
import { ToggleUserStatusRequest } from '../models';
// @ts-ignore
import { ToggleUserStatusWithGroupRequest } from '../models';
// @ts-ignore
import { UpdateLocalAccountRequest } from '../models';
// @ts-ignore
import { UpdateUserRolesByIdsRequest } from '../models';
// @ts-ignore
import { UpdateUserRolesRequest } from '../models';
// @ts-ignore
import { UserDetailsDto } from '../models';
// @ts-ignore
import { UserDto } from '../models';
// @ts-ignore
import { UserMgmtSearchRequest } from '../models';
// @ts-ignore
import { UserWithRolesDto } from '../models';
// @ts-ignore
import { UsersGetRolesAppParameter } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Advanced search user.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AdvancedSearchUserRequest} advancedSearchUserRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdvancedSearchUsers: async (tenant: string, advancedSearchUserRequest: AdvancedSearchUserRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersAdvancedSearchUsers', 'tenant', tenant)
            // verify required parameter 'advancedSearchUserRequest' is not null or undefined
            assertParamExists('usersAdvancedSearchUsers', 'advancedSearchUserRequest', advancedSearchUserRequest)
            const localVarPath = `/api/v1/Users/adv-search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(advancedSearchUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user\'s assigned roles by ids.
         * @param {string} id 
         * @param {UpdateUserRolesByIdsRequest} updateUserRolesByIdsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAssignRoleIds: async (id: string, updateUserRolesByIdsRequest: UpdateUserRolesByIdsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersAssignRoleIds', 'id', id)
            // verify required parameter 'updateUserRolesByIdsRequest' is not null or undefined
            assertParamExists('usersAssignRoleIds', 'updateUserRolesByIdsRequest', updateUserRolesByIdsRequest)
            const localVarPath = `/api/v1/Users/{id}/roleIds`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRolesByIdsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user\'s assigned roles.
         * @param {string} id 
         * @param {UpdateUserRolesRequest} updateUserRolesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAssignRoles: async (id: string, updateUserRolesRequest: UpdateUserRolesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersAssignRoles', 'id', id)
            // verify required parameter 'updateUserRolesRequest' is not null or undefined
            assertParamExists('usersAssignRoles', 'updateUserRolesRequest', updateUserRolesRequest)
            const localVarPath = `/api/v1/Users/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRolesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add local account.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateLocalAccountRequest} createLocalAccountRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreateLocalAccount: async (tenant: string, createLocalAccountRequest: CreateLocalAccountRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersCreateLocalAccount', 'tenant', tenant)
            // verify required parameter 'createLocalAccountRequest' is not null or undefined
            assertParamExists('usersCreateLocalAccount', 'createLocalAccountRequest', createLocalAccountRequest)
            const localVarPath = `/api/v1/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLocalAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add standalone local account.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateLocalAccountStandaloneRequest} createLocalAccountStandaloneRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreateLocalAccountStandalone: async (tenant: string, createLocalAccountStandaloneRequest: CreateLocalAccountStandaloneRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersCreateLocalAccountStandalone', 'tenant', tenant)
            // verify required parameter 'createLocalAccountStandaloneRequest' is not null or undefined
            assertParamExists('usersCreateLocalAccountStandalone', 'createLocalAccountStandaloneRequest', createLocalAccountStandaloneRequest)
            const localVarPath = `/api/v1/Users/standalone-local-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLocalAccountStandaloneRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete local account.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDeleteLocalAccount: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersDeleteLocalAccount', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersDeleteLocalAccount', 'tenant', tenant)
            const localVarPath = `/api/v1/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get change password redirect url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetChangePasswordUrl: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Users/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get lite users model
         * @param {GetLiteUsersRequest} getLiteUsersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetLiteUsers: async (getLiteUsersRequest: GetLiteUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getLiteUsersRequest' is not null or undefined
            assertParamExists('usersGetLiteUsers', 'getLiteUsersRequest', getLiteUsersRequest)
            const localVarPath = `/api/v1/Users/lite-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getLiteUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get account details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {number} [app] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetLocalAccount: async (id: string, tenant: string, app?: number, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersGetLocalAccount', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersGetLocalAccount', 'tenant', tenant)
            const localVarPath = `/api/v1/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user\'s roles.
         * @param {string} id 
         * @param {string} [groupId] 
         * @param {string} [userId] 
         * @param {UsersGetRolesAppParameter} [app] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetRoles: async (id: string, groupId?: string, userId?: string, app?: UsersGetRolesAppParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersGetRoles', 'id', id)
            const localVarPath = `/api/v1/Users/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (groupId !== undefined) {
                localVarQueryParameter['GroupId'] = groupId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (app !== undefined) {
                localVarQueryParameter['App'] = app;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a users by role name.
         * @param {string} roleName 
         * @param {string} [groupId] 
         * @param {string} [roleName2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetUsersByRole: async (roleName: string, groupId?: string, roleName2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('usersGetUsersByRole', 'roleName', roleName)
            const localVarPath = `/api/v1/Users/{roleName}/users`
                .replace(`{${"roleName"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (groupId !== undefined) {
                localVarQueryParameter['GroupId'] = groupId;
            }

            if (roleName2 !== undefined) {
                localVarQueryParameter['RoleName'] = roleName2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search user support specific permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchUserWithPermissionsRequest} searchUserWithPermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetUsersHasPermissions: async (tenant: string, searchUserWithPermissionsRequest: SearchUserWithPermissionsRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersGetUsersHasPermissions', 'tenant', tenant)
            // verify required parameter 'searchUserWithPermissionsRequest' is not null or undefined
            assertParamExists('usersGetUsersHasPermissions', 'searchUserWithPermissionsRequest', searchUserWithPermissionsRequest)
            const localVarPath = `/api/v1/Users/has-permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchUserWithPermissionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Invites users
         * @param {AccountInvitationRequest} accountInvitationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersInviteUsers: async (accountInvitationRequest: AccountInvitationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountInvitationRequest' is not null or undefined
            assertParamExists('usersInviteUsers', 'accountInvitationRequest', accountInvitationRequest)
            const localVarPath = `/api/v1/Users/invites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountInvitationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update local account status for a specific group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusWithGroupRequest} toggleUserStatusWithGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLocalAccountToggleStatusPATCH: async (id: string, tenant: string, toggleUserStatusWithGroupRequest: ToggleUserStatusWithGroupRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersLocalAccountToggleStatusPATCH', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersLocalAccountToggleStatusPATCH', 'tenant', tenant)
            // verify required parameter 'toggleUserStatusWithGroupRequest' is not null or undefined
            assertParamExists('usersLocalAccountToggleStatusPATCH', 'toggleUserStatusWithGroupRequest', toggleUserStatusWithGroupRequest)
            const localVarPath = `/api/v1/Users/{id}/toggle-with-group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toggleUserStatusWithGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update local account status for a specific group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusWithGroupRequest} toggleUserStatusWithGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLocalAccountToggleStatusPUT: async (id: string, tenant: string, toggleUserStatusWithGroupRequest: ToggleUserStatusWithGroupRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersLocalAccountToggleStatusPUT', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersLocalAccountToggleStatusPUT', 'tenant', tenant)
            // verify required parameter 'toggleUserStatusWithGroupRequest' is not null or undefined
            assertParamExists('usersLocalAccountToggleStatusPUT', 'toggleUserStatusWithGroupRequest', toggleUserStatusWithGroupRequest)
            const localVarPath = `/api/v1/Users/{id}/toggle-with-group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toggleUserStatusWithGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout current user.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLogout: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersLogout', 'id', id)
            const localVarPath = `/api/v1/Users/{id}/logout`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset the password for the specific user to a random password.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersResetPassword: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersResetPassword', 'id', id)
            const localVarPath = `/api/v1/Users/{id}/reset-password`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Restores a user that has been previously deleted.
         * @summary Restore a deleted user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRestoreDeletedUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRestoreDeletedUser', 'id', id)
            const localVarPath = `/api/v1/Users/{id}/restore-deleted-user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search users.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchUsersRequest} searchUsersRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSearchUsers: async (tenant: string, searchUsersRequest: SearchUsersRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersSearchUsers', 'tenant', tenant)
            // verify required parameter 'searchUsersRequest' is not null or undefined
            assertParamExists('usersSearchUsers', 'searchUsersRequest', searchUsersRequest)
            const localVarPath = `/api/v1/Users/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search user support role group and branch.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchUserWithRoleGroupRequest} searchUserWithRoleGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSearchUsersDetail: async (tenant: string, searchUserWithRoleGroupRequest: SearchUserWithRoleGroupRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersSearchUsersDetail', 'tenant', tenant)
            // verify required parameter 'searchUserWithRoleGroupRequest' is not null or undefined
            assertParamExists('usersSearchUsersDetail', 'searchUserWithRoleGroupRequest', searchUserWithRoleGroupRequest)
            const localVarPath = `/api/v1/Users/tour/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchUserWithRoleGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sync standalone local account.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SyncLocalAccountStandaloneRequest} syncLocalAccountStandaloneRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSyncLocalAccountStandalone: async (tenant: string, syncLocalAccountStandaloneRequest: SyncLocalAccountStandaloneRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersSyncLocalAccountStandalone', 'tenant', tenant)
            // verify required parameter 'syncLocalAccountStandaloneRequest' is not null or undefined
            assertParamExists('usersSyncLocalAccountStandalone', 'syncLocalAccountStandaloneRequest', syncLocalAccountStandaloneRequest)
            const localVarPath = `/api/v1/Users/sync-standalone-local-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(syncLocalAccountStandaloneRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update local account.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateLocalAccountRequest} updateLocalAccountRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdateLocalAccount: async (id: string, tenant: string, updateLocalAccountRequest: UpdateLocalAccountRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersUpdateLocalAccount', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersUpdateLocalAccount', 'tenant', tenant)
            // verify required parameter 'updateLocalAccountRequest' is not null or undefined
            assertParamExists('usersUpdateLocalAccount', 'updateLocalAccountRequest', updateLocalAccountRequest)
            const localVarPath = `/api/v1/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateLocalAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update local account status.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusRequest} toggleUserStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdateLocalAccountStatusPATCH: async (id: string, tenant: string, toggleUserStatusRequest: ToggleUserStatusRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersUpdateLocalAccountStatusPATCH', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersUpdateLocalAccountStatusPATCH', 'tenant', tenant)
            // verify required parameter 'toggleUserStatusRequest' is not null or undefined
            assertParamExists('usersUpdateLocalAccountStatusPATCH', 'toggleUserStatusRequest', toggleUserStatusRequest)
            const localVarPath = `/api/v1/Users/{id}/toggle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toggleUserStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update local account status.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusRequest} toggleUserStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdateLocalAccountStatusPUT: async (id: string, tenant: string, toggleUserStatusRequest: ToggleUserStatusRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersUpdateLocalAccountStatusPUT', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersUpdateLocalAccountStatusPUT', 'tenant', tenant)
            // verify required parameter 'toggleUserStatusRequest' is not null or undefined
            assertParamExists('usersUpdateLocalAccountStatusPUT', 'toggleUserStatusRequest', toggleUserStatusRequest)
            const localVarPath = `/api/v1/Users/{id}/toggle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toggleUserStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user\'s profile photo.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {string} [id2] 
         * @param {File} [imageFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdateUserProfilePhoto: async (id: string, tenant: string, xApiRm?: string, id2?: string, imageFile?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersUpdateUserProfilePhoto', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersUpdateUserProfilePhoto', 'tenant', tenant)
            const localVarPath = `/api/v1/Users/{id}/profile-photo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


            if (id2 !== undefined) { 
                localVarFormParams.append('Id', id2 as any);
            }
    
            if (imageFile !== undefined) { 
                localVarFormParams.append('Image.File', imageFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user histories.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserHistories: async (id: string, tenant: string, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersUserHistories', 'id', id)
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersUserHistories', 'tenant', tenant)
            const localVarPath = `/api/v1/Users/{id}/histories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Management search user.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UserMgmtSearchRequest} userMgmtSearchRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserMgmtSearch: async (tenant: string, userMgmtSearchRequest: UserMgmtSearchRequest, xApiRm?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('usersUserMgmtSearch', 'tenant', tenant)
            // verify required parameter 'userMgmtSearchRequest' is not null or undefined
            assertParamExists('usersUserMgmtSearch', 'userMgmtSearchRequest', userMgmtSearchRequest)
            const localVarPath = `/api/v1/Users/mgmt-search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xApiRm != null) {
                localVarHeaderParameter['x-api-rm'] = String(xApiRm);
            }

            if (tenant != null) {
                localVarHeaderParameter['tenant'] = String(tenant);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userMgmtSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Advanced search user.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AdvancedSearchUserRequest} advancedSearchUserRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAdvancedSearchUsers(tenant: string, advancedSearchUserRequest: AdvancedSearchUserRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfViewUserWithGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAdvancedSearchUsers(tenant, advancedSearchUserRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a user\'s assigned roles by ids.
         * @param {string} id 
         * @param {UpdateUserRolesByIdsRequest} updateUserRolesByIdsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAssignRoleIds(id: string, updateUserRolesByIdsRequest: UpdateUserRolesByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWithRolesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAssignRoleIds(id, updateUserRolesByIdsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a user\'s assigned roles.
         * @param {string} id 
         * @param {UpdateUserRolesRequest} updateUserRolesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAssignRoles(id: string, updateUserRolesRequest: UpdateUserRolesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWithRolesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAssignRoles(id, updateUserRolesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add local account.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateLocalAccountRequest} createLocalAccountRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCreateLocalAccount(tenant: string, createLocalAccountRequest: CreateLocalAccountRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCreateLocalAccount(tenant, createLocalAccountRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add standalone local account.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateLocalAccountStandaloneRequest} createLocalAccountStandaloneRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCreateLocalAccountStandalone(tenant: string, createLocalAccountStandaloneRequest: CreateLocalAccountStandaloneRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCreateLocalAccountStandalone(tenant, createLocalAccountStandaloneRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete local account.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersDeleteLocalAccount(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersDeleteLocalAccount(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get change password redirect url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGetChangePasswordUrl(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetChangePasswordUrl(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get lite users model
         * @param {GetLiteUsersRequest} getLiteUsersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGetLiteUsers(getLiteUsersRequest: GetLiteUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiteUserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetLiteUsers(getLiteUsersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get account details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {number} [app] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGetLocalAccount(id: string, tenant: string, app?: number, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetLocalAccount(id, tenant, app, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a user\'s roles.
         * @param {string} id 
         * @param {string} [groupId] 
         * @param {string} [userId] 
         * @param {UsersGetRolesAppParameter} [app] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGetRoles(id: string, groupId?: string, userId?: string, app?: UsersGetRolesAppParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetRoles(id, groupId, userId, app, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a users by role name.
         * @param {string} roleName 
         * @param {string} [groupId] 
         * @param {string} [roleName2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGetUsersByRole(roleName: string, groupId?: string, roleName2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SimpleUserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetUsersByRole(roleName, groupId, roleName2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search user support specific permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchUserWithPermissionsRequest} searchUserWithPermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGetUsersHasPermissions(tenant: string, searchUserWithPermissionsRequest: SearchUserWithPermissionsRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfViewUserHasPermissions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetUsersHasPermissions(tenant, searchUserWithPermissionsRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Invites users
         * @param {AccountInvitationRequest} accountInvitationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersInviteUsers(accountInvitationRequest: AccountInvitationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountInvitationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersInviteUsers(accountInvitationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update local account status for a specific group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusWithGroupRequest} toggleUserStatusWithGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLocalAccountToggleStatusPATCH(id: string, tenant: string, toggleUserStatusWithGroupRequest: ToggleUserStatusWithGroupRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLocalAccountToggleStatusPATCH(id, tenant, toggleUserStatusWithGroupRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update local account status for a specific group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusWithGroupRequest} toggleUserStatusWithGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLocalAccountToggleStatusPUT(id: string, tenant: string, toggleUserStatusWithGroupRequest: ToggleUserStatusWithGroupRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLocalAccountToggleStatusPUT(id, tenant, toggleUserStatusWithGroupRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Logout current user.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLogout(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLogout(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reset the password for the specific user to a random password.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersResetPassword(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersResetPassword(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Restores a user that has been previously deleted.
         * @summary Restore a deleted user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRestoreDeletedUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRestoreDeletedUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search users.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchUsersRequest} searchUsersRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersSearchUsers(tenant: string, searchUsersRequest: SearchUsersRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersSearchUsers(tenant, searchUsersRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search user support role group and branch.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchUserWithRoleGroupRequest} searchUserWithRoleGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersSearchUsersDetail(tenant: string, searchUserWithRoleGroupRequest: SearchUserWithRoleGroupRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfViewUserWithRoleGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersSearchUsersDetail(tenant, searchUserWithRoleGroupRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sync standalone local account.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SyncLocalAccountStandaloneRequest} syncLocalAccountStandaloneRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersSyncLocalAccountStandalone(tenant: string, syncLocalAccountStandaloneRequest: SyncLocalAccountStandaloneRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersSyncLocalAccountStandalone(tenant, syncLocalAccountStandaloneRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update local account.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateLocalAccountRequest} updateLocalAccountRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUpdateLocalAccount(id: string, tenant: string, updateLocalAccountRequest: UpdateLocalAccountRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUpdateLocalAccount(id, tenant, updateLocalAccountRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update local account status.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusRequest} toggleUserStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUpdateLocalAccountStatusPATCH(id: string, tenant: string, toggleUserStatusRequest: ToggleUserStatusRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUpdateLocalAccountStatusPATCH(id, tenant, toggleUserStatusRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update local account status.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusRequest} toggleUserStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUpdateLocalAccountStatusPUT(id: string, tenant: string, toggleUserStatusRequest: ToggleUserStatusRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUpdateLocalAccountStatusPUT(id, tenant, toggleUserStatusRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user\'s profile photo.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {string} [id2] 
         * @param {File} [imageFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUpdateUserProfilePhoto(id: string, tenant: string, xApiRm?: string, id2?: string, imageFile?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUpdateUserProfilePhoto(id, tenant, xApiRm, id2, imageFile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user histories.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserHistories(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserHistories(id, tenant, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Management search user.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UserMgmtSearchRequest} userMgmtSearchRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserMgmtSearch(tenant: string, userMgmtSearchRequest: UserMgmtSearchRequest, xApiRm?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationResponseOfViewUserGroupWithPrivilegeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserMgmtSearch(tenant, userMgmtSearchRequest, xApiRm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Advanced search user.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {AdvancedSearchUserRequest} advancedSearchUserRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAdvancedSearchUsers(tenant: string, advancedSearchUserRequest: AdvancedSearchUserRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfViewUserWithGroupDto> {
            return localVarFp.usersAdvancedSearchUsers(tenant, advancedSearchUserRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user\'s assigned roles by ids.
         * @param {string} id 
         * @param {UpdateUserRolesByIdsRequest} updateUserRolesByIdsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAssignRoleIds(id: string, updateUserRolesByIdsRequest: UpdateUserRolesByIdsRequest, options?: any): AxiosPromise<UserWithRolesDto> {
            return localVarFp.usersAssignRoleIds(id, updateUserRolesByIdsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user\'s assigned roles.
         * @param {string} id 
         * @param {UpdateUserRolesRequest} updateUserRolesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAssignRoles(id: string, updateUserRolesRequest: UpdateUserRolesRequest, options?: any): AxiosPromise<UserWithRolesDto> {
            return localVarFp.usersAssignRoles(id, updateUserRolesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add local account.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateLocalAccountRequest} createLocalAccountRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreateLocalAccount(tenant: string, createLocalAccountRequest: CreateLocalAccountRequest, xApiRm?: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersCreateLocalAccount(tenant, createLocalAccountRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add standalone local account.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {CreateLocalAccountStandaloneRequest} createLocalAccountStandaloneRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreateLocalAccountStandalone(tenant: string, createLocalAccountStandaloneRequest: CreateLocalAccountStandaloneRequest, xApiRm?: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersCreateLocalAccountStandalone(tenant, createLocalAccountStandaloneRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete local account.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDeleteLocalAccount(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.usersDeleteLocalAccount(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get change password redirect url.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetChangePasswordUrl(options?: any): AxiosPromise<string> {
            return localVarFp.usersGetChangePasswordUrl(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get lite users model
         * @param {GetLiteUsersRequest} getLiteUsersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetLiteUsers(getLiteUsersRequest: GetLiteUsersRequest, options?: any): AxiosPromise<Array<LiteUserDto>> {
            return localVarFp.usersGetLiteUsers(getLiteUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get account details.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {number} [app] 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetLocalAccount(id: string, tenant: string, app?: number, xApiRm?: string, options?: any): AxiosPromise<UserDetailsDto> {
            return localVarFp.usersGetLocalAccount(id, tenant, app, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user\'s roles.
         * @param {string} id 
         * @param {string} [groupId] 
         * @param {string} [userId] 
         * @param {UsersGetRolesAppParameter} [app] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetRoles(id: string, groupId?: string, userId?: string, app?: UsersGetRolesAppParameter, options?: any): AxiosPromise<Array<RoleDto>> {
            return localVarFp.usersGetRoles(id, groupId, userId, app, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a users by role name.
         * @param {string} roleName 
         * @param {string} [groupId] 
         * @param {string} [roleName2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetUsersByRole(roleName: string, groupId?: string, roleName2?: string, options?: any): AxiosPromise<Array<SimpleUserDto>> {
            return localVarFp.usersGetUsersByRole(roleName, groupId, roleName2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search user support specific permissions.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchUserWithPermissionsRequest} searchUserWithPermissionsRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetUsersHasPermissions(tenant: string, searchUserWithPermissionsRequest: SearchUserWithPermissionsRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfViewUserHasPermissions> {
            return localVarFp.usersGetUsersHasPermissions(tenant, searchUserWithPermissionsRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Invites users
         * @param {AccountInvitationRequest} accountInvitationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersInviteUsers(accountInvitationRequest: AccountInvitationRequest, options?: any): AxiosPromise<Array<AccountInvitationDto>> {
            return localVarFp.usersInviteUsers(accountInvitationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update local account status for a specific group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusWithGroupRequest} toggleUserStatusWithGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLocalAccountToggleStatusPATCH(id: string, tenant: string, toggleUserStatusWithGroupRequest: ToggleUserStatusWithGroupRequest, xApiRm?: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersLocalAccountToggleStatusPATCH(id, tenant, toggleUserStatusWithGroupRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update local account status for a specific group.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusWithGroupRequest} toggleUserStatusWithGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLocalAccountToggleStatusPUT(id: string, tenant: string, toggleUserStatusWithGroupRequest: ToggleUserStatusWithGroupRequest, xApiRm?: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersLocalAccountToggleStatusPUT(id, tenant, toggleUserStatusWithGroupRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout current user.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLogout(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.usersLogout(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset the password for the specific user to a random password.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersResetPassword(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.usersResetPassword(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Restores a user that has been previously deleted.
         * @summary Restore a deleted user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRestoreDeletedUser(id: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.usersRestoreDeletedUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search users.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchUsersRequest} searchUsersRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSearchUsers(tenant: string, searchUsersRequest: SearchUsersRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfUserDto> {
            return localVarFp.usersSearchUsers(tenant, searchUsersRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search user support role group and branch.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SearchUserWithRoleGroupRequest} searchUserWithRoleGroupRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSearchUsersDetail(tenant: string, searchUserWithRoleGroupRequest: SearchUserWithRoleGroupRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfViewUserWithRoleGroupDto> {
            return localVarFp.usersSearchUsersDetail(tenant, searchUserWithRoleGroupRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sync standalone local account.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {SyncLocalAccountStandaloneRequest} syncLocalAccountStandaloneRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSyncLocalAccountStandalone(tenant: string, syncLocalAccountStandaloneRequest: SyncLocalAccountStandaloneRequest, xApiRm?: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersSyncLocalAccountStandalone(tenant, syncLocalAccountStandaloneRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update local account.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UpdateLocalAccountRequest} updateLocalAccountRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdateLocalAccount(id: string, tenant: string, updateLocalAccountRequest: UpdateLocalAccountRequest, xApiRm?: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersUpdateLocalAccount(id, tenant, updateLocalAccountRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update local account status.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusRequest} toggleUserStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdateLocalAccountStatusPATCH(id: string, tenant: string, toggleUserStatusRequest: ToggleUserStatusRequest, xApiRm?: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersUpdateLocalAccountStatusPATCH(id, tenant, toggleUserStatusRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update local account status.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {ToggleUserStatusRequest} toggleUserStatusRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdateLocalAccountStatusPUT(id: string, tenant: string, toggleUserStatusRequest: ToggleUserStatusRequest, xApiRm?: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersUpdateLocalAccountStatusPUT(id, tenant, toggleUserStatusRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user\'s profile photo.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {string} [id2] 
         * @param {File} [imageFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdateUserProfilePhoto(id: string, tenant: string, xApiRm?: string, id2?: string, imageFile?: File, options?: any): AxiosPromise<string> {
            return localVarFp.usersUpdateUserProfilePhoto(id, tenant, xApiRm, id2, imageFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user histories.
         * @param {string} id 
         * @param {string} tenant Input your tenant Id to access this API
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserHistories(id: string, tenant: string, xApiRm?: string, options?: any): AxiosPromise<JsonDocument> {
            return localVarFp.usersUserHistories(id, tenant, xApiRm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Management search user.
         * @param {string} tenant Input your tenant Id to access this API
         * @param {UserMgmtSearchRequest} userMgmtSearchRequest 
         * @param {string} [xApiRm] Request mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserMgmtSearch(tenant: string, userMgmtSearchRequest: UserMgmtSearchRequest, xApiRm?: string, options?: any): AxiosPromise<PaginationResponseOfViewUserGroupWithPrivilegeDto> {
            return localVarFp.usersUserMgmtSearch(tenant, userMgmtSearchRequest, xApiRm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Advanced search user.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {AdvancedSearchUserRequest} advancedSearchUserRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersAdvancedSearchUsers(tenant: string, advancedSearchUserRequest: AdvancedSearchUserRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersAdvancedSearchUsers(tenant, advancedSearchUserRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user\'s assigned roles by ids.
     * @param {string} id 
     * @param {UpdateUserRolesByIdsRequest} updateUserRolesByIdsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersAssignRoleIds(id: string, updateUserRolesByIdsRequest: UpdateUserRolesByIdsRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersAssignRoleIds(id, updateUserRolesByIdsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user\'s assigned roles.
     * @param {string} id 
     * @param {UpdateUserRolesRequest} updateUserRolesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersAssignRoles(id: string, updateUserRolesRequest: UpdateUserRolesRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersAssignRoles(id, updateUserRolesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add local account.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {CreateLocalAccountRequest} createLocalAccountRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersCreateLocalAccount(tenant: string, createLocalAccountRequest: CreateLocalAccountRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersCreateLocalAccount(tenant, createLocalAccountRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add standalone local account.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {CreateLocalAccountStandaloneRequest} createLocalAccountStandaloneRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersCreateLocalAccountStandalone(tenant: string, createLocalAccountStandaloneRequest: CreateLocalAccountStandaloneRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersCreateLocalAccountStandalone(tenant, createLocalAccountStandaloneRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete local account.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersDeleteLocalAccount(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersDeleteLocalAccount(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get change password redirect url.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGetChangePasswordUrl(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGetChangePasswordUrl(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get lite users model
     * @param {GetLiteUsersRequest} getLiteUsersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGetLiteUsers(getLiteUsersRequest: GetLiteUsersRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGetLiteUsers(getLiteUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get account details.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {number} [app] 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGetLocalAccount(id: string, tenant: string, app?: number, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGetLocalAccount(id, tenant, app, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user\'s roles.
     * @param {string} id 
     * @param {string} [groupId] 
     * @param {string} [userId] 
     * @param {UsersGetRolesAppParameter} [app] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGetRoles(id: string, groupId?: string, userId?: string, app?: UsersGetRolesAppParameter, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGetRoles(id, groupId, userId, app, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a users by role name.
     * @param {string} roleName 
     * @param {string} [groupId] 
     * @param {string} [roleName2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGetUsersByRole(roleName: string, groupId?: string, roleName2?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGetUsersByRole(roleName, groupId, roleName2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search user support specific permissions.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SearchUserWithPermissionsRequest} searchUserWithPermissionsRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGetUsersHasPermissions(tenant: string, searchUserWithPermissionsRequest: SearchUserWithPermissionsRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGetUsersHasPermissions(tenant, searchUserWithPermissionsRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Invites users
     * @param {AccountInvitationRequest} accountInvitationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersInviteUsers(accountInvitationRequest: AccountInvitationRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersInviteUsers(accountInvitationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update local account status for a specific group.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {ToggleUserStatusWithGroupRequest} toggleUserStatusWithGroupRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLocalAccountToggleStatusPATCH(id: string, tenant: string, toggleUserStatusWithGroupRequest: ToggleUserStatusWithGroupRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLocalAccountToggleStatusPATCH(id, tenant, toggleUserStatusWithGroupRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update local account status for a specific group.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {ToggleUserStatusWithGroupRequest} toggleUserStatusWithGroupRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLocalAccountToggleStatusPUT(id: string, tenant: string, toggleUserStatusWithGroupRequest: ToggleUserStatusWithGroupRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLocalAccountToggleStatusPUT(id, tenant, toggleUserStatusWithGroupRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout current user.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLogout(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLogout(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset the password for the specific user to a random password.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersResetPassword(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersResetPassword(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Restores a user that has been previously deleted.
     * @summary Restore a deleted user
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRestoreDeletedUser(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersRestoreDeletedUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search users.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SearchUsersRequest} searchUsersRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersSearchUsers(tenant: string, searchUsersRequest: SearchUsersRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersSearchUsers(tenant, searchUsersRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search user support role group and branch.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SearchUserWithRoleGroupRequest} searchUserWithRoleGroupRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersSearchUsersDetail(tenant: string, searchUserWithRoleGroupRequest: SearchUserWithRoleGroupRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersSearchUsersDetail(tenant, searchUserWithRoleGroupRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sync standalone local account.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {SyncLocalAccountStandaloneRequest} syncLocalAccountStandaloneRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersSyncLocalAccountStandalone(tenant: string, syncLocalAccountStandaloneRequest: SyncLocalAccountStandaloneRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersSyncLocalAccountStandalone(tenant, syncLocalAccountStandaloneRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update local account.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UpdateLocalAccountRequest} updateLocalAccountRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUpdateLocalAccount(id: string, tenant: string, updateLocalAccountRequest: UpdateLocalAccountRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUpdateLocalAccount(id, tenant, updateLocalAccountRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update local account status.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {ToggleUserStatusRequest} toggleUserStatusRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUpdateLocalAccountStatusPATCH(id: string, tenant: string, toggleUserStatusRequest: ToggleUserStatusRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUpdateLocalAccountStatusPATCH(id, tenant, toggleUserStatusRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update local account status.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {ToggleUserStatusRequest} toggleUserStatusRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUpdateLocalAccountStatusPUT(id: string, tenant: string, toggleUserStatusRequest: ToggleUserStatusRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUpdateLocalAccountStatusPUT(id, tenant, toggleUserStatusRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user\'s profile photo.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {string} [id2] 
     * @param {File} [imageFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUpdateUserProfilePhoto(id: string, tenant: string, xApiRm?: string, id2?: string, imageFile?: File, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUpdateUserProfilePhoto(id, tenant, xApiRm, id2, imageFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user histories.
     * @param {string} id 
     * @param {string} tenant Input your tenant Id to access this API
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserHistories(id: string, tenant: string, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserHistories(id, tenant, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Management search user.
     * @param {string} tenant Input your tenant Id to access this API
     * @param {UserMgmtSearchRequest} userMgmtSearchRequest 
     * @param {string} [xApiRm] Request mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserMgmtSearch(tenant: string, userMgmtSearchRequest: UserMgmtSearchRequest, xApiRm?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserMgmtSearch(tenant, userMgmtSearchRequest, xApiRm, options).then((request) => request(this.axios, this.basePath));
    }
}
